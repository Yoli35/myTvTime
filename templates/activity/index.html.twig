{% extends 'base.html.twig' %}
{% set user = app.user %}
{% block title %}{{ 'Activity'|trans }}{% endblock %}

{% block body %}
    <div class="container">

        {{ include('blocks/_mainMenu.html.twig') }}

        <div class="activity">
            <div class="header">
                <h1>{{ 'Activity'|trans }}</h1>
                <div class="backdrop"></div>
                {{ include('blocks/_clock.html.twig') }}
            </div>

            {{ include('blocks/_nav.html.twig', {thisPage: 'Activity', user: app.user, from: 'home', style: 'width: 100%'}) }}

            <main>
                {% if activity is null %}
                    <a href="{{ path('app_activity_new') }}" class="no-activity btn btn-primary">{{ 'Activate'|trans }}</a>
                {% else %}
                    <a href="{{ path('app_activity_edit', {id: activity.id}) }}" class="activity-goals btn btn-primary">{{ 'Goals'|trans }}</a>
                    <div class="recent-activity">
                        <h2>{{ 'Recent activity'|trans }}</h2>
                        <div class="days">
                            {% for day in days %}
                                <div class="day">
                                    <div class="date">{{ day.day|format_date('full')|capitalize }}</div>
                                    <div class="activity-of-the-day">
                                        <div class="stand-up">
                                            <div class="block-header">
                                                <div class="title">{{ 'Stand up'|trans }}</div>
                                                <div class="completed{% if day.isStandUpRingCompleted %} visible{% endif %}">{{ 'goal'|trans }}</div>
                                            </div>
                                            <div class="block-body">
                                                {% set percent = (day.standUpResult / activity.standUpGoal * 100)|round %}
                                                <div class="progress stand-up" data-percent="{{ percent }}">
                                                    <div class="circle">
                                                        <div class="percentage">{{ percent }}%</div>
                                                    </div>
                                                    <div class="circle-start"></div>
                                                    <div class="circle-end">
                                                        <div></div>
                                                    </div>
                                                </div>
                                                <div class="details">
                                                    <div class="detail">
                                                        <div class="result">{{ day.standUpResult }}</div>
                                                        /
                                                        <div class="goal">{{ activity.standUpGoal }}</div>
                                                    </div>
                                                    <div class="wrapper">
                                                        <div class="hours" data-id="{{ activity.id }}" data-day="{{ day.id }}">
                                                            {{ include('blocks/activity/_standUp.html.twig', {ups: day.standUp}) }}
                                                        </div>
                                                        <div class="graduations">
                                                            <div class="quarter">0</div>
                                                            <div class="quarter">6</div>
                                                            <div class="quarter">12</div>
                                                            <div class="quarter">18</div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="move">
                                            <div class="block-header">
                                                <div class="title">{{ 'Move'|trans }}</div>
                                                <div class="completed{% if day.isMoveRingCompleted %} visible{% endif %}">{{ 'goal'|trans }}</div>
                                            </div>
                                            <div class="block-body">
                                                {% set percent = (day.moveResult / activity.moveGoal * 100)|round %}
                                                <div class="progress move" data-percent="{{ percent }}">
                                                    <div class="circle">
                                                        <div class="percentage">{{ percent }}%</div>
                                                    </div>
                                                    <div class="circle-start"></div>
                                                    <div class="circle-end">
                                                        <div></div>
                                                    </div>
                                                </div>
                                                <div class="details">
                                                    <div class="detail">
                                                        <div class="result" data-id="{{ activity.id }}" data-day="{{ day.id }}" data-title="{{ 'Click me to edit'|trans }}">
                                                            <span>{{ day.moveResult }}</span> KCal
                                                            <input type="number" name="moveResult" value="{{ day.moveResult }}"/>
                                                        </div>
                                                        /
                                                        <div class="goal" data-title="{{ 'Click the goals button to modify'|trans }}">{{ activity.moveGoal }} KCal</div>
                                                    </div>
                                                    <div class="detail">
                                                        <div class="steps" data-id="{{ activity.id }}" data-day="{{ day.id }}" data-title="{{ 'Click me to edit'|trans }}">
                                                            {{ 'Steps'|trans }} : <span>{{ day.steps }}</span>
                                                            <input type="number" name="steps" value="{{ day.steps }}"/>
                                                        </div>
                                                        <div class="distance" data-id="{{ activity.id }}" data-day="{{ day.id }}" data-title="{{ 'Click me to edit'|trans }}">
                                                            {{ 'Distance'|trans }} : <span>{{ day.distance }}</span>km
                                                            <input type="number" name="distance" value="{{ day.distance }}"/>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="exercice">
                                            <div class="block-header">
                                                <div class="title">{{ 'Exercice'|trans }}</div>
                                                <div class="completed{% if day.isExerciceRingCompleted %} visible{% endif %}">{{ 'goal'|trans }}</div>
                                            </div>
                                            <div class="block-body">
                                                {% set percent = (day.exerciceResult / activity.exerciceGoal * 100)|round %}
                                                <div class="progress exercice" data-percent="{{ percent }}">
                                                    <div class="circle">
                                                        <div class="percentage">{{ percent }}%</div>
                                                    </div>
                                                    <div class="circle-start"></div>
                                                    <div class="circle-end">
                                                        <div></div>
                                                    </div>
                                                </div>
                                                <div class="details">
                                                    <div class="detail">
                                                        <div class="result" data-id="{{ activity.id }}" data-day="{{ day.id }}" data-title="{{ 'Click me to edit'|trans }}">
                                                            <span>{{ day.exerciceResult }}</span> {{ 'minutes'|trans }}
                                                            <input type="number" name="exerciceResult" value="{{ day.exerciceResult }}"/>
                                                        </div>
                                                        /
                                                        <div class="goal" data-title="{{ 'Click the goals button to modify'|trans }}">{{ activity.exerciceGoal }} {{ 'minutes'|trans }}</div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            {% endfor %}
                        </div>
                    </div>
                {% endif %}
            </main>
            {{ include('blocks/_pageFooter.html.twig') }}
        </div>
    </div>
    <div class="tool-tips">
        <div class="body"></div>
        <div class="tail"></div>
    </div>
{% endblock %}
{% block javascripts %}
    {{ parent() }}
    <script>
        let letterRatios = [];

        window.addEventListener("DOMContentLoaded", () => {

            initHeader();
            setProgress(["stand-up", "move", "exercice"]);
            initStandUp();
            initInputs();
            replaceTitleAttribute();

            setTimeout(() => {
                document.querySelector(".header").setAttribute("style", "background-color: transparent");
            }, 0);

        })

        function initHeader() {
            const header = document.querySelector(".header");
            let ticking = false;
            let letters, animatedH1, index = 0;

            animatedH1 = document.createElement("div");
            animatedH1.classList.add("animated-h1");
            animatedH1 = header.insertBefore(animatedH1, document.querySelector(".backdrop"));
            letters = document.querySelector("h1").innerText.split('');

            document.querySelector("h1").innerText = "";

            letters.forEach(letter => {
                let part = document.createElement("div");
                part.classList.add("part");
                if (letter === " ") {
                    part.innerHTML = "&nbsp;"
                } else {
                    part.innerText = letter;
                }
                animatedH1.appendChild(part);
                letterRatios[index] = 2 * (Math.random() - .5);
                index++;
            })
            setH1();
            window.addEventListener('resize', setH1);

            window.addEventListener('scroll', () => {
                if (!ticking) {
                    window.requestAnimationFrame(function () {
                        setH1();
                        ticking = false;
                    });
                }
                ticking = true;
            });
            header.setAttribute("style", "background-color: transparent;");
        }

        function setH1() {
            const header = document.querySelector(".header");
            const h1 = document.querySelector(".animated-h1");
            const parts = h1.querySelectorAll(".part");
            let left, ratio, top, n = 0;
            ratio = (header.clientHeight - window.scrollY) / header.clientHeight;
            left = (header.clientWidth - h1.clientWidth) / 2;
            top = ((header.clientHeight + window.scrollY) - h1.clientHeight) / 2;
            if (ratio < 0) ratio = 0;
            if (ratio > 1) ratio = 1;
            parts.forEach(part => {
                part.setAttribute("style", "transform: rotate(" + (720 * (1 - ratio) * letterRatios[n++]) + "deg);");
            })
            h1.setAttribute("style", "left: " + left.toString() + "px; top: " + top.toString() + "px; opacity: " + ratio + "; transform: scale(" + (1 + (5 * (1 - ratio))) + ")");
        }

        function setProgress(circles) {
            circles.forEach(circle => {

                const elements = document.querySelectorAll(".progress." + circle);

                elements.forEach(element => {

                    const value = element.getAttribute("data-percent");
                    const arc = element.querySelector(".circle");
                    const start = element.querySelector(".circle-start");
                    const end = element.querySelector(".circle-end");
                    const style = "background: conic-gradient(var(--activity-" + circle + ") 0%, var(--activity-" + circle + ") " + value + "%, var(--gradient-grey-10) " + value + "%);";
                    arc.setAttribute("style", style);
                    start.setAttribute("style", "translate: 0 -27px;");
                    end.setAttribute("style", "transform: rotate(" + (value * 3.6) + "deg) translateY(-27px) rotate(45deg)");
                });

            });
        }

        function initStandUp() {
            const ups = document.querySelectorAll(".stand-up .hour");
            ups.forEach(up => {
                up.addEventListener("click", toggleUp);
            });
        }

        function toggleUp(evt) {
            const up = evt.currentTarget;
            const hours = up.closest(".hours");
            const hoursNode = up.parentNode;

            const id = hours.getAttribute("data-id");
            const day = hours.getAttribute("data-day");
            const index = up.getAttribute("data-index");
            const value = parseInt(up.getAttribute("data-up"));
            console.log({id, day, index, value});

            const xhr = new XMLHttpRequest();
            xhr.onload = function () {
                let {success, html, result, percent, goal} = JSON.parse(this.response);
                if (!success) return;

                const resultDiv = document.querySelector(".stand-up").querySelector(".result");
                const standUpRingCompleted = goal;

                resultDiv.innerText = result;

                const wrapper = document.querySelector(".stand-up").querySelector(".wrapper");
                const oldHoursDiv = up.parentNode;
                const hoursDiv = document.createElement("div");
                hoursDiv.classList.add("hours");
                hoursDiv.setAttribute("data-id", id);
                hoursDiv.setAttribute("data-day", day);
                hoursDiv.innerHTML = html.content;
                wrapper.insertBefore(hoursDiv, oldHoursDiv);
                wrapper.removeChild(oldHoursDiv);
                initStandUp();

                const progress = wrapper.closest(".activity-of-the-day").querySelector(".progress.stand-up");
                progress.setAttribute("data-percent", percent);
                progress.querySelector(".percentage").innerText = percent + '%';
                setProgress(["stand-up"]);

                const standUpRing = document.querySelector(".stand-up").querySelector(".completed");
                if (standUpRingCompleted) {
                    standUpRing.classList.add("visible");
                } else {
                    standUpRing.classList.remove("visible");
                }
            }
            xhr.open("GET", "{{ path('app_activity_stand_up_toggle', {id: activity.id}) }}" + "?day=" + day + "&up=" + index + "&val=" + (1 - value));
            xhr.send();
            /*
                    const hour = up.getAttribute("data-hour");
                    const day = up.getAttribute("data-day");
                    const url = "{# { path('activity_stand_up') } #}";
                    const data = new FormData();
                    data.append("hour", hour);
                    data.append("day", day);
                    fetch(url, {
                        method: "POST",
                        body: data
                    }).then(response => {
                        if (response.ok) {
                            return response.json();
                        }
                    }).then(data => {
                        if (data.success) {
                            const element = document.querySelector(".stand-up .hour[data-hour='" + hour + "'][data-day='" + day + "']");
                            element.classList.add("done");
                            element.querySelector(".result").innerText = data.result;
                            element.querySelector(".goal").innerText = data.goal;
                            const percent = (data.result / data.goal * 100)|round;
                            element.querySelector(".progress").setAttribute("data-percent", percent);
                            setProgress(["stand-up"]);
                        }
                    });
*/
        }

        function initInputs() {
            const inputContainers = document.querySelectorAll(".activity-of-the-day > .move, .activity-of-the-day > .exercice");

            inputContainers.forEach(container => {
                const inputs = container.querySelectorAll("div > input");
                inputs.forEach(input => {
                    // console.log({input});
                    const div = input.parentElement;
                    div.addEventListener("click", () => {
                        input.classList.add("visible");
                        input.focus();
                    });
                    // input.addEventListener("blur", () => {
                    //     saveInput(input);
                    // });
                    input.addEventListener("keydown", (evt) => {
                        if (evt.key === "Enter" || evt.key === "Tab") {
                            saveInput(input);
                            evt.preventDefault();
                        }
                        if (evt.key === "Escape") {
                            input.classList.remove("visible");
                            evt.preventDefault();
                        }
                    });
                });
            });
        }

        function saveInput(input) {
            const name = input.getAttribute("name");
            const value = input.value;
            const parent = input.parentElement;
            const day = parent.getAttribute("data-day");

            const xhr = new XMLHttpRequest();
            xhr.onload = function () {
                let {success, goal, blockSelector, percent, circleSelector} = JSON.parse(this.response);
                if (!success) return;

                input.classList.remove("visible");
                parent.querySelector("span").innerText = value;

                const progress = parent.closest(".activity-of-the-day").querySelector(".progress." + circleSelector);
                if (progress) {
                    progress.setAttribute("data-percent", percent);
                    progress.querySelector(".percentage").innerText = percent + '%';
                    setProgress([circleSelector]);
                }

                const block = input.closest(".activity-of-the-day").querySelector(blockSelector);
                const completed = block.querySelector(".completed"); // null pour steps et distance
                if (completed) {
                    if (goal) {
                        completed.classList.add("visible");
                    } else {
                        completed.classList.remove("visible");
                    }
                }
            }
            xhr.open("GET", "{{ path('app_activity_save_data', {id: activity.id}) }}" + "?day=" + day + "&name=" + name + "&value=" + value);
            xhr.send();
        }

        function replaceTitleAttribute() {
            const divs = document.querySelectorAll("div[data-title]");
            divs.forEach(div => {

                div.addEventListener('mousemove', toolTipsMove);
                div.addEventListener('mouseenter', toolTipsShow);
                div.addEventListener('mouseleave', toolTipsHide);
            });
        }

        function toolTipsShow(evt) {
            const tooltips = document.querySelector(".tool-tips");
            const text = evt.currentTarget.getAttribute("data-title");
            const body = tooltips.querySelector(".body");
            body.innerHTML = text;

            const width = body.offsetWidth;
            tooltips.setAttribute("style", "translate: " + (evt.pageX - (width / 2)) + "px " + evt.pageY + "px;");

            tooltips.classList.add("show");
        }

        function toolTipsHide() {
            const tooltips = document.querySelector(".tool-tips");
            tooltips.classList.remove("show");
            setTimeout(() => {
                tooltips.querySelector(".body").innerHTML = "";
            }, 500);
        }

        function toolTipsMove(evt) {
            const tooltips = document.querySelector(".tool-tips");
            const body = tooltips.querySelector(".body");
            const width = body.offsetWidth;

            tooltips.setAttribute("style", "translate: " + (evt.pageX - (width / 2)) + "px " + evt.pageY + "px;");
        }
    </script>
{% endblock %}