{% extends 'base.html.twig' %}
{% set user = app.user %}
{% block title %}{{ 'Activity'|trans }}{% endblock %}

{% block body %}
    <div class="container-fluid">

        {{ include('blocks/_mainMenu.html.twig') }}

        <div class="activity">
            <div class="header">
                <h1>{{ 'Activity'|trans }}</h1>
                <div class="backdrop"></div>
                {{ include('blocks/_clock.html.twig') }}
            </div>

            {{ include('blocks/_nav.html.twig', {thisPage: 'Activity', user: app.user, from: 'home', style: 'width: 100%'}) }}

            <main>
                {% if activity is null %}
                    <a href="{{ path('app_activity_new') }}" class="no-activity btn btn-primary">{{ 'Activate'|trans }}</a>
                {% else %}
                    <a href="{{ path('app_activity_edit', {id: activity.id}) }}" class="activity-goals btn btn-primary">{{ 'Goals'|trans }}</a>
                    {% for year in years %}
                        {% for week in year %}
                            {% if week.0.week == currentWeek %}
                                <div class="recent-activity">
                                    <h2>{{ 'Recent activity'|trans }} : {{ 'Week'|trans }} {{ currentWeek }}</h2>
                                    <div class="days">
                                        {% set tab = 1 %}
                                        {% for day in week %}
                                            <div class="day">
                                                <div class="date">{{ day.day|format_date('full')|capitalize }}</div>
                                                <div class="activity-of-the-day">
                                                    <div class="rings-of-the-day">
                                                        {% set percentMove = (day.moveResult / activity.moveGoal * 100)|round %}
                                                        {% set percentExercice = (day.exerciceResult / activity.exerciceGoal * 100)|round %}
                                                        {% set percentStandUp = (day.standUpResult / activity.standUpGoal * 100)|round %}
                                                        <div class="drawn-rings" data-move="{{ percentMove }}" data-exercice="{{ percentExercice }}" data-stand-up="{{ percentStandUp }}">
                                                            <canvas id="rings-{{ day.id }}" width="512" height="512" style="scale: .25; translate: -37% -37%;"></canvas>
                                                        </div>
                                                    </div>
                                                    <div class="move">
                                                        <div class="block-header">
                                                            <div class="title">{{ 'Move'|trans }}</div>
                                                            <div class="completed{% if day.isMoveRingCompleted %} visible{% endif %}" title="{{ 'goal'|trans }}"><i class="fa-solid fa-circle-check"></i></div>
{#                                                            <div class="completed{% if day.isMoveRingCompleted %} visible{% endif %}">{{ 'goal'|trans }}</div>#}
                                                        </div>
                                                        <div class="block-body">
                                                            {% set percent = (day.moveResult / activity.moveGoal * 100)|round %}
                                                            <div class="progress move" data-percent="{{ percent }}">
                                                                <div class="circle">
                                                                    <div class="percentage">{{ percent }}%</div>
                                                                </div>
                                                                <div class="circle-start"></div>
                                                                <div class="circle-end">
                                                                    <div></div>
                                                                </div>
                                                            </div>
                                                            <div class="details">
                                                                <div class="detail">
                                                                    <div class="result" data-id="{{ activity.id }}" data-day="{{ day.id }}"
                                                                         data-title="{{ 'Click me to edit'|trans }}"
                                                                         tabindex="{{ tab }}">{% set tab = tab + 1 %}
                                                                        <span>{{ day.moveResult }}</span> KCal
                                                                        <label><input type="number" name="moveResult" value="{{ day.moveResult }}"/></label>
                                                                    </div>
                                                                    /
                                                                    <div class="goal" data-title="{{ 'Click the goals button to modify'|trans }}">{{ activity.moveGoal }} KCal</div>
                                                                </div>
                                                                <div class="detail">
                                                                    <div class="steps" data-id="{{ activity.id }}" data-day="{{ day.id }}"
                                                                         data-title="{{ 'Click me to edit'|trans }}"
                                                                         tabindex="{{ tab }}">{% set tab = tab + 1 %}
                                                                        {{ 'Steps'|trans }}&nbsp;: <span>{{ day.steps }}</span>
                                                                        <label><input type="number" name="steps" value="{{ day.steps }}"/></label>
                                                                    </div>
                                                                    <div class="distance" data-id="{{ activity.id }}" data-day="{{ day.id }}"
                                                                         data-title="{{ 'Click me to edit'|trans }}"
                                                                         tabindex="{{ tab }}">{% set tab = tab + 1 %}
                                                                        {{ 'Distance'|trans }}&nbsp;: <span>{{ day.distance }}</span>km
                                                                        <label><input type="number" name="distance" value="{{ day.distance }}"/></label>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="exercice">
                                                        <div class="block-header">
                                                            <div class="title">{{ 'Exercice'|trans }}</div>
                                                            <div class="completed{% if day.isExerciceRingCompleted %} visible{% endif %}" title="{{ 'goal'|trans }}"><i class="fa-solid fa-circle-check"></i></div>
{#                                                            <div class="completed{% if day.isExerciceRingCompleted %} visible{% endif %}">{{ 'goal'|trans }}</div>#}
                                                        </div>
                                                        <div class="block-body">
                                                            {% set percent = (day.exerciceResult / activity.exerciceGoal * 100)|round %}
                                                            <div class="progress exercice" data-percent="{{ percent }}">
                                                                <div class="circle">
                                                                    <div class="percentage">{{ percent }}%</div>
                                                                </div>
                                                                <div class="circle-start"></div>
                                                                <div class="circle-end">
                                                                    <div></div>
                                                                </div>
                                                            </div>
                                                            <div class="details">
                                                                <div class="detail">
                                                                    <div class="result" data-id="{{ activity.id }}" data-day="{{ day.id }}"
                                                                         data-title="{{ 'Click me to edit'|trans }}"
                                                                         tabindex="{{ tab }}">{% set tab = tab + 1 %}
                                                                        <span class="value">{{ day.exerciceResult }}</span> <span class="unit">{{ day.exerciceResult>1?'minutes'|trans:'minute'|trans }}</span>
                                                                        <label><input type="number" name="exerciceResult" value="{{ day.exerciceResult }}"/></label>
                                                                    </div>
                                                                    /
                                                                    <div class="goal" data-title="{{ 'Click the goals button to modify'|trans }}">{{ activity.exerciceGoal }} {{ 'minutes'|trans }}</div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="stand-up">
                                                        <div class="block-header">
                                                            <div class="title">{{ 'Stand up'|trans }}</div>
                                                            <div class="completed{% if day.isStandUpRingCompleted %} visible{% endif %}" title="{{ 'goal'|trans }}"><i class="fa-solid fa-circle-check"></i></div>
{#                                                            <div class="completed{% if day.isStandUpRingCompleted %} visible{% endif %}">{{ 'goal'|trans }}</div>#}
                                                        </div>
                                                        <div class="block-body">
                                                            {% set percent = (day.standUpResult / activity.standUpGoal * 100)|round %}
                                                            <div class="progress stand-up" data-percent="{{ percent }}">
                                                                <div class="circle">
                                                                    <div class="percentage">{{ percent }}%</div>
                                                                </div>
                                                                <div class="circle-start"></div>
                                                                <div class="circle-end">
                                                                    <div></div>
                                                                </div>
                                                            </div>
                                                            <div class="details">
                                                                <div class="detail">
                                                                    <div class="result">{{ day.standUpResult }}</div>
                                                                    /
                                                                    <div class="goal">{{ activity.standUpGoal }}</div>
                                                                </div>
                                                                <div class="wrapper">
                                                                    <div class="hours" data-id="{{ activity.id }}" data-day="{{ day.id }}">
                                                                        {{ include('blocks/activity/_standUp.html.twig', {ups: day.standUp}) }}
                                                                    </div>
                                                                    <div class="graduations">
                                                                        <div class="quarter">0</div>
                                                                        <div class="quarter">6</div>
                                                                        <div class="quarter">12</div>
                                                                        <div class="quarter">18</div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        {% endfor %}
                                    </div>
                                </div>
                            {% else %}
                                <div class="week">
                                    <h2>{{ 'Activity of week'|trans }} {{ week.0.week }}</h2>
                                    <div class="days">
                                        {% for day in week|reverse %}
                                            <div class="day">
                                                {% if day is not null %}
                                                    <div class="rings-of-the-day">
                                                        {% set percentMove = (day.moveResult / activity.moveGoal * 100)|round %}
                                                        {% set percentExercice = (day.exerciceResult / activity.exerciceGoal * 100)|round %}
                                                        {% set percentStandUp = (day.standUpResult / activity.standUpGoal * 100)|round %}
                                                        <div class="drawn-rings" data-move="{{ percentMove }}" data-exercice="{{ percentExercice }}" data-stand-up="{{ percentStandUp }}">
                                                            <canvas id="rings-{{ day.id }}" width="512" height="512" style="scale: .25; translate: -37.5% -37.5%;"></canvas>
                                                        </div>
                                                        <div class="date">{{ day.day|format_date('full')|capitalize }}</div>
                                                        <div class="values">
                                                            <div class="value">{{ day.moveResult }}</div>
                                                            <div class="value">{{ day.exerciceResult }}</div>
                                                            <div class="value">{{ day.standUpResult }}</div>
                                                        </div>
                                                    </div>
                                                {% else %}
                                                    <div class="no-data">
                                                        <div class="date">{{ 'No activity'|trans }}</div>
                                                    </div>
                                                {% endif %}
                                            </div>
                                        {% endfor %}
                                    </div>
                                </div>
                            {% endif %}
                        {% endfor %}
                    {% endfor %}
                {% endif %}
            </main>
            {{ include('blocks/_pageFooter.html.twig') }}
        </div>
    </div>
    <div class="tool-tips">
        <div class="body"></div>
        <div class="tail"></div>
    </div>
{% endblock %}
{% block javascripts %}
    {{ parent() }}
    <script>
        const initialDate = new Date();
        let letterRatios = [];
        let editing = false;
        const PIx2 = Math.PI * 2;

        window.addEventListener("DOMContentLoaded", () => {

            initHeader();
            setProgressAll(["stand-up", "move", "exercice"]);
            ringsOfTheDay();
            initThreeRings();
            initStandUp();
            initInputs();
            initToolTips();
            initDateChange();

            setTimeout(() => {
                document.querySelector(".header").setAttribute("style", "background-color: transparent");
            }, 0);

        })

        function initHeader() {
            const header = document.querySelector(".header");
            let ticking = false;
            let letters, animatedH1, index = 0;

            animatedH1 = document.createElement("div");
            animatedH1.classList.add("animated-h1");
            animatedH1 = header.insertBefore(animatedH1, document.querySelector(".backdrop"));
            letters = document.querySelector("h1").innerText.split('');

            document.querySelector("h1").innerText = "";

            letters.forEach(letter => {
                let part = document.createElement("div");
                part.classList.add("part");
                if (letter === " ") {
                    part.innerHTML = "&nbsp;"
                } else {
                    part.innerText = letter;
                }
                animatedH1.appendChild(part);
                letterRatios[index] = 2 * (Math.random() - .5);
                index++;
            })
            setH1();
            window.addEventListener('resize', setH1);

            window.addEventListener('scroll', () => {
                if (!ticking) {
                    window.requestAnimationFrame(function () {
                        setH1();
                        ticking = false;
                    });
                }
                ticking = true;
            });
            header.setAttribute("style", "background-color: transparent;");
        }

        function setH1() {
            const header = document.querySelector(".header");
            const h1 = document.querySelector(".animated-h1");
            const parts = h1.querySelectorAll(".part");
            let left, ratio, top, n = 0;
            ratio = (header.clientHeight - window.scrollY) / header.clientHeight;
            left = (header.clientWidth - h1.clientWidth) / 2;
            top = ((header.clientHeight + window.scrollY) - h1.clientHeight) / 2;
            if (ratio < 0) ratio = 0;
            if (ratio > 1) ratio = 1;
            parts.forEach(part => {
                part.setAttribute("style", "transform: rotate(" + (720 * (1 - ratio) * letterRatios[n++]) + "deg);");
            })
            h1.setAttribute("style", "left: " + left.toString() + "px; top: " + top.toString() + "px; opacity: " + ratio + "; transform: scale(" + (1 + (5 * (1 - ratio))) + ")");
        }

        function initDateChange() {
            setInterval(checkNewDate, 60000);
        }

        function checkNewDate() {
            const date = new Date();

            if (date.getDate() !== initialDate.getDate()) {
                window.location.reload();
            }
        }

        function setProgressAll(circles) {
            circles.forEach(circle => {
                const elements = document.querySelectorAll(".progress." + circle);
                elements.forEach(element => {
                    const value = element.getAttribute("data-percent");
                    const arc = element.querySelector(".circle");
                    let start = element.querySelector(".circle-start");
                    let end = element.querySelector(".circle-end");
                    let style = "background: conic-gradient(var(--activity-" + circle + ") 0%, var(--activity-" + circle + ") " + value + "%, var(--gradient-grey-10) " + value + "%);";
                    arc.setAttribute("style", style);
                    start.setAttribute("style", "translate: 0 -27px;");
                    end.setAttribute("style", "transform: rotate(" + (value * 3.6) + "deg) translateY(-27px) rotate(45deg)");
                });
            });
        }

        function setProgress(day, circles) {
            circles.forEach(circle => {
                const element = day.querySelector(".progress." + circle);
                const value = element.getAttribute("data-percent");
                const arc = element.querySelector(".circle");
                let start = element.querySelector(".circle-start");
                let end = element.querySelector(".circle-end");
                let style = "background: conic-gradient(var(--activity-" + circle + ") 0%, var(--activity-" + circle + ") " + value + "%, var(--gradient-grey-10) " + value + "%);";
                arc.setAttribute("style", style);
                start.setAttribute("style", "translate: 0 -27px;");
                end.setAttribute("style", "transform: rotate(" + (value * 3.6) + "deg) translateY(-27px) rotate(45deg)");
            });
        }

        function initThreeRings() {
            const days = document.querySelectorAll(".day");
            days.forEach(day => {
                threeRings(day);
            });
        }

        function initStandUp() {
            const ups = document.querySelectorAll(".stand-up .hour");
            ups.forEach(up => {
                up.addEventListener("click", toggleUp);
            });
        }

        function toggleUp(evt) {
            const up = evt.currentTarget;
            const hours = up.closest(".hours");
            const dayDiv = hours.closest(".day");

            const id = hours.getAttribute("data-id");
            const day = hours.getAttribute("data-day");
            const index = up.getAttribute("data-index");
            const value = parseInt(up.getAttribute("data-up"));
            console.log({id, day, index, value});

            const xhr = new XMLHttpRequest();
            xhr.onload = function () {
                let {success, html, result, percent, goal} = JSON.parse(this.response);
                if (!success) return;

                const resultDiv = document.querySelector(".stand-up").querySelector(".result");
                const standUpRingCompleted = goal;

                resultDiv.innerText = result;

                const wrapper = document.querySelector(".stand-up").querySelector(".wrapper");
                const oldHoursDiv = up.parentNode;
                const hoursDiv = document.createElement("div");
                hoursDiv.classList.add("hours");
                hoursDiv.setAttribute("data-id", id);
                hoursDiv.setAttribute("data-day", day);
                hoursDiv.innerHTML = html.content;
                wrapper.insertBefore(hoursDiv, oldHoursDiv);
                wrapper.removeChild(oldHoursDiv);
                initStandUp();

                const progress = wrapper.closest(".activity-of-the-day").querySelector(".progress.stand-up");
                progress.setAttribute("data-percent", percent);
                progress.querySelector(".percentage").innerText = percent + '%';
                setProgress(dayDiv, ["stand-up"]);

                const canvasId = wrapper.closest(".day").querySelector("canvas").getAttribute("id");
                updateRings(canvasId, 2, "stand-up", percent);

                const standUpRing = document.querySelector(".stand-up").querySelector(".completed");
                if (standUpRingCompleted) {
                    standUpRing.classList.add("visible");
                } else {
                    standUpRing.classList.remove("visible");
                }
            }
            xhr.open("GET", "{{ path('app_activity_stand_up_toggle', {id: activity.id}) }}" + "?day=" + day + "&up=" + index + "&val=" + (1 - value));
            xhr.send();
        }

        function initInputs() {
            const inputContainers = document.querySelectorAll(".activity-of-the-day > .move, .activity-of-the-day > .exercice");

            inputContainers.forEach(container => {
                const inputs = container.querySelectorAll("div > label > input");
                inputs.forEach(input => {
                    const card = input.closest(".block-body").parentElement;
                    const div = input.closest("div");
                    div.addEventListener("click", (evt) => {
                        startEditing(evt, div, input, card);
                    });
                    div.addEventListener("focusin", (evt) => {
                        startEditing(evt, div, input, card);
                    });
                    input.addEventListener("keydown", (evt) => {
                        if (evt.key === "Enter" || evt.key === "Tab") {
                            finishEditing(evt, div, input, card, true);
                        }
                        if (evt.key === "Escape") {
                            finishEditing(evt, div, input, card, false);
                        }
                    });
                });
            });
        }

        function startEditing(evt, div, input, card) {
            editing = true;
            evt.preventDefault();
            evt.stopPropagation();
            document.querySelector(".tool-tips").classList.add("masked");
            input.classList.add("visible");
            input.focus();
            card.addEventListener("click", (evt) => {
                finishEditing(evt, div, input, card, true);
            });
        }

        function finishEditing(evt, div, input, card, save) {
            evt.preventDefault();
            evt.stopPropagation();

            card.removeEventListener("click", () => {
                finishEditing(evt, div, input, card, true);
            });

            if (save && editing) {
                editing = false;
                saveInput(input);
            }

            input.classList.remove("visible");
            document.querySelector(".tool-tips").classList.remove("masked");
            card.focus();
        }

        function saveInput(input) {

            const name = input.getAttribute("name");
            const value = input.value;
            const parent = input.closest("div");
            const day = parent.getAttribute("data-day");

            const xhr = new XMLHttpRequest();
            xhr.onload = function () {
                let {success, goal, blockSelector, percent, circleSelector} = JSON.parse(this.response);
                if (!success) return;

                if (circleSelector === 'exercice') {
                    parent.querySelector('span.value').innerText = value;
                    parent.querySelector('span.unit').innerText = (value > 1 ? 'minutes' : 'minute');
                } else {
                    parent.querySelector("span").innerText = value;
                }

                const progress = parent.closest(".activity-of-the-day").querySelector(".progress." + circleSelector);
                if (progress) {
                    progress.setAttribute("data-percent", percent);
                    progress.querySelector(".percentage").innerText = percent + '%';
                    setProgress(input.closest(".day"), [circleSelector]);
                }

                if (circleSelector === "exercice" || circleSelector === "move") {
                    const canvasId = input.closest(".day").querySelector("canvas").getAttribute("id");
                    const ringIndex = circleSelector === "exercice" ? 1 : 0
                    updateRings(canvasId, ringIndex, circleSelector, percent);
                }

                const block = input.closest(".activity-of-the-day").querySelector(blockSelector);
                const completed = block.querySelector(".completed"); // null pour steps et distance
                if (completed) {
                    if (goal) {
                        completed.classList.add("visible");
                    } else {
                        completed.classList.remove("visible");
                    }
                }
                threeRings(input.closest(".day"));
            }
            xhr.open("GET", "{{ path('app_activity_save_data', {id: activity.id}) }}" + "?day=" + day + "&name=" + name + "&value=" + value);
            xhr.send();
        }

        function threeRings(dayBlock) {

            if (dayBlock.querySelectorAll(".completed.visible").length === 3) {
                dayBlock.classList.add("three-rings");
            } else {
                dayBlock.classList.remove("three-rings");
            }

        }

        function initToolTips() {
            const divs = document.querySelectorAll("div[data-title]");
            divs.forEach(div => {

                div.addEventListener('mousemove', toolTipsMove);
                div.addEventListener('mouseenter', toolTipsShow);
                div.addEventListener('mouseleave', toolTipsHide);
            });
        }

        function toolTipsShow(evt) {
            const tooltips = document.querySelector(".tool-tips");
            const text = evt.currentTarget.getAttribute("data-title");
            const body = tooltips.querySelector(".body");
            body.innerHTML = text;

            const width = body.offsetWidth;
            tooltips.setAttribute("style", "translate: " + (evt.pageX - (width / 2)) + "px " + evt.pageY + "px;");

            tooltips.classList.add("show");
        }

        function toolTipsHide() {
            const tooltips = document.querySelector(".tool-tips");
            tooltips.classList.remove("show");
            tooltips.setAttribute("style", "translate: 0px 0px;");
        }

        function toolTipsMove(evt) {
            const tooltips = document.querySelector(".tool-tips");
            const body = tooltips.querySelector(".body");
            const width = body.offsetWidth;

            tooltips.setAttribute("style", "translate: " + (evt.pageX - (width / 2)) + "px " + evt.pageY + "px;");
        }

        function ringsOfTheDay() {
            const ringsOfTheDays = document.querySelectorAll(".rings-of-the-day");

            ringsOfTheDays.forEach(ringsOfTheDay => {
                const drawnRings = ringsOfTheDay.querySelector(".drawn-rings");
                if (drawnRings) {
                    const move = drawnRings.getAttribute("data-move");
                    const exercice = drawnRings.getAttribute("data-exercice");
                    const standUp = drawnRings.getAttribute("data-stand-up");
                    const id = drawnRings.querySelector("canvas").getAttribute("id");
                    drawRings(id, move, exercice, standUp);
                }
            });
        }

        function drawRings(canvasId, progressMove, progressExercice, progressStandUp) {
            const canvas = document.getElementById(canvasId);
            const context = canvas.getContext('2d');
            const thickness = 16;
            const scale = canvas.width / 128;
            const x = canvas.width / 2;
            const y = canvas.height / 2;

            drawBaseRings(canvas, context, x, y, thickness, scale);

            animeRing(context, x, y, scale * 54, scale * thickness, scale * 2, '#F00', progressMove, 0);
            animeRing(context, x, y, scale * 36, scale * thickness, scale * 2, '#B7FF00', progressExercice, 0);
            animeRing(context, x, y, scale * 18, scale * thickness, scale * 2, '#00D6BD', progressStandUp, 0);
        }

        function updateRings(canvasId, ringIndex, ringName, progressTo) {
            const canvas = document.getElementById(canvasId);
            const canvasParent = canvas.parentElement;
            const progressFrom = parseInt(canvasParent.getAttribute("data-" + ringName));
            const context = canvas.getContext('2d');
            const thickness = 16;
            const scale = canvas.width / 128;
            const x = canvas.width / 2;
            const y = canvas.height / 2;
            const colors = ['#F00', '#B7FF00', '#00D6BD'];
            const radius = [scale * 54, scale * 36, scale * 18];

            canvasParent.setAttribute("data-" + ringName, progressTo);
            animeRing(context, x, y, radius[ringIndex], scale * thickness, scale * 2, colors[ringIndex], progressTo, progressFrom);
        }

        function drawBaseRings(canvas, context, x, y, thickness, scale) {

            context.clearRect(0, 0, canvas.width, canvas.height);
            context.beginPath();
            context.arc(x, y, scale * 64, 0, PIx2, false);
            context.fillStyle = '#0F1924';
            context.fill();

            context.beginPath();
            context.arc(x, y, scale * 54, 0, PIx2, false);
            context.lineWidth = scale * thickness;
            context.strokeStyle = '#2C4A6D';
            context.stroke();

            context.beginPath();
            context.arc(x, y, scale * 36, 0, PIx2, false);
            context.lineWidth = scale * thickness;
            context.strokeStyle = '#2C4A6D';
            context.stroke();

            context.beginPath();
            context.arc(x, y, scale * 18, 0, PIx2, false);
            context.lineWidth = scale * thickness;
            context.strokeStyle = '#2C4A6D';
            context.stroke();
        }

        function animeRing(context, x, y, radius, thickness, stroke, color, progress, progressStart = 0) {
            let inc = progressStart;
            let way = progressStart < progress ? 1 : -1;
            if (way === 1) {
                const interval = setInterval(() => {
                    if (inc <= progress) {
                        clearRing(context, x, y, radius, thickness);
                        drawRing(context, x, y, radius, thickness, stroke, color, inc);
                        inc += .5;
                    } else {
                        clearInterval(interval);
                    }
                }, 5);
                // }, 2000 / (progress - progressStart));
            } else {
                const interval = setInterval(() => {
                    if (inc >= progress) {
                        clearRing(context, x, y, radius, thickness);
                        drawRing(context, x, y, radius, thickness, stroke, color, inc);
                        inc -= .5;
                    } else {
                        clearInterval(interval);
                    }
                }, 5);
                // }, 2000 / (progressStart - progress));
            }
        }

        function clearRing(context, x, y, radius, thickness) {
            context.beginPath();
            context.arc(x, y, radius, 0, PIx2, false);
            context.lineWidth = thickness;
            context.strokeStyle = "#2C4A6D";
            context.stroke();
        }

        function drawRing(context, x, y, radius, thickness, stroke, color, progress) {
            const offset = PIx2 / -4;
            const endAngle = (PIx2 * progress / 100);
            const endX = x + (radius * Math.sin(endAngle));
            const endY = y - (radius * Math.cos(endAngle));

            context.beginPath();
            context.arc(x, y - radius, thickness / 2, 0, PIx2, false);
            context.fillStyle = color;
            context.fill();

            context.beginPath();
            context.arc(x, y, radius, offset, offset + (PIx2 * progress / 100), false);
            context.lineWidth = thickness;
            context.strokeStyle = color;
            context.stroke();

            context.beginPath();
            context.arc(endX, endY, thickness / 2, 0, PIx2, false);
            context.fillStyle = color;
            context.fill();

            context.beginPath();
            context.arc(endX, endY, (thickness + stroke) / 2, offset + (PIx2 * progress / 100), -offset + (PIx2 * progress / 100), false);
            context.lineWidth = stroke;
            context.strokeStyle = '#0F1924';
            context.stroke();
        }

    </script>
{% endblock %}