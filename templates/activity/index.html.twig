{% extends 'base.html.twig' %}
{% set user = app.user %}
{% block title %}{{ 'Activity'|trans }}{% endblock %}

{% block body %}
    <div class="container">

        {{ include('blocks/_mainMenu.html.twig') }}

        <div class="activity">
            <div class="header">
                <h1>{{ 'Activity'|trans }}</h1>
                <div class="backdrop"></div>
                {{ include('blocks/_clock.html.twig') }}
            </div>

            {{ include('blocks/_nav.html.twig', {thisPage: 'Activity', user: app.user, from: 'home', style: 'width: 100%'}) }}

            <main>
                {% if activity is null %}
                    <a href="{{ path('app_activity_new') }}" class="no-activity btn btn-primary m-auto">{{ 'Activate'|trans }}</a>
                {% else %}
                    <div class="recent-activity">
                        <h2>{{ 'Recent activity'|trans }}</h2>
                        <div class="days">
                            {% for day in activity.activityDays %}
                                <div class="day">
                                    <div class="date">{{ day.day|format_date('full')|capitalize }}</div>
                                    <div class="activity-of-the-day">
                                        <div class="stand-up">
                                            <div class="title">{{ 'Stand up'|trans }}</div>
                                            <div class="description">
                                                {% set percent = (day.standUpResult / activity.standUpGoal * 100)|round %}
                                                <div class="progress stand-up" data-percent="{{ percent }}">
                                                    <div class="circle">
                                                        <div class="percentage">{{ percent }}%</div>
                                                    </div>
                                                    <div class="circle-start"></div>
                                                    <div class="circle-end">
                                                        <div></div>
                                                    </div>
                                                </div>
                                                <div class="details">
                                                    <div class="detail">
                                                        <div class="result">{{ day.standUpResult }}</div>
                                                        /
                                                        <div class="goal">{{ activity.standUpGoal }}</div>
                                                    </div>
                                                    <div class="hours">
                                                        {% for hour in day.standUp %}
                                                            <div class="hour {% if hour %}up{% else %}down{% endif %}"></div>
                                                        {% endfor %}
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="move">
                                            <div class="title">{{ 'Move'|trans }}</div>
                                            <div class="description">
                                                {% set percent = (day.moveResult / activity.moveGoal * 100)|round %}
                                                <div class="progress move" data-percent="{{ percent }}">
                                                    <div class="circle">
                                                        <div class="percentage">{{ percent }}%</div>
                                                    </div>
                                                    <div class="circle-start"></div>
                                                    <div class="circle-end">
                                                        <div></div>
                                                    </div>
                                                </div>
                                                <div class="details">
                                                    <div class="detail">
                                                        <div class="result">{{ day.moveResult }} KCal</div>
                                                        /
                                                        <div class="goal">{{ activity.moveGoal }}KCal</div>
                                                    </div>
                                                    <div class="detail">
                                                        <div>{{ 'Steps'|trans }} : {{ day.steps }}</div>
                                                        <div>{{ 'Distance'|trans }} : {{ day.distance }}km</div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="exercice">
                                            <div class="title">{{ 'Exercice'|trans }}</div>
                                            <div class="description">
                                                {% set percent = (day.exerciceResult / activity.exerciceGoal * 100)|round %}
                                                <div class="progress exercice" data-percent="{{ percent }}">
                                                    <div class="circle">
                                                        <div class="percentage">{{ percent }}%</div>
                                                    </div>
                                                    <div class="circle-start"></div>
                                                    <div class="circle-end">
                                                        <div></div>
                                                    </div>
                                                </div>
                                                <div class="details">
                                                    <div class="detail">
                                                        <div class="result">{{ day.exerciceResult }} {{ 'minutes'|trans }}</div>
                                                        /
                                                        <div class="goal">{{ activity.exerciceGoal }} {{ 'minutes'|trans }}</div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            {% endfor %}
                        </div>
                    </div>
                {% endif %}
            </main>
            {{ include('blocks/_pageFooter.html.twig') }}
        </div>
    </div>
{% endblock %}
{% block javascripts %}
    {{ parent() }}
    <script>
        let letterRatios = [];

        window.addEventListener("DOMContentLoaded", () => {

            initHeader();
            initProgress(["stand-up", "move", "exercice"]);

            setTimeout(() => {
                document.querySelector(".header").setAttribute("style", "background-color: transparent");
            }, 0);

        })

        function initHeader() {
            const header = document.querySelector(".header");
            let ticking = false;
            let letters, animatedH1, index = 0;

            animatedH1 = document.createElement("div");
            animatedH1.classList.add("animated-h1");
            animatedH1 = header.insertBefore(animatedH1, document.querySelector(".backdrop"));
            letters = document.querySelector("h1").innerText.split('');

            document.querySelector("h1").innerText = "";

            letters.forEach(letter => {
                let part = document.createElement("div");
                part.classList.add("part");
                if (letter === " ") {
                    part.innerHTML = "&nbsp;"
                } else {
                    part.innerText = letter;
                }
                animatedH1.appendChild(part);
                letterRatios[index] = 2 * (Math.random() - .5);
                index++;
            })
            setH1();
            window.addEventListener('resize', setH1);

            window.addEventListener('scroll', () => {
                if (!ticking) {
                    window.requestAnimationFrame(function () {
                        setH1();
                        ticking = false;
                    });
                }
                ticking = true;
            });
            header.setAttribute("style", "background-color: transparent;");
        }

        function setH1() {
            const header = document.querySelector(".header");
            const h1 = document.querySelector(".animated-h1");
            const parts = h1.querySelectorAll(".part");
            let left, ratio, top, n = 0;
            ratio = (header.clientHeight - window.scrollY) / header.clientHeight;
            left = (header.clientWidth - h1.clientWidth) / 2;
            top = ((header.clientHeight + window.scrollY) - h1.clientHeight) / 2;
            if (ratio < 0) ratio = 0;
            if (ratio > 1) ratio = 1;
            parts.forEach(part => {
                part.setAttribute("style", "transform: rotate(" + (720 * (1 - ratio) * letterRatios[n++]) + "deg);");
            })
            h1.setAttribute("style", "left: " + left.toString() + "px; top: " + top.toString() + "px; opacity: " + ratio + "; transform: scale(" + (1 + (5 * (1 - ratio))) + ")");
        }

        function initProgress(circles) {
            circles.forEach(circle => {

                const element = document.querySelector(".progress." + circle);

                if (element === null) return;

                const value = element.getAttribute("data-percent");
                const arc = element.querySelector(".circle");
                const start = element.querySelector(".circle-start");
                const end = element.querySelector(".circle-end");
                const style = "background: conic-gradient(var(--activity-" + circle + ") 0%, var(--activity-" + circle + ") " + value + "%, var(--gradient-grey-10) " + value + "%);";
                arc.setAttribute("style", style);
                start.setAttribute("style", "translate: 0 -1.75em;");
                end.setAttribute("style", "transform: rotate(" + (value * 3.6) + "deg) translateY(-1.75em) rotate(45deg)");

            });
        }
    </script>
{% endblock %}