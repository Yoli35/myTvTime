{% extends 'base.html.twig' %}
{% set user = app.user %}
{% block title %}myTvTime::{{ 'Blog'|trans }}{% endblock %}

{% block body %}
    <div class="container">

        {{ include('blocks/_mainMenu.html.twig') }}

        {{ include('blocks/_nav.html.twig', {thisPage: article.title, parent: {url: path('app_blog'), page: 'Blog'|trans}}) }}

        <div class="blog">
            <div class="content">
                <div class="articles">
                    <div class="article" data-id="{{ article.id }}">
                        {% if article.banner %}
                            <div class="banner full" style="background-image: url('/images/articles/banners/{{ article.banner }}')"></div>
                        {% endif %}
                        <div class="apercu">
                            <div class="presentation">
                                <div class="title-author">
                                    <div class="title">{{ article.title }}</div>
                                    {% if article.user.id == user.id %}
                                        <div class="author">{{ 'By myself'|trans }}</div>
                                    {% else %}
                                        <div class="author">{{ 'By'|trans }} {{ article.user.username?:article.user.email }}</div>
                                    {% endif %}
                                </div>
                                <div class="dates">
                                    <div class="date" title="{{ article.createdAt|format_datetime() }}">{{ 'Created'|trans }} : {{ article.createdAt|ago }}</div>
                                    <div class="date" title="{{ article.updatedAt|format_datetime() }}">{{ 'Updated'|trans }} : {{ article.updatedAt|ago }}</div>
                                    <div class="date" title="{{ article.publishedAt|format_datetime() }}">{{ 'Published'|trans }} : {{ article.publishedAt|ago }}</div>
                                    {#                <div class="date">{{ 'Created At'|trans }} : {{ article.createdAt|format_datetime() }}</div>#}
                                    {#                <div class="date">{{ 'Updated At'|trans }} : {{ article.updatedAt|format_datetime() }}</div>#}
                                    {#                <div class="date">{{ 'Published At'|trans }} : {{ article.publishedAt|format_datetime() }}</div>#}
                                </div>
                                <div class="abstract full">{{ content|raw|nl2br }}</div>
                            </div>
                        </div>
                        {% if is_granted("ROLE_USER") %}
                            <div class="comment-form">
                                {% if comments is empty %}
                                    <div class="label">{{ 'Be the first to react!'|trans }}</div>
                                {% else %}
                                    <div class="label">{{ 'React!'|trans }} :</div>
                                {% endif %}
                                <div class="user">
                                    {% if user.avatar %}
                                        <img src="/images/users/avatars/{{ user.avatar }}" alt="{{ user.username?:user.email }}">
                                    {% endif %}
                                    <div class="name">{{ user.username?:user.email }}</div>
                                </div>
                                <div>
                                    {{ form_start(form) }}
                                    {{ form_errors(form) }}

                                    {{ form_row(form.text) }}

                                    {{ form_row(form.submit, { 'label': 'Add' }) }}
                                    {{ form_end(form) }}
                                </div>
                            </div>
                        {% endif %}
                        {% if comments is not empty %}
                            <div class="comments">
                                <div class="label">{{ 'Comments'|trans }} :</div>
                                {% for comment in comments %}
                                    <div class="comment">
                                        {{ include('blocks/article/_reaction.html.twig', {reaction: comment}) }}
                                        {% if comment.answers is not empty %}
                                            <div class="reactions" id="reactions-{{ comment.id }}">
                                                {% for answer in comment.answers %}
                                                    <div class="reaction">
                                                        {{ include('blocks/article/_reaction.html.twig', {reaction: answer}) }}
                                                    </div>
                                                {% endfor %}
                                            </div>
                                        {% endif %}
                                        {% if is_granted("ROLE_USER") %}
                                            <div class="react">
                                                <details>
                                                    <summary>{{ 'Answer'|trans }}</summary>
                                                    <div class="answer">
                                                        <div class="user">
                                                            {% if user.avatar %}
                                                                <img src="/images/users/avatars/{{ user.avatar }}" alt="{{ user.username?:user.email }}">
                                                            {% endif %}
                                                            <div class="name">{{ user.username?:user.email }}</div>
                                                        </div>
                                                        <label>
                                                        <textarea id="answer-{{ comment.id }}" data-id="{{ comment.id }}"></textarea></label>
                                                        <div class="submit" id="add-{{ comment.id }}" data-id="{{ comment.id }}">{{ 'Add'|trans }}</div>
                                                    </div>
                                                </details>
                                            </div>
                                        {% endif %}
                                    </div>
                                {% endfor %}
                            </div>
                        {% endif %}
                    </div>
                </div>
                <div class="article-tools" id="{{ article.id }}">
                    {% if article.id in userArticleIds %}
                        <div class="edit-article"><i class="fa-solid fa-pen-to-square"></i> {{ 'Edit article'|trans }}</div>
                        <div class="delete-article"><i class="fa-solid fa-trash-can"></i> {{ 'Delete article'|trans }}</div>
                    {% endif %}
                </div>
            </div>
        </div>

        {{ include('blocks/_pageFooter.html.twig') }}

    </div>

    <dialog class="confirm-deletion">
        <div class="overlay">
            <div class="header">
                {{ 'Delete this article?'|trans }}
                <div class="close"><i class="fa-solid fa-xmark"></i></div>
            </div>
            <div class="content">
                {{ 'Do you really want to delete this article?'|trans }}
                <span></span>
                {{ 'This operation is final and cannot be cancelled.'|trans }}
            </div>
            <div class="footer">
                <button value="nope" class="btn btn-secondary delete-cancel">{{ 'Cancel'|trans }}</button>
                <button value="yass" class="btn btn-secondary delete-done">{{ 'Delete'|trans }}</button>
            </div>
        </div>
    </dialog>
{% endblock %}
{% block morejs %}
    <script>
        let path = "{{ path('app_blog_article_add_answer', {cid: 0}) }}";
        const _app_blog_article_add_answer = path.substring(0, path.length - 1);
        const locale = "{{ app.request.locale }}";
        let confirmDialog;

        window.addEventListener("DOMContentLoaded", () => {

            document.querySelector(".edit-article").addEventListener("click", editArticle);
            document.querySelector(".delete-article").addEventListener("click", deleteArticle);

            const dialog = document.querySelector(".confirm-deletion");
            confirmDialog = dialog;
            dialog.querySelector(".delete-done").addEventListener("click", () => {
                closeDialog(dialog, true);
            })
            dialog.querySelector(".delete-cancel").addEventListener("click", () => {
                closeDialog(dialog, false);
            })
            dialog.querySelector(".close").addEventListener('click', function () {
                closeDialog(dialog, false);
            });

            const submits = document.querySelectorAll(".submit");

            submits.forEach(submit => {
                submit.addEventListener("click", () => {
                    const comment_id = submit.getAttribute("data-id");
                    const textarea = document.querySelector("#answer-" + comment_id);

                    const xhr = new XMLHttpRequest();
                    xhr.onload = function () {
                        const data = this.response;

                        const reactions = document.querySelector("#reactions-" + comment_id);
                        const reaction = document.createElement("div");
                        const even = reactions.querySelectorAll(".reaction").length % 2;

                        reaction.classList.add("reaction");
                        if (!even) {
                            reaction.classList.add("odd");
                        }
                        reaction.innerHTML = data;
                        reactions.appendChild(reaction);
                        textarea.value = "";
                        textarea.focus();
                    }
                    xhr.open("GET", _app_blog_article_add_answer + comment_id + '?text=' + textarea.value);
                    xhr.send();
                })
            })
        })

        function editArticle(evt) {
            const id = evt.currentTarget.parentElement.getAttribute("id");
            console.log('edit', {id});
            evt.preventDefault();
            window.location.href = "{{ path('app_blog_edit', {id: article.id})}}";
        }

        function deleteArticle(evt) {
            const id = evt.currentTarget.parentElement.getAttribute("id");
            console.log('delete', {id});
            evt.preventDefault();
            openDialog(confirmDialog, id, evt.currentTarget);
        }

        function openDialog(dialog, id) {
            const title = document.querySelector(".title");
            dialog.querySelector("span").innerHTML = title.innerHTML;
            dialog.setAttribute("data-id", id);

            if (typeof dialog.showModal === "function") {
                dialog.showModal();
                setTimeout(() => {
                    dialog.classList.add("show")
                }, 0);
            } else {
                console.error("L'API <dialog> n'est pas prise en charge par ce navigateur.");
            }
        }

        function closeDialog(dialog, deleteArticle) {
            let deletedId = parseInt(dialog.getAttribute("data-id"));
            dialog.removeAttribute("data-id");
            dialog.classList.remove("show");
            setTimeout(() => {
                dialog.close()
            }, 300);
            if (deleteArticle) {
                const xhr = new XMLHttpRequest();
                xhr.onload = function () {
                    window.location.href = "/" + locale + "/blog";
                }
                xhr.open("GET", "/" + locale + "/blog/delete/" + deletedId);
                xhr.send();
            }
        }
    </script>
{% endblock %}