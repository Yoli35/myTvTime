{% set weather = this.forecast %}
{% set locale = this.getLocale %}
{% if weather is not empty %}
    <div id="weather" class="weather"{% if weather.current.is_day == 0 %} style="background-color: rgba(32, 32, 32, 0.75);"{% endif %}>
{#        {{ dump(weather.forecast.forecastday.0) }}#}
        <div id="weather-content" class="content">
            <div class="content-row">
                <div class="city">{{ weather.location.name }}</div>
                <div class="vertical">
                    <div class="item">
                        <div>{{ weather.location.region }}</div>
                        -
                        <div>{{ weather.location.country }}</div>
                    </div>
                    <div class="item">
                        <div>{{ weather.current.last_updated|format_date('full') }}</div>
                    </div>
                </div>
                <div id="weather-temp" class="temperature">{{ weather.current.temp_c|round ~ '°' }}</div>
                <div class="vertical">
                    <div class="item">
                        <i class="bi bi-thermometer-half"></i>
                        {{ 'Min'|trans }} : {{ weather.forecast.forecastday.0.day.mintemp_c|round ~ '°' }}
                        {{ 'Max'|trans }} : {{ weather.forecast.forecastday.0.day.maxtemp_c|round ~ '°' }}
                        {{ 'Feelslike'|trans }} : {{ weather.current.feelslike_c|round ~ '°' }}
                    </div>
                </div>
                <div class="condition">
                    <img src="{{ weather.current.condition.icon }}" alt="">
                    <div class="vertical">{{ weather.current.condition.text }}</div>
                </div>
                <div class="vertical">
                    <div class="item">
                        <div><i class="bi bi-cloud-drizzle"></i> {{ 'Precipitation'|trans }} : {{ weather.current.precip_mm ~ 'mm' }}</div>
                        <div><i class="bi bi-droplet"></i> {{ 'Humidity'|trans }} : {{ weather.current.humidity ~ '%' }}</div>
                    </div>
                    <div class="item">
                        <div>{{ 'Pressure'|trans }} : {{ weather.current.pressure_mb }} {{ 'Millibars'|trans }}</div>
                    </div>
                    <div class="item">
                        <div><i class="bi bi-eye"></i> {{ 'Visibility'|trans }} : {{ weather.current.vis_km ~ 'km' }}</div>
                        <div><i class="bi bi-sun-fill"></i> {{ 'UV'|trans }} : {{ weather.current.uv }}</div>
                    </div>
                    <div class="item">
                        <i class="bi bi-wind"></i>
                        <div>{{ 'Wind'|trans }} : {{ weather.current.wind_kph }}{{ 'km/h'|trans }}</div>
                        <div>{{ 'Direction'|trans }} : {{ weather.current.wind_dir }} ({{ weather.current.wind_degree ~ '°' }})</div>
                    </div>
                    <div class="item">
                        <div>{{ 'Gust'|trans }} : {{ weather.current.gust_kph }}{{ 'km/h'|trans }}</div>
                    </div>
                    <div class="item">
                        <i class="bi bi-sun"></i>
                        <div>{{ 'Sunrise'|trans }} :
                            {% if weather.forecast.forecastday.0.astro.sunrise == 'No sunrise' %}
                                {{ 'No sunrise'|trans }}
                            {% else %}
                                {{ weather.forecast.forecastday.0.astro.sunrise|date("G:i") }}
                            {% endif %}
                        </div>
                        <div>{{ 'Sunset'|trans }} :
                            {% if weather.forecast.forecastday.0.astro.sunset == 'No sunset' %}
                                {{ 'No sunset'|trans }}
                            {% else %}
                                {{ weather.forecast.forecastday.0.astro.sunset|date("G:i") }}
                            {% endif %}
                        </div>
                    </div>
                    <div class="item">
                        <i class="bi bi-moon"></i>
                        <div>{{ 'Sunrise'|trans }} :
                            {% if weather.forecast.forecastday.0.astro.moonrise == 'No moonrise' %}
                                {{ 'No moonrise'|trans }}
                            {% else %}
                                {{ weather.forecast.forecastday.0.astro.moonrise|date("G:i") }}
                            {% endif %}
                        </div>
                        <div>{{ 'Sunset'|trans }} :
                            {% if weather.forecast.forecastday.0.astro.moonset == 'No moonset' %}
                                {{ 'No moonset'|trans }}
                            {% else %}
                                {{ weather.forecast.forecastday.0.astro.moonset|date("G:i") }}
                            {% endif %}
                        </div>
                    </div>
                </div>
            </div>
            <div class="content-row">
                <div class="hours">
                    <div class="h24">
                        {% set now = "now"|date("G") %}
                        {% if weather.forecast.forecastday.0.astro.sunrise == 'No sunrise' %}
                            {% set sunrise = -1 %}
                        {% else %}
                            {% set sunrise = weather.forecast.forecastday.0.astro.sunrise|date("G") %}
                            {% set sunrise_minutes = weather.forecast.forecastday.0.astro.sunrise|date("i") %}
                        {% endif %}
                        {% if weather.forecast.forecastday.0.astro.sunrise == 'No sunset' %}
                            {% set sunset = -1 %}
                        {% else %}
                            {% set sunset = weather.forecast.forecastday.0.astro.sunset|date("G") %}
                            {% set sunset_minutes = weather.forecast.forecastday.0.astro.sunset|date("i") %}
                        {% endif %}
                        {% for hour in weather.forecast.forecastday.0.hour %}
                            {% set time = hour.time[11:2] %}
                            <div class="hour"{% if hour.is_day == 0 %} style="background-color: rgba(43,50,52,0.5)"{% endif %}>
                                <div>{{ time }}h</div>
                                <div><img src="{{ hour.condition.icon }}" alt="{{ hour.condition.text }}"></div>
                                <div>{{ hour.temp_c|round }}°C</div>
                            </div>
                            {% if time <= now and time+1 > now %}
                                <button class="hour" id="now"{% if hour.is_day == 0 %} style="background-color: rgba(43,50,52,0.5)"{% endif %}>
                                    <div>{{ "now"|date("G:i") }}</div>
                                    <div><img src="{{ weather.current.condition.icon }}" alt="{{ weather.current.condition.text }}"></div>
                                    <div>{{ 'Now'|trans }}</div>
                                </button>
                            {% endif %}
                            {% if time <= sunrise and time+1 > sunrise %}
                                <div id="sunrise" class="hour" data-sunrise="{{ sunrise }}" data-sunrise-minutes="{{ sunrise_minutes }}">
                                    <div>{{ weather.forecast.forecastday.0.astro.sunrise|date("G:i") }}</div>
                                    <div style="font-size: 1.75em;"><i class="bi bi-sunrise"></i></div>
                                    <div>{{ 'Sunrise'|trans }}</div>
                                </div>
                            {% endif %}
                            {% if time <= sunset and time+1 > sunset %}
                                <div id="sunset" class="hour" data-sunset="{{ sunset }}" data-sunset-minutes="{{ sunset_minutes }}">
                                    <div>{{ weather.forecast.forecastday.0.astro.sunset|date("G:i") }}</div>
                                    <div style="font-size: 1.75em;"><i class="bi bi-sunset"></i></div>
                                    <div>{{ 'Sunset'|trans }}</div>
                                </div>
                            {% endif %}
                        {% endfor %}
                    </div>
                </div>
            </div>
            <div id="toggler" class="toggle open"><i class="bi bi-dash-circle"></i></div>
        </div>
    </div>
{% endif %}
<script>
    // https://api.weatherapi.com/v1/forecast.json?key=a790df8a650b4ec8ab145453222405&q=Nantes&days=3&lang=fr
    window.addEventListener("DOMContentLoaded", () => {
        const banner = document.getElementById("user-banner");
        const avatar = document.getElementById("user-avatar");
        const toggle = document.getElementById("toggler");
        const weather = document.getElementById("weather");
        const content = document.getElementById("weather-content");
        const row = document.getElementsByClassName("content-row");
        const vertical = document.getElementsByClassName("vertical");
        const temperature = document.getElementById("weather-temp");
        let windowWidth = window.innerWidth;
        let startDate = new Date();
        let hour = startDate.getHours();
        let minutes = startDate.getMinutes();
        const now = document.getElementById("now");
        const h24 = now.parentNode;
        const sunrise = document.getElementById("sunrise");
        const sunset = document.getElementById("sunset");
        const sunriseHour = parseInt(sunrise.getAttribute("data-sunrise"));
        const sunsetHour = parseInt(sunset.getAttribute("data-sunset"));
        const sunriseMinutes = parseInt(sunrise.getAttribute("data-sunrise-minutes"));
        const sunsetMinutes = parseInt(sunset.getAttribute("data-sunset-minutes"));
        let isSunriseHour = (hour === sunriseHour),
            isSunsetHour = (hour === sunsetHour),
            isBeforeSunrise = isSunriseHour,
            isBeforeSunset = isSunsetHour;

        setTimeout( () => {
            now.focus();
            setInterval(updateNow, 5000)
        }, 500);

        setInterval(windowWidthChanged, 125);

        toggle.addEventListener("click", weather_toggle);

        weather_toggle();

        function weather_toggle() {

            windowWidth = window.innerWidth;

            if (toggle.classList.contains("open")) {
                toggle.classList.remove("open");
                toggle.innerHTML = '<i class="bi bi-plus-circle">';
                if (windowWidth < 767.98) {
                    banner.setAttribute("style", "margin-bottom: 13em");
                    weather.setAttribute("style", "bottom: -13em");
                    avatar.setAttribute("style", "right: .5em");
                }
                else {
                    avatar.setAttribute("style", "right: 2em");
                }
                for (let i=0;i<row.length;i++) row.item(i).setAttribute("style", "flex-direction: row");
                content.setAttribute("style", "padding: 1em 1em 0 1em");
                temperature.setAttribute("style", "font-size: 3em");
                for (let i=0;i<vertical.length;i++) vertical.item(i).setAttribute("style", "display: none");
            } else {
                toggle.classList.add("open");
                toggle.innerHTML = '<i class="bi bi-dash-circle">';
                if (windowWidth < 767.98) {
                    banner.setAttribute("style", "margin-bottom: 32em");
                    weather.setAttribute("style", "bottom: -32em");
                    avatar.setAttribute("style", "right: .5em");
                }
                else {
                    avatar.setAttribute("style", "right: 26em");
                }
                for (let i=0;i<row.length;i++) row.item(i).setAttribute("style", "flex-direction: column");
                content.setAttribute("style", "padding: 1em");
                temperature.setAttribute("style", "font-size: 5em");
                for (let i=0;i<vertical.length;i++) vertical.item(i).setAttribute("style", "display: block");
            }
        }

        function windowWidthChanged() {

            let currentWidth = window.innerWidth;

            if (currentWidth !== windowWidth) {

                windowWidth = currentWidth;

                if (windowWidth < 767.98) {
                    if (toggle.classList.contains("open")) {
                        banner.setAttribute("style", "margin-bottom: 32em");
                        weather.setAttribute("style", "bottom: -32em");
                        avatar.setAttribute("style", "right: .5em");
                    } else {
                        banner.setAttribute("style", "margin-bottom: 13em");
                        weather.setAttribute("style", "bottom: -13em");
                    }
                } else {
                    banner.removeAttribute("style");
                    weather.removeAttribute("style");
                    if (toggle.classList.contains("open")) {
                        avatar.setAttribute("style", "right: 26em");
                    }
                }
            }
        }

        function updateNow() {

            const d = new Date();
            let currentHour = d.getHours();

            now.firstElementChild.innerHTML = ('0' + d.getHours()).slice(-2) + ':' + ('0' + d.getMinutes()).slice(-2);

            if (currentHour !== hour) {
                hour = currentHour;
                let next = now.nextElementSibling;
                h24.removeChild(now);
                if (currentHour === 0) {
                    next = h24.firstChild;
                    h24.insertBefore(now, next);
                }
                if (currentHour < 23)
                {
                    next = next.nextElementSibling;
                    h24.insertBefore(now, next);
                }
                else {
                    h24.appendChild(now);
                }
                isSunriseHour = (hour === sunriseHour);
                isSunsetHour = (hour === sunsetHour);
                isBeforeSunrise = isSunriseHour;
                isBeforeSunset = isSunsetHour;
            }

            if (isSunriseHour) {
                if (isBeforeSunrise) {
                    let currentMinutes = d.getMinutes();
                    if (currentMinutes >= sunriseMinutes) {
                        isBeforeSunrise = false;
                        h24.removeChild(now);
                        let next = sunrise.nextElementSibling;
                        h24.insertBefore(now, next);
                    }
                }
            }
            if (isSunsetHour) {
                if (isBeforeSunset) {
                    let currentMinutes = d.getMinutes();
                    if (currentMinutes >= sunsetMinutes) {
                        isBeforeSunset = false;
                        h24.removeChild(now);
                        if (sunsetHour < 23) {
                            let next = sunset.nextElementSibling;
                            h24.insertBefore(now, next);
                        }
                        else {
                            h24.appendChild(now);
                        }
                    }
                }
            }
        }
    })
</script>
