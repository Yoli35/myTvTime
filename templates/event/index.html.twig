{% extends 'base.html.twig' %}

{% block title %}myTvTime ▶ ︎{{ 'My events'|trans }}{% endblock %}
{% block description %}{{ 'List of all my events'|trans }}{% endblock %}
{% block keywords %}{{ 'event'|trans }}{% endblock %}
{% block body %}
    {{ include('blocks/_mainMenu.html.twig') }}
    <div class="container">
        <div class="my-events">
            <div class="header">
                <h1>{{ 'My Events'|trans }}</h1>
                <div class="backdrop"></div>
            </div>

            {{ include('blocks/_nav.html.twig', {thisPage:('My events'|trans)}) }}

            <main>
                <div class="events">
                    <div class="add-event"><i class="fa-solid fa-circle-plus"></i> {{ 'Add event'|trans }}</div>
                    {% for event in events %}
                        <a href="{{ path('app_event_show', {id: event.id}) }}">
                            <div class="event" data-id="{{ event.id }}">
                                <div class="poster">
                                    <img src="/images/events/thumbnails/{{ event.thumbnail }}" alt="{{ event.name }}">
                                </div>
                                <div class="infos">
                                    <h2>{{ event.name }}</h2>
                                    <div>{{ event.subheading }}</div>
                                    <div id="{{ event.id }}" class="tools">
                                        <i class="fa-solid fa-pen-to-square" title="{{ 'Edit'|trans }}"></i>
                                        {#                                                <i class="fa-solid fa-eye-slash" title="{{ 'Hide'|trans }}"></i> #}
                                        <i class="fa-solid fa-trash-can" title="{{ 'Delete'|trans }}"></i>
                                    </div>
                                </div>
                                <div class="countdown" id="{{ event.id }}">
                                    {{ event.date|format_date('full') }}<br/>
                                    {{ event.date|format_time('medium') }}
                                </div>
                            </div>
                        </a>
                    {% else %}
                        <div class="no-event">{{ 'No event'|trans }}</div>
                    {% endfor %}
                </div>
            </main>
        </div>

        {{ include('blocks/_pageFooter.html.twig') }}

    </div>
    <dialog class="confirm-deletion">
        <div class="overlay">
            <div class="header">
                {{ 'Delete this event?'|trans }}
                <div class="close"><i class="fa-solid fa-xmark"></i></div>
            </div>
            <div class="content">
                {{ 'Do you really want to delete this event?'|trans }}
                <span></span>
                {{ 'This operation is final and cannot be cancelled.'|trans }}
            </div>
            <div class="footer">
                <button value="nope" class="btn btn-secondary delete-cancel">{{ 'Cancel'|trans }}</button>
                <button value="yass" class="btn btn-danger delete-done">{{ 'Delete'|trans }}</button>
            </div>
        </div>
    </dialog>
{% endblock %}
{% block javascripts %}
    {{ parent() }}
    <script src="/js/event.js"></script>
    <script>
        const locale = "{{ app.request.locale }}";
        let confirmDialog;

        window.addEventListener("DOMContentLoaded", () => {

            document.querySelector(".header").setAttribute("style", "background: transparent;");
            document.querySelector(".add-event").addEventListener("click", addNewEvent);
            confirmDialog = document.querySelector(".confirm-deletion");

            initHeader();
            initCountdowns(setCountdownValues());
            initTools(confirmDialog);
            setBackgrounds(document.querySelectorAll(".event"));
        });

        function setCountdownValues() {
            countdownValues = [];
            {% for e in events %}
            countdownValues[{{ loop.index0 }}] = {"id": {{ e.id }}, "interval": -1, "date": "{{ e.date|format_datetime('short','short', locale='en-US') }}"};
            {% endfor %}
            return countdownValues;
        }

        function initTools(dialog) {
            const tools = document.querySelectorAll(".tools");
            const events = document.querySelectorAll(".event");

            tools.forEach(tool => {
                tool.querySelector(".fa-pen-to-square").addEventListener("click", editEvent);
                // tool.querySelector(".fa-eye-slash").addEventListener("click", hideEvent);
                tool.querySelector(".fa-trash-can").addEventListener("click", deleteEvent);
            });

            events.forEach(event => {
                event.addEventListener("mouseenter", showTools);
                event.addEventListener("mouseleave", hideTools);
            });


            dialog.querySelector(".delete-done").addEventListener("click", () => {
                closeDialog(dialog, true);
            })
            dialog.querySelector(".delete-cancel").addEventListener("click", () => {
                closeDialog(dialog, false);
            })
            dialog.querySelector(".close").addEventListener('click', function () {
                closeDialog(dialog, false);
            });
        }

        function openDialog(dialog, id, elem) {
            const infos = elem.closest(".infos");
            dialog.querySelector("span").innerHTML = infos.querySelector("h2").innerHTML;
            dialog.setAttribute("data-id", id);

            if (typeof dialog.showModal === "function") {
                dialog.showModal();
                setTimeout(() => {
                    dialog.classList.add("show")
                }, 0);
            } else {
                console.error("L'API <dialog> n'est pas prise en charge par ce navigateur.");
            }
        }

        function closeDialog(dialog, deleteEvent) {
            let deletedId = parseInt(dialog.getAttribute("data-id"));
            let countdownValue = countdownValues.find(({id}) => id === deletedId);
            dialog.removeAttribute("data-id");
            dialog.classList.remove("show");
            setTimeout(() => {
                dialog.close()
            }, 300);
            if (deleteEvent) {
                const xhr = new XMLHttpRequest();
                xhr.onload = function () {
                    const selector = ".event[data-id=\"" + deletedId + "\"]";
                    const event = document.querySelector(selector);
                    const a = event.closest("a");
                    setTimeout(() => {
                        a.classList.add("deleted");
                    }, 0);
                    setTimeout(() => {
                        const events = a.closest(".events");
                        clearInterval(countdownValue.interval);
                        countdownValue.interval = -1;
                        events.removeChild(a);
                    }, 300);
                }
                xhr.open("GET", "/" + locale + "/event/delete/" + deletedId);
                xhr.send();
            }
        }

        function showTools(evt) {
            const tools = evt.currentTarget.querySelector(".tools");
            tools.classList.add("visible");
        }

        function hideTools(evt) {
            const tools = evt.currentTarget.querySelector(".tools");
            tools.classList.remove("visible");
        }

        function addNewEvent(evt) {
            evt.currentTarget.classList.add("click");
            setTimeout(() => {
                window.location.href = "{{ path('app_event_new') }}";
            }, 100);
        }

        function editEvent(evt) {
            const id = evt.currentTarget.parentElement.getAttribute("id");
            console.log('edit', {id});
            evt.preventDefault();
            window.location.href = "/" + locale + "/event/edit/" + id;
        }

        // function hideEvent(evt) {
        //     const id = evt.currentTarget.parentElement.getAttribute("id");
        //     console.log('hide', {id});
        //     evt.preventDefault();
        // }

        function deleteEvent(evt) {
            const id = evt.currentTarget.parentElement.getAttribute("id");
            console.log('delete', {id});
            evt.preventDefault();
            openDialog(confirmDialog, id, evt.currentTarget);
        }

        function setBackgrounds(events) {
            events.forEach(event => {
                const poster = event.querySelector(".poster");
                const img = poster.querySelector("img");
                const color = getAverageColor(img);
                const lightness = (0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b);
                if (lightness > 150) {
                    event.classList.add("light");
                } else {
                    event.classList.add("dark");
                }
                event.setAttribute("style", "background-color: " + "rgb(" + color.r + "," + color.g + "," + color.b + ")" + ";");
            });
        }

        function getAverageColor(img) {
            const blockSize = 5, // only visit every 5 pixels
                defaultRGB = {r: 0, g: 0, b: 0}, // for non-supporting envs
                canvas = document.createElement("canvas"),
                context = canvas.getContext && canvas.getContext("2d");
            let imageData, width, height,
                i = -4,
                length,
                rgb = {r: 0, g: 0, b: 0},
                count = 0;

            if (!context) {
                return defaultRGB;
            }

            height = canvas.height = img.naturalHeight || img.offsetHeight || img.height;
            width = canvas.width = img.naturalWidth || img.offsetWidth || img.width;

            context.drawImage(img, 0, 0);

            try {
                imageData = context.getImageData(0, 0, width, height);
            } catch (e) {
                /* security error, img on diff domain */
                return defaultRGB;
            }

            length = imageData.data.length;

            while ((i += blockSize * 4) < length) {
                ++count;
                rgb.r += imageData.data[i];
                rgb.g += imageData.data[i + 1];
                rgb.b += imageData.data[i + 2];
            }

            // ~~ used to floor values
            rgb.r = ~~(rgb.r / count);
            rgb.g = ~~(rgb.g / count);
            rgb.b = ~~(rgb.b / count);

            return rgb;
        }
    </script>
{% endblock %}
