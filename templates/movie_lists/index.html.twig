{% extends 'base.html.twig' %}

{% block title %}myTvTime ▶ ︎{{ 'My Collections'|trans }}{% endblock %}

{% block body %}
    {{ include('blocks/_mainMenu.html.twig') }}

    <div class="container-fluid">
        <div class="movie-list-page">

            <main class="w100">
                <div class="movie-list-tools">
                    {{ include('blocks/_nav.html.twig') }}
                    <div class="d-flex-1">
                        <a href="{{ path('app_movie_list_new') }}">
                            <div class="add-list"><i class="fa-solid fa-circle-plus"></i> {{ 'Add collection'|trans }}</div>
                        </a>
                        <div class="movie-list-layout-items">
                            <div data-type="roomy" title="{{ 'Roomy movie list'|trans }}" class="movie-list-layout-item{% if movieListCookie.layout == 'roomy' %} active{% endif %}">
                                <i class="fa-solid fa-table-cells-large"></i>
                            </div>
                            <div data-type="list" title="{{ 'List movie list'|trans }}" class="movie-list-layout-item{% if movieListCookie.layout == 'list' %} active{% endif %}">
                                <i class="fa-solid fa-table-list"></i>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="wrapper {{ movieListCookie.layout }}">
                    {% for movieList in movieLists %}
                        <div class="collection" data-id="{{ movieList.id }}">
                            <a href="{{ path('app_movie_list_show', {id: movieList.id}) }}{% if from is defined %}?from={{ from }}{% endif %}">
                                <div class="logo" style="background-image: url('/images/movie_lists/thumbnails/{{ movieList.thumbnail }}')"></div>
                                <div class="infos">
                                    <div class="name">{{ movieList.title }}</div>
                                    <div class="info">
                                        {{ movieList.movies|length ?: 'None'|trans }} {{ ((movieList.movies|length) > 1 ? 'Movies':'Movie')|trans }}
                                    </div>
                                    <div class="backdrop" style="background-image: url('/images/movie_lists/banners/{{ movieList.banner }}')"></div>
                                    <div id="{{ movieList.id }}" class="tools">
                                        <i class="fa-solid fa-pen-to-square" title="{{ 'Edit'|trans }}"></i>
                                        {# <i class="fa-solid fa-eye-slash" title="{{ 'Hide'|trans }}"></i> #}
                                        <i class="fa-solid fa-trash-can" title="{{ 'Delete'|trans }}"></i>
                                    </div>
                                </div>
                                <div class="movie-list-anchor"><i class="fa-solid fa-sort"></i></div>
                            </a>
                        </div>
                    {% else %}
                        <div class="no-list">
                            {{ 'No movie list yet'|trans }}<br>
                            {{ 'Create one by clicking the button above'|trans }}

                        </div>
                    {% endfor %}
                </div>
            </main>
        </div>

        {{ include('blocks/_pageFooter.html.twig') }}

    </div>
    <dialog class="confirm-deletion">
        <div class="overlay">
            <div class="header">
                {{ 'Delete this collection?'|trans }}
                <div class="close"><i class="fa-solid fa-xmark"></i></div>
            </div>
            <div class="content">
                {{ 'Do you really want to delete this collection?'|trans }}
                <span></span>
                {{ 'This operation is final and cannot be cancelled.'|trans }}
            </div>
            <div class="footer">
                <button value="nope" class="btn btn-secondary delete-cancel">{{ 'Cancel'|trans }}</button>
                <button value="yass" class="btn btn-secondary delete-done">{{ 'Delete'|trans }}</button>
            </div>
        </div>
    </dialog>

    {#    {{ show_source_code(_self) }} #}
{% endblock %}
{% block javascripts %}
    {{ parent() }}
    <script>
        const locale = "{{ app.request.locale }}";
        let confirmDialog;

        window.addEventListener("DOMContentLoaded", () => {

            // document.querySelector(".add-collection").addEventListener("click", addNewCollection);
            confirmDialog = document.querySelector(".confirm-deletion");

            initTools(confirmDialog);
            initLayout();
        });

        function initTools(dialog) {
            const tools = document.querySelectorAll(".tools");
            const collections = document.querySelectorAll(".collection");

            tools.forEach(tool => {
                tool.querySelector(".fa-pen-to-square").addEventListener("click", editCollection);
                // tool.querySelector(".fa-eye-slash").addEventListener("click", hideCollection);
                tool.querySelector(".fa-trash-can").addEventListener("click", deleteCollection);
            });

            collections.forEach(collection => {
                collection.addEventListener("mouseenter", showTools);
                collection.addEventListener("mouseleave", hideTools);
            });


            dialog.querySelector(".delete-done").addEventListener("click", () => {
                closeDialog(dialog, true);
            })
            dialog.querySelector(".delete-cancel").addEventListener("click", () => {
                closeDialog(dialog, false);
            })
            dialog.querySelector(".close").addEventListener('click', function () {
                closeDialog(dialog, false);
            });
        }

        function initLayout() {
            const layouts = document.querySelectorAll('.movie-list-layout-item');
            layouts.forEach((layout) => {
                layout.addEventListener('click', (e) => {
                    layouts.forEach((layout) => {
                        layout.classList.remove('active');
                    });
                    e.currentTarget.classList.add('active');
                    const type = e.currentTarget.getAttribute('data-type');
                    const wrapper = document.querySelector('.wrapper');
                    // const time = new Date();
                    // time.setFullYear(time.getFullYear() + 1);
                    wrapper.classList.remove('roomy', 'compact', 'list');
                    wrapper.classList.add(type);
                    setLayoutSeasonCookie(type);
                });
            });
        }

        function openDialog(dialog, id, elem) {
            const infos = elem.closest(".infos");
            dialog.querySelector("span").innerHTML = infos.querySelector(".name").innerHTML;
            dialog.setAttribute("data-id", id);

            if (typeof dialog.showModal === "function") {
                dialog.showModal();
                setTimeout(() => {
                    dialog.classList.add("show")
                }, 0);
            } else {
                console.error("L'API <dialog> n'est pas prise en charge par ce navigateur.");
            }
        }

        function closeDialog(dialog, deleteCollection) {
            let deletedId = parseInt(dialog.getAttribute("data-id"));
            dialog.removeAttribute("data-id");
            dialog.classList.remove("show");
            setTimeout(() => {
                dialog.close()
            }, 300);
            if (deleteCollection) {
                const xhr = new XMLHttpRequest();
                xhr.onload = function () {
                    const selector = ".collection[data-id=\"" + deletedId + "\"]";
                    const collection = document.querySelector(selector);
                    setTimeout(() => {
                        a.classList.add("deleted");
                    }, 0);
                    setTimeout(() => {
                        const wrapper = collection.closest(".wrapper");
                        wrapper.removeChild(collection);
                    }, 300);
                }
                xhr.open("GET", "/" + locale + "/collection/delete/" + deletedId);
                xhr.send();
            }
        }

        function showTools(evt) {
            const tools = evt.currentTarget.querySelector(".tools");
            tools.classList.add("visible");
        }

        function hideTools(evt) {
            const tools = evt.currentTarget.querySelector(".tools");
            tools.classList.remove("visible");
        }

        function addNewCollection(evt) {
            evt.currentTarget.classList.add("click");
            setTimeout(() => {
                window.location.href = "{{ path('app_movie_list_new') }}";
            }, 100);
        }

        function editCollection(evt) {
            const id = evt.currentTarget.parentElement.getAttribute("id");
            console.log('edit', {id});
            evt.preventDefault();
            window.location.href = "/" + locale + "/collection/edit/" + id;
        }

        // function hideCollection(evt) {
        //     const id = evt.currentTarget.parentElement.getAttribute("id");
        //     console.log('hide', {id});
        //     evt.preventDefault();
        // }

        function deleteCollection(evt) {
            const id = evt.currentTarget.parentElement.getAttribute("id");
            console.log('delete', {id});
            evt.preventDefault();
            openDialog(confirmDialog, id, evt.currentTarget);
        }

        function getSeasonCookie() {
            return JSON.parse(decodeURIComponent(document.cookie.split('; ').find(row => row.startsWith('movie_list=')).split('=')[1]));
        }

        function setSeasonCookie(cookie) {
            const time = new Date();
            time.setFullYear(time.getFullYear() + 1);
            document.cookie = "movie_list=" + encodeURIComponent(JSON.stringify(cookie)) + "; expires=" + time.toUTCString() + "; path=/";
            console.log(getSeasonCookie());
        }

        function getLayoutSeasonCookie() {
            return getSeasonCookie().layout;
        }

        function setLayoutSeasonCookie(layout) {
            const cookie = getSeasonCookie();
            cookie.layout = layout;
            setSeasonCookie(cookie);
        }
    </script>
{% endblock %}

