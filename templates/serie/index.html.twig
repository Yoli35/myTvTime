{% extends 'base.html.twig' %}

{% block title %}{{ 'My Series'|trans }}{% endblock %}

{% block body %}
    {{ include('blocks/pageHeader.html.twig') }}
    <div class="container">
        <div class="my-series">
            <div class="header">
                <h1>{{ 'My Series'|trans }}</h1>
                <div class="backdrop"></div>
            </div>

            <nav aria-label="{{ 'Navigation'|trans }}" class="nav-breadcrumb" style="--bs-breadcrumb-divider: '◦';">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="{{ path('app_home') }}">{{ 'Movies'|trans }}</a></li>
                    {{ include('blocks/movie/bracket.html.twig') }}
                    <li class="breadcrumb-item active">{{ 'My Series'|trans }}</li>
                </ol>
            </nav>

            <main>
                <div class="series">
                    {% if series|length %}
                        <div class="series-tools mobile">
                            <div class="pages mobile">
                                {{ include('blocks/serie/pagination.html.twig') }}
                            </div>
                        </div>
                        <div class="wrapper">
                            {% for serie in series %}
                                {{ include('blocks/serie/card.html.twig') }}
                            {% endfor %}
                        </div>
                        <div class="series-tools">
                            <div class="pages">
                                {{ include('blocks/serie/pagination.html.twig') }}
                            </div>
                            <div class="add-serie">
                                <h2>{{ 'Add'|trans }}</h2>

                                <label class="label" for="new_serie">{{ 'New Serie Id'|trans }}</label>
                                <div class="group">
                                    <div class="field">
                                        <input id="new_serie" type="text" value="">
                                    </div>
                                    <div>
                                        <button id="add_serie" type="submit" class="btn btn-secondary">{{ 'Add'|trans }}</button>
                                    </div>
                                </div>
                                <div class="help">
                                    <details>
                                        <summary><span class="label">{{ 'Help'|trans }}</span></summary>
                                        <div>
                                            <img src="https://www.themoviedb.org/assets/2/v4/logos/v2/blue_short-8e7b30f73a4020692ccca9c88bafe5dcb6f8a62a4c6bc55cd9ba82bb2cd95f6c.svg" alt="The Movie Database (TMDB)" width="154" height="20"><br>
                                            {{ 'New Serie Help'|trans({
                                                '%link1%': '<a href="https://www.themoviedb.org" target="_blank">The Movie Db site <i class="fa-solid fa-paperclip"></i></a>',
                                                '%link2%': '<a href="https://www.themoviedb.org/tv/4607-lost" target="_blank">https://www.themoviedb.org/tv/4607-lost</a>',
                                                '%id%': '4607'})|raw }}
                                        </div>
                                    </details>
                                </div>
                            </div>
                            <div class="settings">
                                <h2>{{ 'Settings'|trans }}</h2>

                                <div class="per-page">
                                    <label class="label" for="per-page">{{ 'Results per page'|trans }}</label>
                                    <div class="field">
                                        {% set slider_value = 2 %}
                                        {% for key, value in pages.per_page_values %}
                                            {% if value == pages.per_page %}
                                                {% set slider_value = key %}
                                            {% endif %}
                                        {% endfor %}
                                        <input id="per-page" type="range" value="{{ slider_value }}" list="per-page-list" min="1" max="{{ pages.per_page_values|length }}">
                                        <datalist id="per-page-list">
                                            {% for key, value in pages.per_page_values %}
                                                <option value="{{ key }}" label="{{ value }}"></option>
                                            {% endfor %}
                                        </datalist>
                                        <div class="value">{{ pages.per_page }}</div>
                                    </div>
                                </div>

                                <div class="sort">
                                    <div class="group-settings">
                                        <div class="order-by">
                                            <label class="label" for="order-by">{{ 'Order by'|trans }}</label>
                                            <div class="field">
                                                <select id="order-by">
                                                    <option value="firstDateAir"{% if pages.order_by=='firstDateAir' %} selected{% endif %}>{{ 'First Air Date'|trans }}</option>
                                                    <option value="id"{% if pages.order_by=='id' %} selected{% endif %}>{{ 'Add order'|trans }}</option>
                                                    <option value="name"{% if pages.order_by=='name' %} selected{% endif %}>{{ 'Name'|trans }}</option>
                                                </select>
                                            </div>
                                        </div>
                                        <div class="order">
                                            <label class="label" for="order">{{ 'Order'|trans }}</label>
                                            <div class="field">
                                                <select id="order">
                                                    <option value="desc"{% if pages.order=='desc' %} selected{% endif %}>{{ 'Descending'|trans }}</option>
                                                    <option value="asc"{% if pages.order=='asc' %} selected{% endif %}>{{ 'Ascending'|trans }}</option>
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="apply">
                                        <button id="apply" type="submit" class="btn btn-secondary">{{ 'Apply'|trans }}</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    {% else %}
                        Rien à afficher
                    {% endif %}
                    <div class="new-serie-preview">
                        <div class="message">
                            <div class="content"></div>
                            <div class="close"><i class="fa-solid fa-circle-xmark"></i></div>
                        </div>
                        <div class="wrapper"></div>
                    </div>
                </div>
            </main>
        </div>
        {{ include('blocks/pageFooter.html.twig') }}
    </div>
{% endblock %}
{% block morejs %}
    <script>
        const _app_serie_new = "{{ path('app_serie_new') }}";
        const _current_page = {{ pages.page }};
        const _per_page = {{ pages.per_page }};
        const _order_by = "{{ pages.order_by }}";
        const _order = "{{ pages.order }}";

        window.addEventListener("DOMContentLoaded", () => {

            initSettings();
            initPreview();
            newSerie();
            initHeader();
        })

        function initHeader() {
            let ticking = false;
            setH1();
            window.addEventListener('resize', setH1);

            window.addEventListener('scroll', () => {
                if (!ticking) {
                    window.requestAnimationFrame(function () {
                        setH1();
                        ticking = false;
                    });
                }
                ticking = true;
            });

        }

        function setH1() {
            const header = document.querySelector(".header");
            const h1 = document.querySelector("h1");
            let left, ratio, top, size;
            left = (header.clientWidth - h1.clientWidth) / 2;
            top = ((header.clientHeight + window.scrollY) - h1.clientHeight) / 2;
            ratio = (header.clientHeight - window.scrollY) / header.clientHeight;
            size = header.clientWidth > 720 ? 4 : 2;
            if (ratio < 0) ratio = 0;
            h1.setAttribute("style", "left: " + left.toString() + "px; top: " + top.toString() + "px; opacity: " + ratio + "; font-size: " + (size + 2 * ratio).toString() + "em");
        }

        function initSettings() {
            //
            // Settings
            //
            const apply = document.querySelector("#apply");
            let per_page = {
                'input': document.querySelector(".per-page").querySelector("input"),
                'value': document.querySelector(".per-page").querySelector(".value"),
                'data': [10, 20, 50, 100]
            }
            let order_by = {
                'input': document.querySelector(".order-by").querySelector("select"),
            }
            let order = {
                'input': document.querySelector(".order").querySelector("select"),
            }
            per_page.input.addEventListener("click", () => {
                per_page.value.innerHTML = per_page.data[per_page.input.value - 1].toString();
            })
            per_page.input.addEventListener("mousemove", () => {
                per_page.value.innerHTML = per_page.data[per_page.input.value - 1].toString();
            })
            order_by.input.addEventListener("change", () => {
                console.log(order_by.input.value)
            })
            order.input.addEventListener("change", () => {
                console.log(order.input.value)
            })
            apply.addEventListener("click", () => {
                window.location.href = "{{ path('app_serie_index') }}?p=1&pp=" + per_page.data[per_page.input.value - 1].toString() + "&ob=" + order_by.input.value + "&o=" + order.input.value;
            })
        }

        function initPreview() {

            const preview = document.querySelector(".new-serie-preview");
            const close = preview.querySelector(".close");

            preview.addEventListener("click", dismissPreview);
            close.addEventListener("click", dismissPreview);
        }

        function dismissPreview() {
            const preview = document.querySelector(".new-serie-preview");
            const message = preview.querySelector(".message").querySelector(".content");
            const wrapper = preview.querySelector(".wrapper");

            setTimeout(() => {
                preview.classList.remove("visible");
            }, 0);
            wrapper.innerHTML = "";
            message.innerHTML = "";
            document.querySelector("#new_serie").focus();
        }

        function newSerie() {
            document.querySelector("#new_serie").focus();
            document.querySelector("#new_serie").addEventListener("paste", addSerie);
            document.querySelector("#add_serie").addEventListener("click", addSerie);

            document.querySelector("#new_serie").addEventListener("keyup", function (event) {
                if (event.key === "Enter") {
                    addSerie(event);
                }
            })
        }

        function addSerie(evt) {
            let value = "";

            if (evt.type === "click" || evt.type === 'keyup') {
                value = document.querySelector("#new_serie").value;
            }
            if (evt.type === "paste") {
                value = evt.clipboardData.getData('text/plain');
            }
            // evt.preventDefault()

            if (value.length) {
                const xhr = new XMLHttpRequest();
                xhr.onload = function () {
                    let data = {
                        'serie': '',
                        'status': '',
                        'response': '',
                        'id': '',
                        'card': {},
                        'pagination': {}
                    };
                    if (this.response.slice(0, 1) === '<') {
                        data = this.response;
                    } else {
                        data = JSON.parse(this.response);
                        if (data.status === 'Ok') {
                            const preview = document.querySelector(".new-serie-preview");
                            const message = preview.querySelector(".message").querySelector(".content");
                            const wrapper = preview.querySelector(".wrapper");

                            wrapper.innerHTML = data.card.content;

                            if (data.response === "New") {
                                message.innerHTML = "{{ 'New serie added'|trans }}";
                            }
                            if (data.response === "Update") {
                                message.innerHTML = "{{ 'Serie updated'|trans }}";
                            }
                            setTimeout(() => {
                                preview.classList.add("visible");
                            }, 0);

                            /*
                             * Si on est sur la première page avec le tri par "ordre d'ajout décroissant",
                             * alors on insère la nouvelle série au début
                             */
                            if (data.response === "New" && _current_page === 1 && _order_by === 'id' && _order === 'desc') {
                                const wrapper = document.querySelector(".series").querySelector(".wrapper");
                                const first = wrapper.firstElementChild;
                                const last = wrapper.lastElementChild;
                                const new_card = document.createRange().createContextualFragment(data.card.content);

                                first.before(new_card);
                                last.remove();
                            }
                            /*
                             * Mise à jour du bloc Pagination
                             */
                            const tools = document.querySelectorAll(".series-tools");
                            tools.forEach(tool => {
                                let pagination = tool.querySelector(".pages");
                                pagination.innerHTML = data.pagination.content;
                            })
                        }

                        if (data.status === "Ko") {
                            alert("{{ 'Serie not found'|trans }} (ID: " + data.id + ")");
                        }
                    }
                    console.log({data});
                    document.querySelector("#new_serie").value = "";
                }
                xhr.open("GET", _app_serie_new + '?value=' + value + "&p=" + _current_page + "&pp=" + _per_page + "&ob=" + _order_by + "&o=" + _order);
                xhr.send();
            }
        }
    </script>
{% endblock %}