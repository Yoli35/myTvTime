{% extends 'base.html.twig' %}

{% block title %}MyTvTime::{{ 'My Series'|trans }}{% endblock %}
{% block description %}{{ 'List of all the series I have watched in my life'|trans }}{% endblock %}
{% block keywords %}{{ 'Series, Tv Shows'|trans }}{% endblock %}
{% block body %}
    {{ include('blocks/pageHeader.html.twig') }}
    <div class="container">
        <div class="my-series">
            <div class="header">
                {{ include('blocks/serie/quotes.html.twig') }}
                <h1>{{ 'My Series'|trans }}</h1>
                <div class="backdrop"></div>
            </div>

            {{ include('blocks/nav.html.twig', {thisPage:('My Series'|trans)}) }}

            <main>
                <div class="series">
                    {% if series|length %}
                        <div class="series-tools mobile">
                            <div class="pages mobile">
                                {{ include('blocks/serie/pagination.html.twig') }}
                            </div>
                        </div>
                        <div class="wrapper">
                            {% for serie in series %}
                                {{ include('blocks/serie/card.html.twig') }}
                            {% endfor %}
                        </div>
                        <div class="series-tools bottom">
                            <div class="pages">
                                {{ include('blocks/serie/pagination.html.twig') }}
                            </div>
                        </div>
                        <div class="series-tools">
                            <div class="pages">
                                {{ include('blocks/serie/pagination.html.twig') }}
                            </div>
                            <div class="numbers">
                                {{ numbers.episodes }} {{ 'episodes'|trans }} / {{ numbers.seasons }} {{ 'seasons'|trans }}
                            </div>
                            <div class="search-serie">
                                <h2>{{ 'Search my series'|trans }}</h2>
                                <label class="label" for="search-name">{{ 'Name of the serie'|trans }}</label>
                                <div class="group">
                                    <div class="field">
                                        <input id="search-name" type="text" value="" placeholder="{{ 'Start taping the name'|trans }}">
                                        <input id="search-id" type="hidden" value="-1">
                                    </div>
                                    <div>
                                        <button id="search_serie" class="disabled" type="submit">{{ 'Show'|trans }}</button>
                                    </div>
                                </div>
                            </div>
                            <div class="add-serie">
                                <h2>{{ 'Add'|trans }}</h2>

                                <label class="label" for="new_serie">{{ 'New Serie Id'|trans }}</label>
                                <div class="group">
                                    <div class="field">
                                        <input id="new_serie" type="text" value="">
                                    </div>
                                    <div>
                                        <button id="add_serie" type="submit">{{ 'Add'|trans }}</button>
                                    </div>
                                </div>
                                <div class="help">
                                    <details>
                                        <summary><span class="label">{{ 'Help'|trans }}</span></summary>
                                        <div>
                                            <img src="https://www.themoviedb.org/assets/2/v4/logos/v2/blue_short-8e7b30f73a4020692ccca9c88bafe5dcb6f8a62a4c6bc55cd9ba82bb2cd95f6c.svg" alt="The Movie Database (TMDB)" width="154" height="20"><br>
                                            {{ 'New Serie Help'|trans({
                                                '%link1%': '<a href="https://www.themoviedb.org" target="_blank" rel="noopener">The Movie Db site <i class="fa-solid fa-paperclip"></i></a>',
                                                '%link2%': '<a href="https://www.themoviedb.org/tv/4607-lost" target="_blank" rel="noopener">https://www.themoviedb.org/tv/4607-lost</a>',
                                                '%id%': '4607'})|raw }}
                                        </div>
                                    </details>
                                </div>
                            </div>
                            <div class="settings">
                                <h2>{{ 'Settings'|trans }}</h2>

                                <div class="per-page">
                                    <label class="label" for="per-page">{{ 'Results per page'|trans }}</label>
                                    <div class="field">
                                        {% set slider_value = 2 %}
                                        {% for key, value in pages.per_page_values %}
                                            {% if value == pages.per_page %}
                                                {% set slider_value = key %}
                                            {% endif %}
                                        {% endfor %}
                                        <input id="per-page" type="range" value="{{ slider_value }}" list="per-page-list" min="1" max="{{ pages.per_page_values|length }}">
                                        <datalist id="per-page-list">
                                            {% for key, value in pages.per_page_values %}
                                                <option value="{{ key }}" label="{{ value }}"></option>
                                            {% endfor %}
                                        </datalist>
                                        <div class="value">{{ pages.per_page }}</div>
                                    </div>
                                </div>
                                <div class="sort">
                                    <div class="group-settings">
                                        <div class="order-by">
                                            <label class="label" for="order-by">{{ 'Order by'|trans }}</label>
                                            <div class="field">
                                                <select id="order-by" class="left">
                                                    <option value="firstDateAir"{% if pages.order_by=='firstDateAir' %} selected{% endif %}>{{ 'First Air Date'|trans }}</option>
                                                    <option value="id"{% if pages.order_by=='id' %} selected{% endif %}>{{ 'Add order'|trans }}</option>
                                                    <option value="updatedAt"{% if pages.order_by=='updatedAt' %} selected{% endif %}>{{ 'Last modified by user'|trans }}</option>
                                                    <option value="modifiedAt"{% if pages.order_by=='modifiedAt' %} selected{% endif %}>{{ 'Last modified by TMDB'|trans }}</option>
                                                    <option value="name"{% if pages.order_by=='name' %} selected{% endif %}>{{ 'Name'|trans }}</option>
                                                </select>
                                            </div>
                                        </div>
                                        <div class="order">
                                            <label class="label" for="order">{{ 'Order'|trans }}</label>
                                            <div class="field">
                                                <select id="order" class="right">
                                                    <option value="desc"{% if pages.order=='desc' %} selected{% endif %}>{{ 'Descending'|trans }}</option>
                                                    <option value="asc"{% if pages.order=='asc' %} selected{% endif %}>{{ 'Ascending'|trans }}</option>
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="apply">
                                        <button id="apply" type="submit">{{ 'Apply'|trans }}</button>
                                    </div>
                                </div>
                                {# let particule = {interval: 0, loop: 1, frame: 0,
                        maxF: 0,
                        maxY: 0, div: undefined, bg: "b0",
                        x: 0, dx: 0, y: 0, dy: 0,
                        initialAngle: 0, turnPerSeconde: 0,
                        scale: 1
                       };
                                #}
                            </div>
                            <div class="settings">
                                <div class="animation">
                                    <h3>{{ 'Animation'|trans }}</h3>
                                    <div class="leaf">
                                        <h4>
                                            {{ 'Leaf' }}
                                            <label class="switch">
                                                <input type="checkbox"/>
                                                <span></span>
                                            </label>
                                            <div class="anim-settings-toggler"><i class="fa-solid fa-gear"></i></div>
                                        </h4>
                                        <div class="anim-settings">
                                            <div class="slider" id="frequency">
                                                <div class="label">{{ 'Number'|trans }} (0-100)</div>
                                                <div class="control" data-name="number" data-type="range" data-min="0" data-max="100" data-value="10"></div>
                                            </div>
                                            <div class="slider" id="life-length">
                                                <div class="label">{{ 'Life\'s Length'|trans }} (0-300sec)</div>
                                                <div class="control" data-name="life-length" data-type="interval" data-min="0" data-max="300" data-min-value="2" data-max-value="60"></div>
                                            </div>
                                            <div class="slider" id="initial-angle">
                                                <div class="label">{{ 'Initial angle'|trans }} (0°-360°)</div>
                                                <div class="control" data-name="initial-angle" data-type="range" data-min="0" data-max="360" data-value="0"></div>
                                            </div>
                                            <div class="slider" id="turn-per-minute">
                                                <div class="label">{{ 'Turn per minute'|trans }} (0-100)</div>
                                                <div class="control" data-name="turn-per-minute" data-type="range" data-min="0" data-max="100" data-value="5"></div>
                                            </div>
                                            <div class="slider" id="scale">
                                                <div class="label">{{ 'Scale'|trans }} (25%-500%)</div>
                                                <div class="control" data-name="scale" data-type="interval" data-min="25" data-max="500" data-min-value="25" data-max-value="200"></div>
                                            </div>
                                            <div class="save">
                                                <button>{{ 'Save'|trans }}</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    {% else %}
                        Rien à afficher
                    {% endif %}
                    <div class="new-serie-preview">
                        <div class="message">
                            <div class="content"></div>
                            <div class="close"><i class="fa-solid fa-circle-xmark"></i></div>
                        </div>
                        <div class="wrapper"></div>
                    </div>
                </div>
            </main>
        </div>
        {{ include('blocks/pageFooter.html.twig') }}
    </div>
{% endblock %}
{% block morejs %}
    <script>
        const _app_serie_new = "{{ path('app_serie_new') }}";
        const _app_serie_set_settings = "{{ path('app_serie_set_settings') }}";
        const _current_page = {{ pages.page }};
        const _per_page = {{ pages.per_page }};
        const _order_by = "{{ pages.order_by }}";
        const _order = "{{ pages.order }}";
        const _from = "";

        const slideDuration = 6000;
        const translateDuration = 3000;
        const removeDelay = 100;
        const actionDelay = 10;
        let slideInterval, slideImages, slideNames, slideLinks, slideIndex;
        let canNotify;

        const leaf_settings = getLeafSettings();
        const leaf_particules = [];

        console.log({leaf_settings});

        window.addEventListener("DOMContentLoaded", () => {

            initSettings();
            initPreview();
            newSerie();
            initHeader();
            initAnimation();

            autocomplete(document.querySelector("#search-name"), createList());
        })

        function initHeader() {
            const header = document.querySelector(".header");
            let ticking = false;
            setH1();
            window.addEventListener('resize', setH1);

            window.addEventListener('scroll', () => {
                if (!ticking) {
                    window.requestAnimationFrame(function () {
                        setH1();
                        ticking = false;
                    });
                }
                ticking = true;
            });

            setTimeout(() => {
                header.setAttribute("style", "background-color: var(--gradiant-ardoise-10-alpha-20");
            }, 3000);

            setTimeout(clearQuote, 3000);
        }

        function setH1() {
            const header = document.querySelector(".header");
            const h1 = document.querySelector("h1");
            let left, ratio, top;
            ratio = (header.clientHeight - window.scrollY) / header.clientHeight;
            left = (header.clientWidth - h1.clientWidth) / 2;
            top = ((header.clientHeight + window.scrollY) - h1.clientHeight) / 2;
            if (ratio < 0) ratio = 0;
            h1.setAttribute("style", "left: " + left.toString() + "px; top: " + top.toString() + "px; opacity: " + ratio + "; transform: scale(" + ratio + ")");
        }

        function clearQuote() {
            const header = document.querySelector(".header");
            let op = 1.0, intervalId;

            intervalId = setInterval(() => {
                header.style.setProperty("--quote-opacity", op);
                op -= 0.005;
                if (op < 0.0) {
                    header.removeChild(header.querySelector(".quote.n1"));
                    header.removeChild(header.querySelector(".quote.n2"));
                    header.removeChild(header.querySelector(".quote.n3"));
                    header.removeChild(header.querySelector(".quote.n4"));
                    clearInterval(intervalId);
                    backdropSlide();
                }
            }, 5);
        }

        function backdropSlide() {
            const header = document.querySelector(".header");
            let indicatorDiv, indicatorsDiv, left, right, modulo;

            slideImages = getBackdrops();
            slideNames = getNames();
            slideLinks = getLinks();
            slideIndex = 0;
            modulo = slideImages.length;

            left = document.createElement("div");
            left.classList.add("left-arrow");
            left.innerHTML = '<i class="fa-solid fa-chevron-left"></i>';
            left.addEventListener("click", previousSlide);
            header.appendChild(left);
            right = document.createElement("div");
            right.classList.add("right-arrow");
            right.innerHTML = '<i class="fa-solid fa-chevron-right"></i>';
            right.addEventListener("click", nextSlide);
            header.appendChild(right);

            indicatorsDiv = document.createElement("div");
            indicatorsDiv.classList.add("indicators");
            for (let i = 0; i < modulo; i++) {
                indicatorDiv = document.createElement("div");
                indicatorDiv.classList.add("indicator");
                indicatorDiv.setAttribute("data-index", i.toString());
                indicatorDiv.addEventListener("click", gotoSlide);
                indicatorsDiv.appendChild(indicatorDiv);
            }
            indicatorsDiv.setAttribute("style", "left: " + ((header.clientWidth - (20 * modulo)) / 2) + "px");
            header.appendChild(indicatorsDiv);

            header.addEventListener("mouseenter", stopSlide);
            header.addEventListener("mouseleave", startSlide);

            document.addEventListener("visibilitychange", () => {
                if (document.visibilityState === 'visible') {
                    startSlide();
                } else {
                    stopSlide();
                }
            });

            slideInterval = setInterval(slideFunc, slideDuration);
        }

        function slideFunc() {
            const header = document.querySelector(".header");
            const modulo = slideImages.length;
            let filename, div, nameDiv, name, backdrop, link, href;

            filename = slideImages[slideIndex];
            name = slideNames[slideIndex];
            href = slideLinks[slideIndex];
            backdrop = header.querySelector(".backdrop");
            div = document.createElement("div");
            div.classList.add("backdrop", "right");
            div.setAttribute("style", "background-image: url('" + filename + "')");
            nameDiv = document.createElement("div");
            nameDiv.appendChild(document.createTextNode(name));
            nameDiv.classList.add("name");
            div.appendChild(nameDiv);
            link = document.createElement("a");
            link.classList.add("link");
            link.setAttribute("href", href);
            link.appendChild(document.createTextNode("Voir la fiche"));
            div.appendChild(link);
            header.appendChild(div);

            setTimeout(() => {
                backdrop.classList.add("left");
                div.classList.remove("right");
                indicators(header, slideIndex, modulo);
            }, actionDelay);
            slideIndex = (slideIndex + 1) % modulo;
            setTimeout(() => {
                let leftBackdrop = header.querySelector(".backdrop.left");
                if (leftBackdrop) {
                    header.removeChild(leftBackdrop);
                }
                setTimeout(() => {
                    while (header.querySelectorAll(".backdrop").length > 1) {
                        header.removeChild(header.lastChild); // Dernière div.backdrop
                    }
                }, removeDelay);
            }, translateDuration + removeDelay);
        }

        function gotoSlide(evt) {
            const target = parseInt(evt.target.getAttribute("data-index"));
            const modulo = slideImages.length;

            if ((target + 1) % modulo === slideIndex) return;

            slideIndex = target;
            setSlide();
            slideIndex = (slideIndex + 1) % modulo;
        }

        function nextSlide() {
            const modulo = slideImages.length;

            setSlide();
            slideIndex = (slideIndex + 1) % modulo;
        }

        function previousSlide() {
            const modulo = slideImages.length;

            slideIndex -= 2;
            if (slideIndex < 0) slideIndex = modulo + slideIndex;
            setSlide();
            slideIndex = (slideIndex + 1) % modulo;
        }

        function setSlide() {
            const header = document.querySelector(".header");
            const modulo = slideImages.length;
            let filename, name, backdrop, nameDiv, link, href;

            let leftBackdrop = document.querySelector(".backdrop.left");
            if (leftBackdrop) {
                header.removeChild(leftBackdrop);
            }
            filename = slideImages[slideIndex];
            name = slideNames[slideIndex];
            href = slideLinks[slideIndex];
            backdrop = header.querySelector(".backdrop");
            backdrop.setAttribute("style", "background-image: url('" + filename + "')");
            nameDiv = backdrop.querySelector(".name");
            link = backdrop.querySelector("a");
            // avant le premier défilement, il n'y a pas de div.name ni de lien
            if (nameDiv) {
                nameDiv.removeChild(nameDiv.firstChild);
                nameDiv.appendChild(document.createTextNode(name));
                link.setAttribute("href", href);
            } else {
                nameDiv = document.createElement("div");
                nameDiv.appendChild(document.createTextNode(name));
                nameDiv.classList.add("name");
                backdrop.appendChild(nameDiv);
                link = document.createElement("a");
                link.classList.add("link");
                link.setAttribute("href", href);
                backdrop.appendChild(link);
            }
            indicators(header, slideIndex + 1, modulo);
        }

        function stopSlide() {
            clearInterval(slideInterval);
        }

        function startSlide() {
            slideInterval = setInterval(slideFunc, slideDuration);
        }

        function indicators(header, idx, count) {
            const indicators = header.querySelectorAll(".indicator");
            idx--;
            for (let i = 0; i < count; i++) {
                indicators[i].classList.remove("active");
            }
            if (idx >= 0 && idx < count) {
                indicators[idx].classList.add("active");
            } else {
                indicators[count - 1].classList.add("active");
            }
        }

        function getBackdrops() {
            const wrapper = document.querySelector(".wrapper");
            const backdrops = wrapper.querySelectorAll(".backdrop");
            let tab = [], i = 0;
            backdrops.forEach(backdrop => {
                tab[i++] = backdrop.style.backgroundImage.match(/url\(["']?([^"']*)["']?\)/)[1];
            });
            return tab;
        }

        function getNames() {
            const wrapper = document.querySelector(".wrapper");
            const infos = wrapper.querySelectorAll(".infos");
            let tab = [], i = 0;
            infos.forEach(backdrop => {
                tab[i++] = backdrop.firstElementChild.innerHTML;
            });
            return tab;
        }

        function getLinks() {
            const wrapper = document.querySelector(".wrapper");
            const links = wrapper.querySelectorAll("a");
            let tab = [], i = 0;
            links.forEach(link => {
                tab[i++] = link.getAttribute("href");
            });
            return tab;
        }

        function initAnimation() {
            const animations = document.querySelectorAll(".animation");

            if (!animations.length) return;

            animations.forEach(animation => {
                const sliders = animation.querySelectorAll(".slider");

                sliders.forEach(slider => {
                    const label = slider.querySelector(".label");
                    const control = slider.querySelector(".control");
                    const width = control.offsetWidth;
                    let values, value;
                    switch (control.getAttribute("data-type")) {
                        case 'range':
                            label.appendChild(newRangeValue(control));
                            control.appendChild(newRange(control));
                            break;
                        case 'interval':
                            let min, max, minV, maxV, offset1, offset2;
                            min = control.getAttribute("data-min");
                            max = control.getAttribute("data-max");
                            minV = control.getAttribute("data-min-value");
                            maxV = control.getAttribute("data-max-value");

                            let data = getIntervalValuesFromSettings(control.getAttribute("data-name"));
                            if (data.length) {
                                minV = data[0];
                                maxV = data[1];
                                control.setAttribute("data-min-value", minV);
                                control.setAttribute("data-max-value", maxV);
                            }

                            offset1 = width * ((minV - min) / (max - min));
                            offset2 = width * ((maxV - min) / (max - min));
                            values = document.createElement("div");
                            values.classList.add("values");
                            value = document.createElement("input");
                            value.setAttribute("type", "number");
                            value.classList.add("value", "min");
                            value.value = minV;
                            value.setAttribute("min", min);
                            value.setAttribute("max", max);
                            values.appendChild(value);
                            value = document.createElement("input");
                            value.setAttribute("type", "number");
                            value.classList.add("value", "max");
                            value.value = maxV;
                            value.setAttribute("min", min);
                            value.setAttribute("max", max);
                            values.appendChild(value);
                            label.appendChild(values);
                            const interval = document.createElement("div");
                            interval.classList.add("interval");
                            const bar = document.createElement("div");
                            bar.classList.add("bar");
                            const between = document.createElement("div");
                            between.classList.add("between");
                            between.setAttribute("style", "left: " + (offset1 + 8).toString() + "px; width: " + (offset2 - offset1).toString() + "px;");
                            const handleMin = document.createElement("div");
                            handleMin.classList.add("handle", "min");
                            handleMin.setAttribute("style", "left: " + offset1.toString() + "px");
                            handleMin.setAttribute("draggable", "true");
                            handleMin.addEventListener("dragstart", updateIntervalValues);
                            handleMin.ondragstart = () => {
                                return false;
                            }
                            const handleMax = document.createElement("div");
                            handleMax.classList.add("handle", "max");
                            handleMax.setAttribute("style", "left: " + offset2.toString() + "px");
                            handleMax.setAttribute("draggable", "true");
                            handleMax.addEventListener("dragstart", updateIntervalValues);
                            handleMax.ondragstart = () => {
                                return false;
                            }
                            bar.appendChild(between);
                            bar.appendChild(handleMin);
                            bar.appendChild(handleMax);
                            interval.appendChild(bar);
                            control.appendChild(interval);
                            break;
                    }
                });

                const switcher = animation.querySelector("h4").querySelector("input");
                switcher.addEventListener("change", switchLeaves);

                const settingsToggler = animation.querySelector("h4").querySelector(".anim-settings-toggler");
                settingsToggler.addEventListener("click", () => {
                    animation.querySelector(".anim-settings").classList.toggle("hide")
                },);

                const save = animation.querySelector(".save").querySelector("button");
                save.addEventListener("click", saveLeaves);
            });
        }

        function newRangeValue(control) {
            let val = control.getAttribute("data-value"),
                min = control.getAttribute("data-min"),
                max = control.getAttribute("data-max");

            let data = getRangeValueFromSettings(control.getAttribute("data-name"));
            if (data) {
                val = data;
                control.setAttribute("data-value", val);
            }

            let values = document.createElement("div");
            values.classList.add("values");
            let value = document.createElement("input");
            value.setAttribute("type", "number");
            value.classList.add("value");
            value.value = val;
            value.setAttribute("min", min);
            value.setAttribute("max", max);
            value.addEventListener("change", updateRange);
            values.appendChild(value);

            return values;
        }

        function newRange(control) {
            let val = control.getAttribute("data-value"),
                min = control.getAttribute("data-min"),
                max = control.getAttribute("data-max");
            const range = document.createElement("input");

            let data = getRangeValueFromSettings(control.getAttribute("data-name"));
            if (data) {
                val = data;
                control.setAttribute("data-value", val);
            }

            range.setAttribute("type", "range");
            range.setAttribute("min", min);
            range.setAttribute("max", max);
            range.setAttribute("value", val);
            range.value = val;
            range.addEventListener("change", updateRangeValue)
            return range;
        }

        function getRangeValueFromSettings(name) {
            if (leaf_settings.length === 0) return false;
            let n = leaf_settings.length;
            for (let i = 0; i < n; i++) {
                let slider = leaf_settings[i];
                if (slider.type === "range") {
                    if (slider.name === name) {
                        return slider.data;
                    }
                }
            }
            return false;
        }

        function getIntervalValuesFromSettings(name) {
            if (leaf_settings.length === 0) return [];
            let n = leaf_settings.length;
            for (let i = 0; i < n; i++) {
                let slider = leaf_settings[i];
                if (slider.type === "interval") {
                    if (slider.name === name) {
                        return slider.data;
                    }
                }
            }
            return [];
        }

        function updateRange(evt) {
            evt.preventDefault();
            const input = evt.target;
            let value = input.value;
            const min = input.getAttribute("min");
            const max = input.getAttribute("max");
            if (value < min) {
                value = min;
                input.value = min;
            }
            if (value > max) {
                value = max;
                input.value = max;
            }
            const slider = input.closest(".slider");
            const range = slider.querySelector(".control").querySelector("input");
            range.value = value;
            slider.querySelector(".control").setAttribute("data-value", value);
            return false;
        }

        function updateRangeValue(evt) {
            console.log(evt.target);
            evt.preventDefault();
            const inputRange = evt.target;
            let value = inputRange.value;
            const slider = inputRange.closest(".slider");
            slider.querySelector(".label").querySelector("input").value = value;
            slider.querySelector(".control").setAttribute("data-value", value);
        }

        function updateIntervalValues(evt) {

            evt.preventDefault();
            const handle = evt.target;
            const interval = handle.closest(".interval");
            const control = handle.closest(".control");
            const between = interval.querySelector(".between");
            const handleMin = control.querySelector(".handle.min");
            const handleMax = control.querySelector(".handle.max");
            const min = control.getAttribute("data-min");
            const max = control.getAttribute("data-max");
            const width = interval.offsetWidth;
            const shiftX = evt.clientX - handle.getBoundingClientRect().left;

            handle.classList.add("drag");
            document.addEventListener('mousemove', onMouseMove);
            document.addEventListener('mouseup', onMouseUp);

            function onMouseMove(evt) {
                let newLeft = evt.clientX - shiftX - interval.getBoundingClientRect().left;

                if (newLeft < 0) {
                    newLeft = 0;
                }
                let rightEdge = interval.offsetWidth - handle.offsetWidth;
                if (newLeft > rightEdge) {
                    newLeft = rightEdge;
                }

                handle.style.left = newLeft + 'px';

                const newValue = parseInt(min) + Math.floor((max - min) * (newLeft / (width - 16)));

                if (evt.target.classList.contains("min")) {
                    control.setAttribute("data-min-value", newValue);
                    const inputMinValue = control.closest(".slider").querySelector(".label").querySelector(".value.min");
                    inputMinValue.value = newValue.toString();
                    between.style.left = (newLeft + 8) + 'px';
                    between.setAttribute("style", "left: " + Math.floor(parseInt(handleMin.style.left) + 8) + "px; width: " + Math.floor(parseInt(handleMax.style.left) - parseInt(handleMin.style.left)) + "px;");
                }
                if (evt.target.classList.contains("max")) {
                    control.setAttribute("data-max-value", newValue);
                    const inputMaxValue = control.closest(".slider").querySelector(".label").querySelector(".value.max");
                    inputMaxValue.value = newValue.toString();
                    between.setAttribute("style", "left: " + Math.floor(parseInt(handleMin.style.left) + 8) + "px; width: " + Math.floor(parseInt(handleMax.style.left) - parseInt(handleMin.style.left)) + "px;");
                }
            }

            function onMouseUp() {
                handle.classList.remove("drag");
                document.removeEventListener('mouseup', onMouseUp);
                document.removeEventListener('mousemove', onMouseMove);
            }
        }

        function switchLeaves(evt) {
            const check = evt.target;
            if (check.checked) {
                startLeaves();
            } else {
                stopLeaves();
            }
        }

        function startLeaves() {
            const pCount = 20;
            const body = document.body;
            const html = document.documentElement;
            const height = Math.max(body.getBoundingClientRect().height, html.getBoundingClientRect().height);
            console.log({html})

            for (let i = 0; i < pCount; i++) {
                let particule = {interval: 0, loop: 1, frame: 0, maxF: 0, maxY: 0, div: undefined, bg: "b0", x: 0, dx: 0, y: 0, dy: 0, initialAngle: 0, turnPerSeconde: 0, scale: 1};
                particule.div = document.createElement("div");
                particule.div.classList.add("particule");
                particule.div.classList.add("b0");
                initParticule(particule);
                particule.maxY = html.scrollHeight + 200;

                particule.div.setAttribute("style", "translate: " + particule.x + "px " + particule.y + "px; rotate: " + particule.initialAngle + "deg; scale: " + particule.scale);

                particule.interval = setInterval(animateParticule, 1000, particule);
                leaf_particules[i] = particule;

                document.querySelector("body").appendChild(particule.div);
            }
        }

        function stopLeaves() {
            console.log({leaf_particules});

            for (let i = 0; i < leaf_particules.length; i++) {
                if (leaf_particules[i].interval > -1) {
                    clearInterval(leaf_particules[i].interval);
                    leaf_particules[i].interval = -1;
                }
                leaf_particules[i].div.remove();
                leaf_particules[i] = {interval: 0, loop: 1, frame: 0, maxF: 0, maxY: 0, div: undefined, bg: "b0", x: 0, dx: 0, y: 0, dy: 0, initialAngle: 0, turnPerSeconde: 0, scale: 1};
            }
        }

        function saveLeaves(evt) {
            const save = evt.target;
            const animation = save.closest(".animation");
            const sliders = animation.querySelectorAll(".slider");
            let data = [], settings = {name: "leaf", data: []};

            sliders.forEach(slider => {
                const control = slider.querySelector(".control");
                let dataSlider = {name: control.getAttribute("data-name"), type: control.getAttribute("data-type")};
                if (dataSlider.type === "range") {
                    dataSlider.data = control.getAttribute("data-value");
                }
                if (dataSlider.type === "interval") {
                    dataSlider.data = [control.getAttribute("data-min-value"), control.getAttribute("data-max-value")];
                }
                data.push(dataSlider);
            });
            settings.data = data;
            console.log({settings});

            const xhr = new XMLHttpRequest();
            xhr.onload = function () {
                notifyMe(JSON.parse(this.response));
            }
            xhr.open("GET", _app_serie_set_settings + "?data=" + JSON.stringify(settings));
            xhr.send();
        }

        function animateParticule(p) {
            p.frame++;
            p.y += p.dy;

            p.div.setAttribute("style", "translate: " + p.x + "px " + p.y + "px; rotate: calc(" + p.initialAngle + "deg + " + (p.frame * p.turnPerSeconde) + "turn); scale: " + p.scale);

            if (p.y > p.maxY + 100) {
                clearInterval(p.interval);
                p.interval = -1
                p.div.classList.add("reboot");
                p.loop++;
                initParticule(p);
                p.div.setAttribute("style", "translate: " + p.x + "px " + p.y + "px; rotate: calc(" + p.initialAngle + "deg + " + (p.frame * p.turnPerSeconde) + "turn); scale: " + p.scale);
                p.interval = setInterval(animateParticule, 1000, p);
                setTimeout(() => p.div.classList.remove("reboot"), 50);
            } else {
                if (p.frame > p.maxF) {
                    clearInterval(p.interval);
                    p.interval = -1;
                    p.div.classList.add("re-new");
                    setTimeout(() => {
                        p.div.classList.add("reboot");
                        p.div.classList.toggle("new");
                        p.loop = 1;
                        initParticule(p);
                        p.div.setAttribute("style", "translate: " + p.x + "px " + p.y + "px; rotate: calc(" + p.initialAngle + "deg + " + (p.frame * p.turnPerSeconde) + "turn); scale: " + p.scale);
                        p.interval = setInterval(animateParticule, 1000, p);
                        setTimeout(() => {
                            p.div.classList.remove("reboot");
                            p.div.classList.remove("re-new");
                        }, 50);
                    }, 800);
                }
            }
        }

        function initParticule(p) {
            p.frame = 0;
            p.maxF = 120 + (Math.random() * 240);
            p.x = Math.random() * (window.scrollX + window.innerWidth);
            p.y = -50 - Math.random() * (300);
            p.dx = Math.random() * 100;
            p.dy = Math.random() * 100;
            p.initialAngle = Math.random() * 360;
            p.turnPerSeconde = Math.random() * .25;
            p.scale = .25 + (Math.random() * 1.25);

            p.div.classList.remove(p.bg);
            p.bg = "b" + (Math.ceil(42 * Math.random())).toString();
            p.div.classList.add(p.bg);
        }

        function initSettings() {
            //
            // Settings
            //
            const apply = document.querySelector("#apply");
            let per_page = {
                'input': document.querySelector(".per-page").querySelector("input"),
                'value': document.querySelector(".per-page").querySelector(".value"),
                'data': [10, 20, 50, 100]
            }
            let order_by = {
                'input': document.querySelector(".order-by").querySelector("select"),
            }
            let order = {
                'input': document.querySelector(".order").querySelector("select"),
            }
            per_page.input.addEventListener("click", () => {
                per_page.value.innerHTML = per_page.data[per_page.input.value - 1].toString();
            })
            per_page.input.addEventListener("mousemove", () => {
                per_page.value.innerHTML = per_page.data[per_page.input.value - 1].toString();
            })
            order_by.input.addEventListener("change", () => {
                console.log(order_by.input.value)
            })
            order.input.addEventListener("change", () => {
                console.log(order.input.value)
            })
            apply.addEventListener("click", () => {
                window.location.href = "{{ path('app_serie_index') }}?p=1&pp=" + per_page.data[per_page.input.value - 1].toString() + "&ob=" + order_by.input.value + "&o=" + order.input.value + "&s=1";
            })
        }

        function initPreview() {

            const preview = document.querySelector(".new-serie-preview");
            const close = preview.querySelector(".close");

            preview.addEventListener("click", dismissPreview);
            close.addEventListener("click", dismissPreview);
        }

        function dismissPreview() {
            const preview = document.querySelector(".new-serie-preview");
            const message = preview.querySelector(".message").querySelector(".content");
            const wrapper = preview.querySelector(".wrapper");

            setTimeout(() => {
                preview.classList.remove("visible");
            }, 0);
            wrapper.innerHTML = "";
            message.innerHTML = "";
            document.querySelector("#new_serie").focus();
        }

        function newSerie() {
            document.querySelector("#new_serie").focus();
            document.querySelector("#new_serie").addEventListener("paste", addSerie);
            document.querySelector("#add_serie").addEventListener("click", addSerie);

            document.querySelector("#new_serie").addEventListener("keyup", function (event) {
                if (event.key === "Enter") {
                    addSerie(event);
                }
            })
        }

        function addSerie(evt) {
            let value = "";

            if (evt.type === "click" || evt.type === 'keyup') {
                value = document.querySelector("#new_serie").value;
            }
            if (evt.type === "paste") {
                value = evt.clipboardData.getData('text/plain');
            }
            // evt.preventDefault()

            if (value.length) {
                const xhr = new XMLHttpRequest();
                xhr.onload = function () {
                    let data = {
                        'serie': '',
                        'status': '',
                        'response': '',
                        'id': '',
                        'card': {},
                        'pagination': {}
                    };
                    if (this.response.slice(0, 1) === '<') {
                        data = this.response;
                    } else {
                        data = JSON.parse(this.response);
                        if (data.status === 'Ok') {
                            const preview = document.querySelector(".new-serie-preview");
                            const message = preview.querySelector(".message").querySelector(".content");
                            const wrapper = preview.querySelector(".wrapper");

                            wrapper.innerHTML = data.card.content;

                            if (data.response === "New") {
                                message.innerHTML = "{{ 'New serie added'|trans }}";
                            }
                            if (data.response === "Update") {
                                message.innerHTML = "{{ 'Serie updated'|trans }}";
                            }
                            setTimeout(() => {
                                preview.classList.add("visible");
                            }, 0);

                            /*
                             * Si on est sur la première page avec le tri par "ordre d'ajout décroissant",
                             * alors on insère la nouvelle série au début
                             */
                            if (data.response === "New" && _current_page === 1 && _order_by === 'id' && _order === 'desc') {
                                const wrapper = document.querySelector(".series").querySelector(".wrapper");
                                const first = wrapper.firstElementChild;
                                const last = wrapper.lastElementChild;
                                const new_card = document.createRange().createContextualFragment(data.card.content);

                                first.before(new_card);
                                last.remove();
                            }
                            /*
                             * Mise à jour des blocs Pagination
                             */
                            const tools = document.querySelectorAll(".series-tools");
                            tools.forEach(tool => {
                                let pagination = tool.querySelector(".pages");
                                pagination.innerHTML = data.pagination.content;
                            })
                        }

                        if (data.status === "Ko") {
                            alert("{{ 'Serie not found'|trans }} (ID: " + data.id + ")");
                        }
                    }
                    document.querySelector("#new_serie").value = "";
                }
                xhr.open("GET", _app_serie_new + '?value=' + value + "&p=" + _current_page + "&pp=" + _per_page + "&ob=" + _order_by + "&o=" + _order);
                xhr.send();
            }
        }

        function autocomplete(input, list) {
            /*the autocomplete function takes two arguments,
            the text field element and an array of possible autocompleted values:*/
            let currentFocus;

            setInterval(function () {
                let id = parseInt(document.querySelector("#search-id").value);
                if (id === -1) {
                    document.querySelector("#search_serie").classList.add("disabled");
                } else {
                    document.querySelector("#search_serie").classList.remove("disabled");
                }
            }, 100);

            document.querySelector("#search_serie").addEventListener("click", () => {
                let id = parseInt(document.querySelector("#search-id").value);
                if (id === -1) {
                    return;
                }
                let url = "{{ path('app_serie_show', {id: 0}) }}";
                url = url.substring(0, url.length - 1);
                window.location = url + id + "?p={{ pages.page }}&from={{ from }}";
            })

            /*execute a function when someone writes in the text field:*/
            input.addEventListener("input", function (e) {
                let a, b, i, val;
                val = e.target.value;
                /*close any already open lists of autocompleted values*/
                closeAllLists();
                document.querySelector("#search-id").value = -1;
                if (!val) {
                    return false;
                }
                currentFocus = -1;
                /*create a DIV element that will contain the items (values):*/
                a = document.createElement("div");
                a.setAttribute("id", e.target.id + "-autocomplete-list");
                a.classList.add("autocomplete-items");
                /*append the DIV element as a child of the autocomplete container:*/
                this.parentNode.appendChild(a);
                /*for each item in the array...*/
                for (i = 0; i < list.length; i++) {
                    /*check if the item starts with the same letters as the text field value:*/
                    let ok_name = list[i].name.substring(0, val.length).toUpperCase() === val.toUpperCase();
                    let ok_original = list[i].original.substring(0, val.length).toUpperCase() === val.toUpperCase();
                    if (ok_name || ok_original) {
                        /*create a DIV element for each matching element:*/
                        b = document.createElement("div");
                        /*make the matching letters bold:*/
                        if (ok_name) {
                            b.innerHTML = "<strong>" + list[i].name.substr(0, val.length) + "</strong>";
                            b.innerHTML += list[i].name.substring(val.length);
                        } else {
                            b.innerHTML = "<strong>" + list[i].original.substring(0, val.length) + "</strong>";
                            b.innerHTML += list[i].original.substring(val.length);
                        }
                        /*insert an input field that will hold the current array item's value:*/
                        b.innerHTML += "<input id='item-" + i + "-id' type='hidden' value='" + list[i].id + "'>";
                        b.innerHTML += "<input id='item-" + i + "-name' type='hidden' value='" + list[i].name + "'>";
                        /*execute a function when someone clicks on the item value (DIV element):*/
                        b.addEventListener("click", function () {
                            /*insert the value for the autocomplete text field:*/
                            input.value = this.getElementsByTagName("input")[1].value;
                            document.querySelector("#search-id").value = this.getElementsByTagName("input")[0].value;
                            /*close the list of autocompleted values,
                            (or any other open lists of autocompleted values:*/
                            closeAllLists();
                        });
                        a.appendChild(b);
                    }
                }
            });
            /*execute a function presses a key on the keyboard:*/
            input.addEventListener("keydown", function (e) {
                let x = document.getElementById(this.id + "-autocomplete-list");
                if (x) x = x.getElementsByTagName("div");
                if (e.keyCode === 40) { /* arrow DOWN key */
                    currentFocus++;
                    addActive(x);
                } else if (e.keyCode === 38) { /* arrow UP key */
                    currentFocus--;
                    addActive(x);
                } else if (e.keyCode === 13) { /* the ENTER key */
                    e.preventDefault();
                    if (currentFocus > -1) {
                        if (x) x[currentFocus].click();
                    }
                }
            });

            function addActive(x) {
                if (!x) return false;
                /*start by removing the "active" class on all items:*/
                removeActive(x);
                if (currentFocus >= x.length) currentFocus = 0;
                if (currentFocus < 0) currentFocus = (x.length - 1);
                /*add class "autocomplete-active":*/
                x[currentFocus].classList.add("autocomplete-active");
            }

            function removeActive(x) {
                /*a function to remove the "active" class from all autocomplete items:*/
                for (let i = 0; i < x.length; i++) {
                    x[i].classList.remove("autocomplete-active");
                }
            }

            function closeAllLists(element) {
                /*close all autocomplete lists in the document,
                except the one passed as an argument:*/
                let x = document.getElementsByClassName("autocomplete-items");
                for (let i = 0; i < x.length; i++) {
                    if (element !== x[i] && element !== input) {
                        x[i].parentNode.removeChild(x[i]);
                    }
                }
            }

            /*execute a function when someone clicks in the document:*/
            document.addEventListener("click", (e) => {
                closeAllLists(e.target);
            });
        }

        function createList() {
            let list = [{id: 0, name: '', original: ''}];

            {% for serie in list %}
            list[{{ loop.index0 }}] = {'id': {{ serie.id }}, 'name': "{{ serie.name }}", 'original': "{{ serie.original }}"};
            {% endfor %}

            return list;
        }

        function getLeafSettings() {
            let settings = [], settingR, settingI;
            {% for slider in leafSettings.data %}
            {% if slider.type == "range" %}
            settingR = {data: 0, name: "", type: ""};
            settingR.data = {{ slider.data }};
            settingR.name = "{{ slider.name }}";
            settingR.type = "{{ slider.type }}";
            settings.push(settingR);
            {% endif %}
            {% if slider.type == "interval" %}
            settingI = {data: [0, 0], name: "", type: ""};
            settingI.data = [{{ slider.data.0 }},{{ slider.data.1 }}];
            settingI.name = "{{ slider.name }}";
            settingI.type = "{{ slider.type }}";
            settings.push(settingI);
            {% endif %}
            {% endfor %}
            return settings;
        }

        function notifyMe(message) {
            // Vérifions si le navigateur prend en charge les notifications
            if (!('Notification' in window)) {
                alert('Ce navigateur ne prend pas en charge la notification de bureau')
            }

            // Vérifions si les autorisations de notification ont déjà été accordées
            else if (Notification.permission === 'granted') {
                // Si tout va bien, créons une notification
                const notification = new Notification(message)
            }

            // Sinon, nous devons demander la permission à l'utilisateur
            else if (Notification.permission !== 'denied') {
                Notification.requestPermission().then((permission) => {
                    // Si l'utilisateur accepte, créons une notification
                    if (permission === 'granted') {
                        const notification = new Notification(message)
                    }
                })
            }

            // Enfin, si l'utilisateur a refusé les notifications, et que vous
            // voulez être respectueux, il n'est plus nécessaire de les déranger.
        }
    </script>
{% endblock %}