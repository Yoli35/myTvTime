{% extends 'base.html.twig' %}

{% block title %}
    MyTvTime::{{ 'Series search'|trans }}
{% endblock %}

{% block body %}
    {{ include('blocks/pageHeader.html.twig') }}
    <div class="container">
        <div class="series-search">
            <div class="header">
                <h1>{{ 'Series search'|trans }}</h1>
                {% if quote is defined %}
                    <div class="quote"><div>{{ quote }}</div></div>
                {% endif %}
                <div class="backdrop"></div>
            </div>
            {{ include('blocks/nav.html.twig', {thisPage: 'Series search'}) }}
            <div class="search">
                {{ form_start(form) }}
                <div class="input-group input-group-sm mb-3">
                    <span class="input-group-text" id="basic-addon1"><i class="bi bi-search"></i></span>
                    {{ form_widget(form.query, {'attr': {'class': 'form-control', 'value': query}}) }}
                    {{ form_widget(form.year, {'attr': {'class': 'form-control', 'value': year}}) }}
                    {{ form_widget(form.save, { 'attr': {'class': 'btn btn-secondary'} }) }}
                </div>
                {{ form_end(form) }}
            </div>
            {% if series|length %}
                <div class="series">
                    <div class="series-tools mobile">
                        <div class="pages mobile">
                            {{ include('blocks/serie/pagination-search.html.twig') }}
                        </div>
                    </div>
                    <div class="wrapper">
                        {% for serie in series %}
                            {{ include('blocks/serie/card-search.html.twig') }}
                        {% endfor %}
                    </div>
                    <div class="series-tools">
                        <div class="pages">
                            {{ include('blocks/serie/pagination-search.html.twig') }}
                        </div>
                    </div>
                </div>
            {% endif %}
        </div>
        {{ include('blocks/pageFooter.html.twig') }}
    </div>
{% endblock %}

{% block morejs %}
{#
    <script>
        window.addEventListener("DOMContentLoaded", () => {

            initHeader();
        })

        function initHeader() {
            let ticking = false;
            setH1();
            window.addEventListener('resize', setH1);

            window.addEventListener('scroll', () => {
                if (!ticking) {
                    window.requestAnimationFrame(function () {
                        setH1();
                        ticking = false;
                    });
                }
                ticking = true;
            });

        }

        function setH1() {
            const header = document.querySelector(".header");
            const h1 = document.querySelector("h1");
            let left, ratio, top;
            ratio = (header.clientHeight - window.scrollY) / header.clientHeight;
            left = (header.clientWidth - h1.clientWidth) / 2;
            top = ((header.clientHeight + window.scrollY) - h1.clientHeight) / 2;
            if (ratio < 0) ratio = 0;
            if (ratio > 1) ratio = 1;
            h1.setAttribute("style", "left: " + left.toString() + "px; top: " + top.toString() + "px; opacity: " + ratio + "; transform: scale(" + (1 + (5 * (1 - ratio))) + ")");
        }
    </script>
#}
    <script src="/js/serie.js"></script>
    <script>
        const paths = [
            "{{ path('app_serie_render_translation_fields') }}",
            "{{ path('app_serie_render_translation_select') }}",
            "{{ path('app_serie_render_translation_save') }}",
            "{{ path('app_serie_new') }}"
        ];

        window.addEventListener("DOMContentLoaded", () => {

            initHeader();
            initSerieStuff(paths);
        })

        function initHeader() {
            let ticking = false;
            let letters, animatedH1;

            animatedH1 = document.createElement("div");
            animatedH1.classList.add("animated-h1");
            animatedH1 = document.querySelector(".header").insertBefore(animatedH1, document.querySelector(".backdrop"));
            letters = document.querySelector("h1").innerText.split('');

            document.querySelector("h1").innerText = "";

            letters.forEach( letter => {
                let part = document.createElement("div");
                part.classList.add("part");
                if (letter === " ") {
                    part.innerHTML = "&nbsp;"
                } else {
                    part.innerText = letter;
                }
                animatedH1.appendChild(part);
            })
            setH1();
            window.addEventListener('resize', setH1);

            window.addEventListener('scroll', () => {
                if (!ticking) {
                    window.requestAnimationFrame(function () {
                        setH1();
                        ticking = false;
                    });
                }
                ticking = true;
            });

        }

        function setH1() {
            const header = document.querySelector(".header");
            const h1 = document.querySelector(".animated-h1");
            const parts = h1.querySelectorAll(".part");
            let left, ratio, top;
            ratio = (header.clientHeight - window.scrollY) / header.clientHeight;
            left = (header.clientWidth - h1.clientWidth) / 2;
            top = ((header.clientHeight + window.scrollY) - h1.clientHeight) / 2;
            if (ratio < 0) ratio = 0;
            if (ratio > 1) ratio = 1;
            parts.forEach(part => {
                part.setAttribute("style", "transform: rotate(" + (360 * ratio) + "deg);");
            })
            h1.setAttribute("style", "left: " + left.toString() + "px; top: " + top.toString() + "px; opacity: " + ratio + "; transform: scale(" + (1 + (5 * (1 - ratio))) + ")");
        }
    </script>
{% endblock %}