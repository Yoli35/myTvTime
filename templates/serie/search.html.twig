{% extends 'base.html.twig' %}

{% block title %}
    MyTvTime::{{ 'Series search'|trans }}
{% endblock %}

{% block body %}
    {{ include('blocks/_mainMenu.html.twig') }}
    <div class="container">
        <div class="series-search">
            <div class="header">
                {{ include('blocks/serie/_quotes.html.twig') }}
                <h1>{{ 'Series search'|trans }}</h1>
                <div class="backdrop"></div>
            </div>
            {{ include('blocks/_nav.html.twig', {thisPage: 'Series search'}) }}
            <div class="search">
                {{ form_start(form) }}
                {{ form_widget(form.query, {'attr': {'class': 'form-control', 'value': query, 'autofocus': 'autofocus'}}) }}
                {{ form_widget(form.year, {'attr': {'class': 'form-control', 'value': year}}) }}
                {{ form_widget(form.save, { 'attr': {'class': 'btn btn-secondary'} }) }}
                {{ form_end(form) }}
            </div>
            {% if series|length %}
                <div class="series">
                    <div class="series-tools mobile">
                        <div class="pages mobile">
                            {{ include('blocks/serie/_pagination-search.html.twig') }}
                        </div>
                    </div>
                    <div class="wrapper">
                        {% for serie in series %}
                            <div data-type="card">
                                {{ include('blocks/serie/_card-search.html.twig') }}
                            </div>
                        {% endfor %}
                    </div>
                    <div class="series-tools">
                        <div class="pages">
                            {{ include('blocks/serie/_pagination-search.html.twig') }}
                        </div>
                    </div>
                </div>
            {% endif %}
        </div>
        {{ include('blocks/_pageFooter.html.twig') }}
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="/js/serie.js"></script>
    <script>
        const paths = [
            "{{ path('app_serie_render_translation_fields') }}",
            "{{ path('app_serie_render_translation_select') }}",
            "{{ path('app_serie_render_translation_save') }}",
            "{{ path('app_serie_new') }}",
            "{{ path('app_serie_show', {id:0}) }}",
        ];
        let letterRatios = [];

        window.addEventListener("DOMContentLoaded", () => {

            initHeader();
            initPages();
            initSerieStuff(paths);
            animateQuotes();
            document.querySelector("#serie_search_query").focus();
        })

        function initHeader() {
            const h1 = document.querySelector("h1");
            let ticking = false;

            let mask = document.createElement("div");
            mask.classList.add("mask");
            let cursor = document.createElement("div");
            cursor.classList.add("cursor");
            h1.appendChild(mask);
            h1.appendChild(cursor);

            setH1();
            window.addEventListener('resize', setH1);

            window.addEventListener('scroll', () => {
                if (!ticking) {
                    window.requestAnimationFrame(function () {
                        setH1();
                        ticking = false;
                    });
                }
                ticking = true;
            });

        }

        function setH1() {
            const header = document.querySelector(".header");
            const h1 = document.querySelector("h1");
            let left, ratio, top;
            ratio = (header.clientHeight - window.scrollY) / header.clientHeight;
            left = (header.clientWidth - h1.clientWidth) / 2;
            top = ((header.clientHeight + window.scrollY) - h1.clientHeight) / 2;
            if (ratio < 0) ratio = 0;
            if (ratio > 1) ratio = 1;
            h1.setAttribute("style", "left: " + left.toString() + "px; top: " + top.toString() + "px; opacity: " + ratio + "; transform: scale(" + (1 + (5 * (1 - ratio))) + ")");
        }

        let quoteInterval = [2000, 3000, 4000, 5000];
        let quoteIntervalId = [0, 0, 0, 0];
        let quotes = ["", "", "", ""], quoteDivs;

        function initPages() {
            const viewportWidth = document.body.clientWidth;
            if (viewportWidth > 768) {
                const seriesDiv = document.querySelector(".series");
                const seriesToolsDiv = seriesDiv.querySelector(".series-tools:not(.mobile)");
                seriesToolsDiv.classList.add("sticky");
            }
        }

        function animateQuotes() {
            quoteDivs = document.querySelectorAll(".quote");
            let i = 0;

            quoteDivs.forEach(() => {
                quoteIntervalId[i] = setInterval(getQuote, quoteInterval[i], i);
                i++;
            });
        }

        function getQuote(idx) {
            const xhr = new XMLHttpRequest();
            xhr.onload = function () {
                let data = JSON.parse(this.response), str;
                const quoteDiv = quoteDivs[idx];
                str = data['quote'];
                // console.log({str});
                quotes[idx] = str.replace(/(?:\r\n|\r|\n)/g, '<br>');
                quoteInterval[idx] = Math.floor(2000 + (30 * 1000 * Math.random()));

                quoteDiv.classList.add("hidden");
                setTimeout(() => {
                    quoteDiv.querySelector("div").innerHTML = quotes[idx];
                    quoteDiv.classList.remove("hidden");
                    clearInterval(quoteIntervalId[idx]);
                    startInterval(idx, quoteInterval[idx]);
                }, 500);
            }
            xhr.open("GET", '/fr/serie/quote');
            xhr.send();
        }

        function startInterval(idx, duration) {
            quoteIntervalId[idx] = setInterval(getQuote, duration, idx);
        }
    </script>
{% endblock %}