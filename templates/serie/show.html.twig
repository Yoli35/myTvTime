{% extends 'base.html.twig' %}

    {% block title %}
        {% if from == 'popular' %}
            MyTvTime::{{ 'Popular Series'|trans }}::{{ serie.name }}
        {% elseif from == 'top_rated' %}
            MyTvTime::{{ 'Top Rated Series'|trans }}::{{ serie.name }}
        {% elseif from == 'airing_today' %}
            MyTvTime::{{ 'Series Airaing Today'|trans }}::{{ serie.name }}
        {% elseif from == 'on_the_air' %}
            MyTvTime::{{ 'Series On The Air'|trans }}::{{ serie.name }}
        {% elseif from == 'search' %}
            MyTvTime::{{ 'Series search'|trans }}::{{ serie.name }}
        {% else %}
            MyTvTime::{{ 'My Series'|trans }}::{{ serie.name }}
        {% endif %}
    {% endblock %}

{% block body %}
    <div class="bubble">
        <div class="body">{{ 'Episode'|trans }}&nbsp;<span></span></div>
        <div class="tail"></div>
    </div>
    {{ include('blocks/_mainMenu.html.twig') }}
    <div class="container">
        {% if from == 'popular' %}
            {{ include('blocks/_nav.html.twig', {parent: {page: 'Popular Series', url: path('app_serie_popular')~'?p='~page~'#'~serie.id}, thisPage: serie.name}) }}
        {% elseif from == 'top_rated' %}
            {{ include('blocks/_nav.html.twig', {parent: {page: 'Top rated Series', url: path('app_serie_top_rated')~'?p='~page~'#'~serie.id}, thisPage: serie.name}) }}
        {% elseif from == 'airing_today' %}
            {{ include('blocks/_nav.html.twig', {parent: {page: 'Series Airing Today', url: path('app_serie_airing_today')~'?p='~page~'&b=1#'~serie.id}, thisPage: serie.name}) }}
        {% elseif from == 'on_the_air' %}
            {{ include('blocks/_nav.html.twig', {parent: {page: 'Series On The Air', url: path('app_serie_on_the_air')~'?p='~page~'&b=1#'~serie.id}, thisPage: serie.name}) }}
        {% elseif from == 'search' %}
            {{ include('blocks/_nav.html.twig', {parent: {page: 'Series search', url: path('app_serie_search', {page: page})~'?query='~query~'&year='~year~'#'~serie.id}, thisPage: serie.name}) }}
        {% else %}
            {{ include('blocks/_nav.html.twig', {parent: {page: 'My Series', url: path('app_serie_index')~'?p='~page~'&b=1#'~backId}, thisPage: serie.name}) }}
        {% endif %}

        <div class="serie-page">
            <div class="header">
                {% if serie.backdrop_path|length %}
                    <div class="backdrop" style="background-image: url('{{ imageConfig.url ~ imageConfig.backdrop_sizes.3 ~ serie.backdrop_path }}')"></div>
                {% else %}
                    <div class="backdrop" style="background-image: url('/images/default/no_banner_dark.png')"></div>
                {% endif %}
                <div class="poster">
                    {% if serie.poster_path|length %}
                        <img src="{{ imageConfig.url ~ imageConfig.poster_sizes.3 ~ serie.poster_path }}" alt="{{ serie.name }}">
                    {% else %}
                        <img src="/images/default/no_poster.png" alt="{{ serie.name }}">
                    {% endif %}
                    {% if watchProviders %}
                        <div class="watch-providers">
                            {% if watchProviders.flatrate is defined %}
                                {% for flatrate in watchProviders.flatrate %}
                                    <div class="watch-provider">
                                        <div class="logo">
                                            <img src="{{ imageConfig.url ~ imageConfig.logo_sizes.2 ~ flatrate.logo_path }}" alt="{{ flatrate.provider_name }}">
                                        </div>
                                        <div class="watch">
                                            <div>{{ 'Available in streaming'|trans }}</div>
                                            <div><a href="{{ watchProviders.link }}">{{ 'Watch now'|trans }}</a></div>
                                        </div>
                                    </div>
                                {% endfor %}
                            {% endif %}
                            {% if watchProviders.buy is defined %}
                                {% for buy in watchProviders.buy %}
                                    <div class="watch-provider">
                                        <div class="logo">
                                            <img src="{{ imageConfig.url ~ imageConfig.logo_sizes.2 ~ buy.logo_path }}" alt="{{ buy.provider_name }}">
                                        </div>
                                        <div class="watch">
                                            <div>{{ 'Available to rent or buy'|trans }}</div>
                                            <div><a href="{{ watchProviders.link }}">{{ 'Watch now'|trans }}</a></div>
                                        </div>
                                    </div>
                                {% endfor %}
                            {% endif %}
                        </div>
                    {% endif %}
                    <div class="arrow"></div>
                </div>
                <div class="infos">
                    <h1>
                        {{ serie.name }}
                        {% if serie.first_air_date %}
                            <span>({{ serie.first_air_date|date("Y") }})</span>
                        {% else %}
                            — {{ 'No date yet'|trans }}
                        {% endif %}
                    </h1>
                    <div class="info">
                        {% for genre in serie.genres %}
                            {{ genre.name }}{% if loop.last == false %}, {% endif %}
                        {% endfor %}
                        {% if serie.episode_run_time|length %}
                            •
                            {{ serie.episode_run_time.0 }} {{ 'minutes'|trans }}
                        {% endif %}
                    </div>
                    <div class="info">
                        <div class="view-vote">
                            <div class="tagline">{{ serie.tagline }}</div>
                            {% if index is defined %}
                                {% if index %}
                                    <div class="d-flex-1">
                                        <div class="duration-string"></div>
                                        <button id="test" data-id="{{ serieId }}" class="btn btn-primary">{{ 'Time spent watching my series'|trans }}</button>
                                    </div>
                                    <div class="view-count">{{ viewedEpisodes }} {{ (viewedEpisodes>1?'viewed episodes':'viewed episode')|trans }}</div>
                                    <div class="view-average">
                                        <div class="circle">
                                            {% set percent = (viewedEpisodes / serie.number_of_episodes * 100)|round %}
                                            {% if percent > 100 %}
                                                {% set percent = 100 %}
                                            {% endif %}
                                            <div class="percentage">{{ percent }}%</div>
                                        </div>
                                        <div class="circle-start"></div>
                                        <div class="circle-end"></div>
                                    </div>
                                {% endif %}
                            {% endif %}
                            {% if serie.vote_count %}
                                <div class="vote-count">{{ serie.vote_count }} {{ 'votes'|trans }}</div>
                                <div class="vote-average">
                                    <div class="circle">
                                        <div class="percentage">{{ (serie.vote_average * 10)|round }}%</div>
                                    </div>
                                    <div class="circle-start"></div>
                                    <div class="circle-end"></div>
                                </div>
                            {% endif %}
                        </div>
                    </div>
                    <div class="info">
                        {% if serie.overview|length %}
                            <div>{{ serie.overview }}</div>
                        {% endif %}
                    </div>
                    {% if serie.created_by|length %}
                        <div class="creators">
                            {% for c in serie.created_by %}
                                <a href="{{ path('app_people', {id: c.id}) }}">
                                    <div class="creator">
                                        <div class="profile">
                                            {% if c.profile_path %}
                                                <img src="{{ imageConfig.url ~ imageConfig.profile_sizes.2 ~ c.profile_path }}" alt="{{ c.name }}">
                                            {% else %}
                                                <img src="/images/default/no_avatar.png" alt="{{ c.name }}">
                                            {% endif %}
                                        </div>
                                        <div>{{ c.name }}</div>
                                        <div>
                                            {% if c.gender is defined %}
                                                {{ (c.gender==1?'creator.she':'creator.he')|trans }}
                                            {% else %}
                                                {{ 'creation'|trans }}
                                            {% endif %}
                                        </div>
                                    </div>
                                </a>
                            {% endfor %}
                        </div>
                    {% endif %}
                    {% if whatsNew %}
                        <div class="what-s-new">
                            {% if whatsNew.original_name|length %}
                                <div class="new-status">{{ whatsNew.original_name }}</div>
                            {% endif %}
                            {% if whatsNew.status|length %}
                                <div class="new-status">{{ whatsNew.status|trans }}</div>
                            {% endif %}
                            {% if whatsNew.episode %}
                                <div class="new-episode">{{ whatsNew.episode }} {{ ((whatsNew.episode > 1)?'new episodes':'new episode')|trans }}</div>
                            {% endif %}
                            {% if whatsNew.season %}
                                <div class="new-season">{{ whatsNew.season }} {{ ((whatsNew.season > 1)?'new seasons':'new season')|trans }}</div>
                            {% endif %}
                        </div>
                    {% endif %}
                </div>
                {% if user %}
                    {% if index is defined %}
                        {% if index %}
                            <div class="seen" data-id="{{ serie.id }}"><i class="fa-solid fa-circle-check"></i></div>
                        {% else %}
                            <div class="add" data-id="{{ serie.id }}"><i class="fa-solid fa-circle-plus"></i></div>
                        {% endif %}
                    {% endif %}
                {% endif %}
                <div class="ygg">
                    <a href="https://www5.yggtorrent.fi/engine/search?name={{ ygg }}&do=search&order=desc&sort=publish_date" target="_blank">
                        <div></div>
                    </a>
                </div>
                <div class="ygg-original">
                    <a href="https://www5.yggtorrent.fi/engine/search?name={{ yggOriginal }}&do=search&order=desc&sort=publish_date" target="_blank">
                        <div></div>
                    </a>
                </div>
                <div class="tmdb">
                    <a href="https://www.themoviedb.org/tv/{{ serie.id }}" target="_blank" rel="noopener">
                        <div></div>
                    </a>
                </div>
            </div>

            <main>
                <aside class="tablet">
                    {{ include('blocks/serie/_aside.html.twig') }}
                </aside>
                <article>
                    {% if credits %}
                        {% if credits.cast %}
                            {% if credits.cast|length %}
                                <section>
                                    <div class="cast">
                                        <h4>{{ 'Cast'|trans }} ({{ credits.cast|length }})</h4>
                                        <div class="list">
                                            {% for people in credits.cast %}
                                                <a href="{{ path('app_people', {id: people.id}) }}">
                                                    <div class="people">
                                                        <div class="profile">
                                                            {% if people.profile_path %}
                                                                <img src="{{ imageConfig.url ~ imageConfig.profile_sizes.2 ~ people.profile_path }}" alt="{{ people.name }}">
                                                            {% else %}
                                                                <img src="/images/default/no_avatar.png" alt="{{ people.name }}">
                                                            {% endif %}
                                                            {% if people.recurring_character %}
                                                                <div class="status"><i class="fa-solid fa-rotate-right" title="{{ 'Recurring character'|trans }}"></i></div>
                                                            {% endif %}
                                                            {% if people.guest_star %}
                                                                <div class="status"><i class="fa-solid fa-star" title="{{ 'Guest star'|trans }}"></i></div>
                                                            {% endif %}
                                                        </div>
                                                        <div>{{ people.name }}</div>
                                                        {% if people.character is defined %}
                                                            <div>{{ people.character }}</div>
                                                        {% endif %}
                                                        <div>
                                                            {% if people.gender is defined %}
                                                                {{ (people.known_for_department~(people.gender==1?'.she':'.he'))|trans }}
                                                            {% else %}
                                                                {{ people.known_for_department|trans }}
                                                            {% endif %}
                                                        </div>
                                                        <div title="{{ people.episodesString }}">{{ people.episodes }}</div>
                                                    </div>
                                                </a>
                                            {% endfor %}
                                        </div>
                                    </div>
                                </section>
                            {% endif %}
                        {% endif %}
                        {% if credits.crew %}
                            {% if credits.crew|length %}
                                <section>
                                    <div class="cast">
                                        <h4>{{ 'Crew'|trans }} ({{ credits.crew|length }})</h4>
                                        <div class="list">
                                            {% for people in credits.crew %}
                                                <a href="{{ path('app_people', {id: people.id}) }}">
                                                    <div class="people">
                                                        <div class="profile">
                                                            {% if people.profile_path %}
                                                                <img src="{{ imageConfig.url ~ imageConfig.profile_sizes.2 ~ people.profile_path }}" alt="{{ people.name }}">
                                                            {% else %}
                                                                <img src="/images/default/no_avatar.png" alt="{{ people.name }}">
                                                            {% endif %}
                                                        </div>
                                                        <div>{{ people.name }}</div>
                                                        <div>
                                                            {% if people.gender is defined %}
                                                                {{ (people.job~(people.gender==1?'.she':'.he'))|trans }}
                                                            {% else %}
                                                                {{ people.job|trans }}
                                                            {% endif %}
                                                        </div>
                                                    </div>
                                                </a>
                                            {% endfor %}
                                        </div>
                                    </div>
                                </section>
                            {% endif %}
                        {% endif %}
                    {% endif %}
                    <section>
                        <div class="seasons">
                            {% set globalIndex = 1 %}
                            {% for season in serie.seasons %}
                                {% if season.season_number %}
                                    {% set url = path('app_serie_tmdb_season', {id: serie.id, seasonNumber: season.season_number})~'?from='~from~'&p='~page %}
                                    {% if query is defined %} {% set url = url ~ '&query=' ~ query %}{% endif %}
                                    {% if year is defined %} {% set url = url ~ '&year=' ~ year %}{% endif %}
                                    {% if backId is defined %} {% set url = url ~ '&back=' ~ backId %}{% endif %}
                                    <a href="{{ url }}">
                                        <div class="season">
                                            <div class="poster">
                                                {% if season.poster_path|length %}
                                                    <img src="{{ imageConfig.url ~ imageConfig.poster_sizes.3 ~ season.poster_path }}" alt="{{ season.name }}">
                                                {% else %}
                                                    {% if serie.poster_path %}
                                                        <img src="{{ imageConfig.url ~ imageConfig.poster_sizes.3 ~ serie.poster_path }}" alt="{{ season.name }}">
                                                    {% else %}
                                                        <img src="/images/default/no_poster.png" alt="{{ season.name }}">
                                                    {% endif %}
                                                {% endif %}
                                            </div>
                                            <div class="infos">
                                                <h4>{{ season.name }}</h4>
                                                {% if season.air_date %}{{ season.air_date|slice(0,4) }} | {% endif %}
                                                {{ season.episode_count }} {{ ((season.episode_count>1) ? 'episodes' : 'episode')|trans }}
                                                {% if season.seasonViewing is defined %}
                                                    <div class="details" data-season-number="{{ season.season_number }}">
                                                        <div>
                                                            {{ include('blocks/serie/_season_viewing.html.twig', {season: season.seasonViewing}) }}
                                                        </div>
                                                    </div>
                                                {% endif %}
                                                {% if season.overview|length %}
                                                    <div>{{ season.overview }}</div>
                                                {% endif %}
                                                {% if season.air_date %}
                                                    <div>
                                                        {% if season.air_date < 'now'|date("Y-m-d") %}
                                                            {{ 'The season season_number of serie_name aired from season_air_date.'|trans({"season_number": season.season_number, "serie_name": serie.name, "season_air_date": (season.air_date|format_date('medium'))}) }}
                                                        {% elseif season.air_date > 'now'|date("Y-m-d") %}
                                                            {{ 'The season season_number of serie_name will be aired from the season_air_date.'|trans({"season_number": season.season_number, "serie_name": serie.name, "season_air_date": (season.air_date|format_date('medium'))}) }}
                                                        {% else %}
                                                            {{ 'The season season_number of serie_name is aired from today.'|trans({"season_number": season.season_number, "serie_name": serie.name}) }}
                                                        {% endif %}
                                                    </div>
                                                {% endif %}
                                            </div>
                                        </div>
                                    </a>
                                    {% set globalIndex = globalIndex + season.episode_count %}
                                {% endif %}
                            {% endfor %}
                        </div>
                    </section>
                    {% if images.backdrops|length or images.logos|length or images.posters|length %}
                        <section>
                            <div class="images">
                                <h4>{{ 'Images'|trans }}</h4>
                                {% if images.backdrops|length %}
                                    <h5>{{ 'Backdrops'|trans }}</h5>
                                    <div>
                                        {% for backdrop in images.backdrops %}
                                            <img class="backdrop" src="{{ imageConfig.url ~ imageConfig.backdrop_sizes.3 ~ backdrop.file_path }}" alt="Some backdrop">
                                        {% endfor %}
                                    </div>
                                {% endif %}
                                {% if images.logos|length %}
                                    <h5>{{ 'Logos'|trans }}</h5>
                                    <div class="d-flex f-wrap f-gap-1">
                                        <div class="logo-bg-dark">
                                            {% for logo in images.logos %}
                                                <img class="logo" src="{{ imageConfig.url ~ imageConfig.logo_sizes.3 ~ logo.file_path }}" alt="Some logo">
                                            {% endfor %}
                                        </div>
                                        <div class="logo-bg-light">
                                            {% for logo in images.logos %}
                                                <img class="logo" src="{{ imageConfig.url ~ imageConfig.logo_sizes.3 ~ logo.file_path }}" alt="Some logo">
                                            {% endfor %}
                                        </div>
                                    </div>
                                {% endif %}
                                {% if images.posters|length %}
                                    <h5>{{ 'Posters'|trans }}</h5>
                                    <div>
                                        {% for poster in images.posters %}
                                            <img class="poster" src="{{ imageConfig.url ~ imageConfig.poster_sizes.3 ~ poster.file_path }}" alt="Some poster">
                                        {% endfor %}
                                    </div>
                                {% endif %}
                            </div>
                        </section>
                    {% endif %}
                    {% if serie.videos|length %}
                        {% if serie.videos.results|length %}
                            <section>
                                <div class="videos">
                                    <h4>{{ 'Videos'|trans }}</h4>
                                    <div>
                                        {% for video in serie.videos.results %}
                                            <div class="video">
                                                <h5>{{ video.type }}</h5>
                                                <h6>{{ 'Published at'|trans }} {{ video.published_at|format_datetime() }}</h6>
                                                <iframe src="https://www.youtube.com/embed/{{ video.key }}" title="{{ video.name }}" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
                                            </div>
                                        {% endfor %}
                                    </div>
                                </div>
                            </section>
                        {% endif %}
                    {% endif %}
                </article>
                <aside class="desktop">
                    {{ include('blocks/serie/_aside.html.twig') }}
                </aside>
            </main>
            <div class="translationModalBack">
                <div class="translationModal">
                    <div class="trans-header">
                        <h4>{{ 'Translate new keywords'|trans }}</h4>
                    </div>
                    <div class="trans-content"></div>
                    <div class="trans-footer">
                        <button type="button" aria-label="{{ 'Cancel'|trans }}" aria-roledescription="{{ 'Cancel and close the dialog'|trans }}">{{ 'Cancel'|trans }}</button>
                        <button type="submit" aria-label="{{ 'Translate'|trans }}" aria-roledescription="{{ 'Add translated keywords, close the dialog and reload the page'|trans }}">{{ 'Translate'|trans }}</button>
                    </div>
                </div>
            </div>
        </div>
        {{ include('blocks/_pageFooter.html.twig') }}
    </div>
    <dialog class="viewed-update">
        <div class="loading">
            <div class="dot"></div>
            <div class="dot"></div>
            <div class="dot"></div>
        </div>
    </dialog>
    <dialog class="viewed-update-db-world">
        <div class="loading">
            <div class="world"><i class="fa-solid fa-globe"></i></div>
            <div class="arrows"><i class="fa-solid fa-arrow-up"></i></div>
            <div class="db"><i class="fa-solid fa-database"></i></div>
        </div>
    </dialog>
    <dialog class="viewed-episode">
        <div class="overlay">
            <div class="header">
                {{ 'Where did you watched it?'|trans }}
                <button value="nope" class="close"><i class="fa-solid fa-circle-xmark"></i></button>
            </div>
            <div class="content">
                <div class="networks">
                    <div class="wrapper">
                        {% for network in serie.networks %}
                            <div class="network" data-type="network" data-id="{{ network.id }}">
                                <div class="logo" style="background-image: url('{{ imageConfig.url ~ imageConfig.logo_sizes.2 ~ network.logo_path }}')"></div>
                                <div class="label">{{ network.name }}</div>
                            </div>
                        {% endfor %}
                        {% if watchProviders.flatrate is defined %}
                            {% for flatrate in watchProviders.flatrate %}
                                <div class="network" data-type="flatrate" data-id="{{ flatrate.provider_id }}">
                                    <div class="logo" style="background-image: url('{{ imageConfig.url ~ imageConfig.logo_sizes.2 ~ flatrate.logo_path }}')"></div>
                                    <div class="label">{{ flatrate.provider_name }}</div>
                                </div>
                            {% endfor %}
                        {% endif %}
                        {% if watchProviders.buy is defined %}
                            {% for buy in watchProviders.buy %}
                                <div class="network" data-type="buy" data-id="{{ buy.provider_id }}">
                                    <div class="logo" style="background-image: url('{{ imageConfig.url ~ imageConfig.logo_sizes.2 ~ buy.logo_path }}')"></div>
                                    <div class="label">{{ buy.provider_name }}</div>
                                </div>
                            {% endfor %}
                        {% endif %}
                        <div class="network" data-type="other">
                            <div class="logo other"></div>
                            <div class="label">{{ 'Other'|trans }}</div>
                        </div>
                    </div>
                </div>
                <div class="devices">
                    <div class="choice">
                        <div class="device desktop" data-type="desktop"></div>
                        <div class="label">{{ 'Desktop'|trans }}</div>
                    </div>
                    <div class="choice">
                        <div class="device laptop" data-type="laptop"></div>
                        <div class="label">{{ 'Laptop'|trans }}</div>
                    </div>
                    <div class="choice">
                        <div class="device phone" data-type="phone"></div>
                        <div class="label">{{ 'Phone'|trans }}</div>
                    </div>
                    <div class="choice">
                        <div class="device tablet" data-type="tablet"></div>
                        <div class="label">{{ 'Tablet'|trans }}</div>
                    </div>
                    <div class="choice">
                        <div class="device tv" data-type="tv"></div>
                        <div class="label">{{ 'Tv'|trans }}</div>
                    </div>
                </div>
                <div class="check-them-all">
                    <label for="checkThemAll">
                        <input type="checkbox" id="checkThemAll" checked>{{ 'Mark previous episodes as viewed'|trans }}
                    </label>
                </div>
                <div class="remember-choice">
                    <label for="rememberChoice">
                        <input type="checkbox" id="rememberChoice" checked title="{{ 'Remember my choice as long as I stay on this page'|trans }}">{{ 'Remember my choices'|trans }}
                    </label>
                </div>
                <div class="live-watch">
                    <label for="liveWatch">
                        <input type="checkbox" id="liveWatch" title="{{ 'Episodes seen as they happen'|trans }}">{{ 'Episodes seen as they happen'|trans }}
                    </label>
                </div>
            </div>
            <div class="footer">
                <button value="nope" class="btn btn-secondary viewed-episode-cancel">{{ 'Cancel'|trans }}</button>
                <button value="yass" class="btn btn-secondary viewed-episode-done">{{ 'Done'|trans }}</button>
            </div>
        </div>
    </dialog>
{% endblock %}
{% block javascripts %}
    {{ parent() }}
    <script src="/js/serie.js"></script>
    <script src="/js/diaporama.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.5.1/dist/confetti.browser.min.js"></script>
    <script>
        const paths = [
            "{{ path('app_serie_render_translation_fields') }}",
            "{{ path('app_serie_render_translation_select') }}",
            "{{ path('app_serie_render_translation_save') }}",
            "{{ path('app_serie_new') }}",
            "{{ path('app_serie_show', {id:0}) }}",
            "{{ path('app_serie_viewing') }}",
            "{{ path('app_user_connected') }}",
            "{{ path('app_serie_toggle_favorite', {'fav': 1, 'userId': 2, 'mediaId': 3}) }}",
            "{{ path('app_serie_duration') }}"
        ];
        const serie = "{{ serieId }}";
        const _app_serie_viewing = paths[5];
        const _app_user_connected = paths[6];
        const _app_serie_duration = paths[8];
        let _app_serie_toggle_favorite = paths[7].substring(0, paths[7].length - 6);
        const _locale = "{{ app.request.locale }}";
        const txt = {
            "vu": {"fr": "vu", "en": "seen"},
            "pasVu": {"fr": "pas vu", "en": "not seen"}
        }
        const number_of_episodes = {{ serie.number_of_episodes }};
        let viewedEpisodesDialog, currentDialog, episodeClicked = {viewed: 0, episodeNumber: 0, seasonNumber: 0},
            mouseX, mouseY, myCanvas, palettes;

        window.addEventListener("DOMContentLoaded", () => {
            {% if user and serieId %}
            {% set percent = (viewedEpisodes / serie.number_of_episodes * 100)|round %}
            {% if percent > 100 %} {% set percent = 100 %} {% endif %}
            initSerieStuff(paths, [
                [".vote-average", 10 * parseFloat({{ serie.vote_average }})],
                [".view-average", parseFloat({{ percent }})]
            ]);
            {% else %}
            initSerieStuff(paths, [
                [".vote-average", 10 * parseFloat({{ serie.vote_average }})],
                undefined
            ]);
            {% endif %}

            const images = document.querySelector(".serie-page").querySelector(".images")?.querySelectorAll("img");
            initDiaporama(images, _locale);

            {% if user and serieId %}
            viewedEpisodesDialog = document.querySelector(".viewed-episode");
            initViewedEpisodes(viewedEpisodesDialog);
            episodeAddEvent();

            document.querySelector(".favorite").querySelector("input[type='checkbox']").addEventListener("change", toggleFavorite);

            const test = document.querySelector("#test");
            test.addEventListener("click", getViewedEpisodesDuration);

            function getViewedEpisodesDuration(evt) {
                const durationString = document.querySelector('.duration-string');
                const serieId = evt.currentTarget.getAttribute("data-id");
                const xhr = new XMLHttpRequest();
                xhr.onload = function () {
                    let data = {duration: 0, episodeCount: 0, log: "", nullDurationCount: 0, seasonCount: 0, serieCount: 0, time: "0"};
                    data = JSON.parse(this.response);
                    console.log({data});
                    let duration = data.duration;
                    let convertedTime = convertSeconds(duration * 60);
                    durationString.innerHTML = "Durée totale des épisodes vus parmi "
                        + data.serieCount + " séries, "
                        + data.seasonCount + " saisons et "
                        + data.episodeCount + " épisodes (" + data.nullDurationCount + ") : "
                        + (convertedTime.months ? (convertedTime.months + " mois ") : "")
                        + (convertedTime.days ? (convertedTime.days + " jour" + (convertedTime.days > 1 ? "s " : " ")) : "")
                        + (convertedTime.hours ? (convertedTime.hours + " heure" + (convertedTime.hours > 1 ? "s " : " ")) : "")
                        + (convertedTime.minutes ? (convertedTime.minutes + " minute" + (convertedTime.minutes > 1 ? "s " : " ")) : "")
                        + "(" + data.time + "sec)";
                    durationString.parentElement.querySelector("button").remove();
                }
                xhr.open("GET", _app_serie_duration /*+ "?id=" + serieId*/);
                xhr.send();
            }

            function convertSeconds(seconds) {
                let months = Math.floor(seconds / 2628000);
                seconds -= months * 2628000;
                let days = Math.floor(seconds / 86400);
                seconds -= days * 86400;
                let hours = Math.floor(seconds / 3600);
                seconds -= hours * 3600;
                let minutes = Math.floor(seconds / 60);
                seconds -= minutes * 60;
                return {
                    months: months,
                    days: days,
                    hours: hours,
                    minutes: minutes,
                    seconds: seconds
                };
            }

            function toggleFavorite(evt) {
                const fav = evt.target.checked ? 1 : 0;
                const userId = "{{ user.id }}";
                const mediaId = "{{ serieId }}";

                // console.log({fav});
                let url = _app_serie_toggle_favorite + '/' + userId + '/' + mediaId + '/' + fav;
                // console.log({url});

                const xhr = new XMLHttpRequest();
                xhr.onload = function () {
                    let data = JSON.parse(this.response);
                    let message = evt.target.closest(".favorite").querySelector(".message");
                    // console.log({data});
                    message.innerHTML = data.message;
                    message.classList.remove("added", "removed");
                    message.classList.add(data.class);
                }
                xhr.open("GET", url);
                xhr.send();
            }

            function episodeAddEvent() {
                const episodes = document.querySelectorAll(".ep");
                episodes.forEach(episode => {
                    episode.addEventListener('mousemove', bubbleIt);
                    episode.addEventListener('mouseenter', bubbleItShow);
                    episode.addEventListener('mouseleave', bubbleItHide);
                    episode.addEventListener('click', toggleView);
                })
            }

            function bubbleItShow(evt) {
                const bubble = document.querySelector(".bubble");
                const viewed = parseInt(this.getAttribute("data-viewed"));
                const episode = this.getAttribute("data-number");
                bubble.setAttribute("style", "translate: " + evt.pageX + "px " + evt.pageY + "px;");
                bubble.querySelector("span").innerText = episode.toString() + (viewed ? (" 🤓") : (" 🥺"));
                bubble.classList.add("show");
            }

            function bubbleItHide() {
                const bubble = document.querySelector(".bubble");
                bubble.classList.remove("show");
                bubble.querySelector("span").innerText = "";
            }

            function bubbleIt(evt) {
                const bubble = document.querySelector(".bubble");
                bubble.setAttribute("style", "translate: " + evt.pageX + "px " + evt.pageY + "px;");
            }

            function initViewedEpisodes(dialog) {
                const devices = dialog.querySelectorAll(".device");
                const networks = dialog.querySelectorAll(".network");

                currentDialog = dialog;

                dialog.querySelector(".viewed-episode-done").addEventListener("click", () => {
                    closeDialog(dialog, true);
                })
                dialog.querySelector(".viewed-episode-cancel").addEventListener("click", () => {
                    closeDialog(dialog, false);
                })
                dialog.querySelector(".close").addEventListener('click', function () {
                    closeDialog(dialog, false);
                });
                devices.forEach(device => {
                    device.addEventListener("click", (evt) => {
                        devices.forEach(d => d.classList.remove("active"));
                        evt.currentTarget.classList.add("active");
                    })
                })
                networks.forEach(network => {
                    network.addEventListener("click", (evt) => {
                        networks.forEach(n => n.classList.remove("active"));
                        evt.currentTarget.classList.add("active");
                    })
                })
            }

            function openDialog(dialog) {
                const devices = dialog.querySelectorAll(".device");
                const networks = dialog.querySelectorAll(".network");
                const checkThemAllDiv = dialog.querySelector(".check-them-all");

                if (!dialog.querySelector("#rememberChoice").checked) {
                    devices.forEach(d => d.classList.remove("active"));
                    networks.forEach(n => n.classList.remove("active"));
                    checkThemAllDiv.classList.remove("show");
                }

                if (typeof dialog.showModal === "function") {
                    dialog.showModal();
                    setTimeout(() => {
                        dialog.classList.add("show")
                    }, 0);
                } else {
                    console.error("L'API <dialog> n'est pas prise en charge par ce navigateur.");
                    /*dialog.setAttribute("open");
                    let offset = document.querySelector("html").scrollTop;
                    dialog.setAttribute("style", "translate: 0 " + offset + "px;");
                    dialog.classList.remove("d-none");
                    dialog.classList.add("d-block");*/
                }
            }

            function closeDialog(dialog, toggle) {
                /*dialog.classList.add("d-none");
                dialog.classList.remove("d-block");
                dialog.removeAttribute("style");*/
                dialog.classList.remove("show");
                setTimeout(() => {
                    dialog.close()
                }, 300);
                if (toggle) {
                    let network = dialog.querySelector(".network.active");
                    let device = dialog.querySelector(".device.active");
                    let all = dialog.querySelector("#checkThemAll").checked;
                    let liveWatch = dialog.querySelector("#liveWatch");
                    toggleEpisodeView(network, device, all, liveWatch);
                }
            }

            function toggleView(evt) {
                const ep = this;
                episodeClicked.viewed = parseInt(ep.getAttribute("data-viewed")) === 0 ? 1 : 0;
                episodeClicked.episodeNumber = parseInt(ep.getAttribute("data-number"));
                episodeClicked.seasonNumber = parseInt(ep.parentElement.getAttribute("data-season-number"));
                evt.preventDefault();
                mouseX = evt.clientX / evt.view.innerWidth;
                mouseY = evt.clientY / evt.view.innerHeight;
                console.log({mouseX, mouseY});

                if (episodeClicked.viewed) {
                    const checkThemAllDiv = currentDialog.querySelector(".check-them-all");
                    if (areUnseenEpisodesBefore(parseInt(ep.getAttribute("data-global-index")))) {
                        checkThemAllDiv.classList.add("show");
                    } else {
                        checkThemAllDiv.classList.remove("show");
                        checkThemAllDiv.querySelector("#checkThemAll").checked = false;
                    }
                    openDialog(viewedEpisodesDialog);
                } else {
                    toggleEpisodeView();
                }
            }

            function areUnseenEpisodesBefore(index) {
                if (index === 1) return false;
                const eps = document.querySelector("main").querySelector(".seasons").querySelectorAll(".ep");

                for (let i = 0; i < index - 1; i++) {
                    if (parseInt(eps[i].getAttribute("data-viewed")) === 0) return true;
                }
                return false;
            }

            function toggleEpisodeView(network = null, device = null, all = false, liveWatch = null) {

                stillConnected();

                let networkId = null, networkType = null, deviceType = null, live = null;

                if (network) {
                    networkType = network.getAttribute("data-type");
                    networkId = network.getAttribute("data-id");
                }
                if (device) {
                    deviceType = device.getAttribute("data-type");
                }
                if (liveWatch) {
                    live = liveWatch.checked;
                }

                const e_viewed = episodeClicked.viewed;
                const e_number = episodeClicked.episodeNumber;
                const s_number = episodeClicked.seasonNumber;
                const update = document.querySelector(".viewed-update-db-world");
                const xhr = new XMLHttpRequest();
                xhr.onload = function () {
                    let data = JSON.parse(this.response);
                    let blocks = data['blocks'];
                    let viewedEpisodes = data['viewedEpisodes'];
                    let episodeText = data['episodeText'];
                    let seasonCompleted = data['seasonCompleted'];

                    blocks.forEach(block => {
                        if (block['episode_count']) {
                            console.log({block});
                            const details = document.querySelector(".details[data-season-number=\"" + block['season'] + "\"]");
                            if (details) {
                                const oldViewingDiv = details.querySelector(".viewing").parentNode;
                                const newViewingDiv = document.createElement("div");
                                newViewingDiv.innerHTML = block.view.content;
                                details.insertBefore(newViewingDiv, oldViewingDiv);
                                details.removeChild(oldViewingDiv);
                            }
                        }
                    })
                    updateViewCount(".view-count", ".view-average", viewedEpisodes, episodeText);
                    episodeAddEvent();
                    update.classList.remove("show");
                    setTimeout(() => {
                        update.close()
                    }, 300);

                    if (seasonCompleted) {
                        setTimeout(celebrate, 300);
                    }
                }
                xhr.open("GET", _app_serie_viewing + '?id=' + serie + "&s=" + s_number + "&e=" + e_number + "&v=" + e_viewed + (networkType ? "&network-type=" + networkType : "") + (networkId ? "&network-id=" + networkId : "") + (deviceType ? "&device-type=" + deviceType : "") + (all ? "&all=" + 1 : "") + (live ? "&live=1" : ""));
                xhr.send();
                update.showModal();
                setTimeout(() => {
                    update.classList.add("show")
                }, 0);

            }

            function updateViewCount(textSelector, graphSelector, viewedEpisodes, episodeText) {
                let percent = Math.round(viewedEpisodes / number_of_episodes * 100);
                if (percent > 100) percent = 100;
                setVote([[graphSelector, percent]]);
                document.querySelector(graphSelector).querySelector(".percentage").innerHTML = percent + "%";
                document.querySelector(textSelector).innerHTML = viewedEpisodes + " " + episodeText;
            }

            function stillConnected() {
                const xhr = new XMLHttpRequest();
                xhr.onload = function () {
                    let data = JSON.parse(this.response);

                    if (!data.connected) {
                        window.location.reload();
                    }
                }
                xhr.open("GET", _app_user_connected);
                xhr.send();
            }

            // https://github.com/catdad/canvas-confetti/
            palettes = [
                ['#940079', '#ff61e2', '#ffa7ef', '#ffa7bf', '#ff618b', '#940027'],
                ['#255480', '#6aa1d4', '#9bc0e2', '#9be2d2', '#6ad4bb', '#25806b'],
                ['#89a9c8', '#749abe', '#5f8bb4', '#4e7ca6', '#456d92', '#3b5d7d'],
                ['#1bbd1f', '#36d55d', '#6ad49b', '#8dd7bf', '#aedcd8', '#cce2e5'],
                ['#804625', '#d4906a', '#e2b59b', '#e29bb5', '#d46a90', '#802546'],
                ['#fa9e6b', '#fa8e52', '#f97e39', '#f86e20', '#f75e08', '#df5407'],
                ['#be88c8', '#b373bf', '#a75eb5', '#994da8', '#864393', '#733a7e']
            ];

            function celebrate() {
                let duration = 3 * 1000;
                let end = Date.now() + duration;
                myCanvas = document.createElement('canvas');
                document.body.appendChild(myCanvas);
                (function frame() {
                    const particuleCount = 10 + Math.floor(Math.random() * 10);
                    const spread = 90 + Math.floor(Math.random() * 270);
                    const palette = palettes[Math.floor(Math.random() * palettes.length)];
                    const position = {x: mouseX, y: mouseY};
                    confetti({
                        resize: true,
                        useWorker: true,
                        particleCount: particuleCount,
                        spread: spread,
                        colors: palette,
                        origin: position
                    });
                    if (Date.now() < end) {
                        requestAnimationFrame(frame);
                    } else {
                        setTimeout(() => {
                            document.body.removeChild(myCanvas);
                        }, 3000);
                    }
                }());
            }
            {% endif %}
        });
    </script>
{% endblock %}
