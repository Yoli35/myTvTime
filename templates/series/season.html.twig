{% extends 'base.html.twig' %}
{% set user = app.user %}
{% block title %}myTvTime ▶ ︎
    {% if parameters.from == 'popular' %}
        {{ 'Popular Series'|trans }}
    {% elseif parameters.from == 'search' %}
        {{ 'Series search'|trans }}
    {% elseif parameters.from == 'my_series_to_start' %}
        {{ 'My series to start'|trans }}
    {% elseif parameters.from == 'my_series_to_end' %}
        {{ 'My series to end'|trans }}
    {% elseif parameters.from == 'upcoming_series' %}
        {{ 'Upcoming series'|trans }}
    {% elseif parameters.from == 'upcoming_episodes' %}
        {{ 'Upcoming episodes'|trans }}
    {% elseif parameters.from == 'today' %}
        {{ 'My series airing today'|trans }}
    {% elseif parameters.from == 'my-events' %}
        {{ 'My events'|trans }}
    {% else %}
        {{ 'My series'|trans }}
    {% endif %}
    ▶ ︎{{ serie.localized_name ?? serie.name }}
{% endblock %}

{% block body %}
    {{ include('blocks/_mainMenu.html.twig') }}
    <div class="container-fluid">

        {{ include('blocks/_nav.html.twig') }}

        <div class="serie-page">
            <div class="header">
                <div class="backdrop" style="background-image: url('{{ serie.backdropPath }}')"></div>
                <div class="series-details">
                    <div class="posters">
                        <div class="poster">
                            <img src="{{ season.poster_path }}" alt="{{ season.name }}">
                        </div>
                    </div>
                    <div class="infos">
                        <h1>
                            {% if serie.localized_name %}
                                <div>{{ serie.localized_name }}</div>
                                <div>({{ serie.name }})</div>
                            {% else %}
                                <div>{{ serie.name }}</div>
                            {% endif %}

                            {% if serie.firstDateAir %}
                                <span>({{ serie.firstDateAir|date("Y") }})</span>
                            {% endif %}
                        </h1>
                        <h2>{{ season.name }}</h2>
                        <div class="info">
                            {% if season.overview|length %}
                                <div>{{ season.overview }}</div>
                            {% endif %}
                        </div>
                        {% if seasonViewing %}
                            <div class="viewing-progress">{{ 'Progress'|trans }} : <span></span>
                                / {{ seasonViewing.episodeCount }} {{ 'episodes'|trans }}</div>
                        {% endif %}
                        {% if not localized %}
                            <div class="info">
                                <i class="fa-solid fa-triangle-exclamation"></i>
                                {{ 'Information about this season (episode titles and descriptions) is not available in your language'|trans }}.
                            </div>
                        {% endif %}
                    </div>
                    {% if seasonViewing %}
                        <div class="vote-graph">
                            <label for="select-graph">{{ 'Vote graph'|trans }}
                                <select id="select-graph">
                                    {% for type in ['plot', 'bar', 'radial'] %}
                                        <option value="{{ type }}"{% if seasonsCookie.graph == type %} selected{% endif %}>{{ type|trans }}</option>
                                    {% endfor %}
                                </select>
                            </label>
                            <div class="options">
                                <label>
                                    <input type="checkbox" id="option-graph-grid" value="grid"{% if seasonsCookie.grid == 'grid' %} checked{% endif %}>
                                    {{ 'Grid'|trans }}
                                </label>
                                <label>
                                    <input type="checkbox" id="option-graph-colored-grid" value="colored"{% if seasonsCookie.coloredGrid == 'color' %} checked{% endif %}>
                                    {{ 'Colored grid'|trans }}
                                </label>
                            </div>
                        </div>
                    {% endif %}
                </div>
            </div>
            <main>
                <article class="full">
                    {% if localizedOverview|length %}
                        <section>
                            <div class="deepl">
                                <div class="title">{{ 'Overview'|trans }} by
                                    <div class="logo"><img src="/images/default/deepl.png" alt="deepl"></div>
                                </div>
                                <div class="info">{{ localizedOverview }}</div>
                            </div>
                        </section>
                    {% endif %}
                    <section>
                        <div class="episodes-layout">
                            <label for="layout-size">
                                <span>{{ 'Size for roomy mode'|trans }} :</span>
                                <span class="layout-size-value">{{ seasonsCookie.roomySize }}</span>
                                <input type="range" id="layout-size" min=".5" max="3" step=".25" value="{{ seasonsCookie.roomySize }}">
                            </label>
                            <div class="episodes-layout-items">
                                <div data-type="roomy" title="{{ 'Roomy'|trans }}" class="episodes-layout-item{% if seasonsCookie.layout == 'roomy' %} active{% endif %}">
                                    <i class="fa-solid fa-table-cells-large"></i>
                                </div>
                                <div data-type="compact" title="{{ 'Compact'|trans }}" class="episodes-layout-item{% if seasonsCookie.layout == 'compact' %} active{% endif %}">
                                    <i class="fa-solid fa-table-cells"></i>
                                </div>
                                <div data-type="list" title="{{ 'List'|trans }}" class="episodes-layout-item{% if seasonsCookie.layout == 'list' %} active{% endif %}">
                                    <i class="fa-solid fa-table-list"></i>
                                </div>
                            </div>
                        </div>
                        <div class="episodes {{ seasonsCookie.layout }}">
                            {% for episode in episodes %}
                                {% set now = 'now'|date("Y-m-d") %}
                                {% set upcoming = episode.air_date > now %}
                                {% set past = episode.air_date < now %}
                                {% if not upcoming %}
                                    <div class="episode">
                                        <div class="still">
                                            <img src="{{ episode.still_path }}" alt="{{ episode.name }}">
                                            <div class="episode-name">
                                                {% if episode.viewing is defined and episode.viewing.substituteName is not null %}
                                                    {{ episode.viewing.substituteName }}
                                                {% else %}
                                                    {{ episode.name }}
                                                {% endif %}
                                            </div>
                                            <div class="episode-number{% if episode.viewing is defined and episode.viewing.viewedAt %} viewed{% endif %}">
                                                <span>{{ episode.episode_number }}</span>
                                            </div>
                                            {% if episode.air_date %}
                                                <div class="episode-air-date">
                                                    {{ episode.air_date|format_date('short') }}
                                                </div>
                                            {% endif %}
                                        </div>
                                        <div class="infos">
                                            <h4>
                                                {{ 'Episode'|trans }} {{ episode.episode_number }}
                                                {% if episode.viewing is defined and episode.name matches '/[EÉ]pisod[eio]+\\s\\d+/' %}
                                                    {% if episode.viewing.substituteName is not null %}
                                                        {{ episode.viewing.substituteName }}
                                                        {#                                                    {% else %} #}
                                                        {#                                                        {{ episode.name }} ({{ 'TBA'|trans }}) #}
                                                    {% endif %}
                                                {% else %}
                                                    {{ episode.name }}
                                                {% endif %}
                                            </h4>
                                            {% if episode.viewing is defined
                                                and past
                                                and episode.name matches '/[EÉ]pisod[eio]+\\s\\d+/'
                                                and episode.viewing.substituteName is null %}
                                                <div class="substituteName">
                                                    <label>
                                                        {{ 'Substitute name'|trans }} :
                                                        <input type="text" data-id="{{ episode.viewing.id }}">
                                                    </label>
                                                    <button class="btn btn-primary btn-sm"
                                                            data-id="{{ episode.viewing.id }}">{{ 'Apply'|trans }}</button>
                                                </div>
                                            {% endif %}

                                            {% if episode.runtime %}
                                                <div class="info">{{ 'Runtime'|trans }} : {{ episode.runtime }} {{ episode.runtime>1 ? 'minutes':'minute' }}</div>
                                            {% else %}
                                                <div class="info">
                                                    <label for="input-duration-{{ episode.episode_number }}">{{ 'Runtime'|trans }} :
                                                        <input type="number" id="input-duration-{{ episode.episode_number }}"
                                                               data-show-id="{{ episode.show_id }}"
                                                               data-episode-number="{{ episode.episode_number }}"
                                                               data-season-number="{{ season.season_number }}"
                                                               min="1" max="999" step="1" value="{{ episode.runtime }}">
                                                        {{ 'minutes'|trans }}
                                                    </label>
                                                </div>
                                            {% endif %}
                                            {% if episode.air_date %}
                                                <div class="info">
                                                    {% if past %}
                                                        {{ 'This episode aired from episode_air_date.'|trans({"episode_air_date": (episode.air_date|format_date('full'))}) }}
                                                    {% elseif upcoming %}
                                                        {{ 'This episode will be aired from episode_air_date.'|trans({"episode_air_date": (episode.air_date|format_date('full'))}) }}
                                                    {% else %}
                                                        {{ 'This episode is aired from today.'|trans }}
                                                    {% endif %}
                                                </div>
                                            {% endif %}
                                        </div>
                                        <div class="abstract">
                                            {% if episode.overview|length %}
                                                <div class="info">{{ episode.overview }}</div>
                                            {% endif %}
                                        </div>
                                        <div class="episode-viewing">
                                            {% if episode.viewing is defined %}
                                                {% set viewed = episode.viewing.viewedAt %}
                                                <div class="view" data-id="{{ episode.viewing.id }}">
                                                    <div class="view-value">
                                                        {% if episode.viewing.viewedAt %}
                                                            <i class="fa-solid fa-check"></i>
                                                        {% else %}
                                                            <i class="fa-solid fa-plus"></i>
                                                        {% endif %}
                                                    </div>
                                                    <div class="view-provider{% if viewed %} show{% endif %}">
                                                        {% if episode.viewing.networkType == 'flatrate' and episode.viewing.networkId %}
                                                            <div class="provider" data-id="{{ episode.viewing.networkId }}">
                                                                <img src="{{ allWatchProviders[episode.viewing.networkId].logo_path }}"
                                                                     alt="{{ allWatchProviders[episode.viewing.networkId].provider_name }}"
                                                                     title="{{ allWatchProviders[episode.viewing.networkId].provider_name }}">
                                                            </div>
                                                        {% else %}
                                                            <div class="provider other" data-id="-1"></div>
                                                        {% endif %}
                                                        <div class="view-providers">
                                                            {% if watchProviders %}
                                                                {% if watchProviders is defined %}
                                                                    {% for provider in watchProviders %}
                                                                        <div class="provider" data-id="{{ provider.provider_id }}">
                                                                            <img src="{{ provider.logo_path }}" alt="{{ provider.provider_name }}" title="{{ provider.provider_name }}">
                                                                        </div>
                                                                    {% endfor %}
                                                                {% endif %}
                                                            {% endif %}
                                                            <div class="provider other" data-id="-1"></div>
                                                        </div>
                                                    </div>
                                                    <div class="view-device {{ episode.viewing.deviceType ?? 'tv' }}{% if viewed %} show{% endif %}"
                                                         data-device="{{ episode.viewing.deviceType ?? 'tv' }}">
                                                    <span>
                                                        {% if episode.viewing.deviceType is null %}?{% endif %}
                                                        {% if episode.viewing.deviceType == 'tv' %}TV{% endif %}
                                                    </span>
                                                        <div class="view-devices">
                                                            <div class="device desktop" data-device="desktop"></div>
                                                            <div class="device laptop" data-device="laptop"></div>
                                                            <div class="device tablet" data-device="tablet"></div>
                                                            <div class="device phone" data-device="phone"></div>
                                                            <div class="device tv" data-device="tv"></div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="vote{% if viewed %} show{% endif %}"
                                                     data-id="{{ episode.viewing.id }}"
                                                     data-number="{{ episode.episode_number }}">
                                                    <div class="vote-graduation{% if episode.viewing.vote == 10 %} active{% endif %}"
                                                         data-title="10" data-value="10"></div>
                                                    <div class="vote-graduation{% if episode.viewing.vote >=9 %} active{% endif %}"
                                                         data-title="9" data-value="9"></div>
                                                    <div class="vote-graduation{% if episode.viewing.vote >=8 %} active{% endif %}"
                                                         data-title="8" data-value="8"></div>
                                                    <div class="vote-graduation{% if episode.viewing.vote >=7 %} active{% endif %}"
                                                         data-title="7" data-value="7"></div>
                                                    <div class="vote-graduation{% if episode.viewing.vote >=6 %} active{% endif %}"
                                                         data-title="6" data-value="6"></div>
                                                    <div class="vote-graduation{% if episode.viewing.vote >=5 %} active{% endif %}"
                                                         data-title="5" data-value="5"></div>
                                                    <div class="vote-graduation{% if episode.viewing.vote >=4 %} active{% endif %}"
                                                         data-title="4" data-value="4"></div>
                                                    <div class="vote-graduation{% if episode.viewing.vote >=3 %} active{% endif %}"
                                                         data-title="3" data-value="3"></div>
                                                    <div class="vote-graduation{% if episode.viewing.vote >=2 %} active{% endif %}"
                                                         data-title="2" data-value="2"></div>
                                                    <div class="vote-graduation{% if episode.viewing.vote >=1 %} active{% endif %}"
                                                         data-title="1" data-value="1"></div>
                                                    <div class="vote-value">{% if episode.viewing.vote %}{{ episode.viewing.vote }} / 10{% endif %}</div>
                                                </div>
                                            {% endif %}
                                        </div>
                                    </div>
                                {% endif %}
                            {% endfor %}
                        </div>
                    </section>
                    {% if credits %}
                        {{ include('blocks/series/_cast.html.twig', {from: parameters.from, query: parameters.query, media: "tv", id: serie.id}) }}
                        {{ include('blocks/series/_crew.html.twig', {from: parameters.from, query: parameters.query, media: "tv", id: serie.id}) }}
                    {% endif %}
                </article>
            </main>
            {{ include('blocks/series/_watchProviders.html.twig') }}
        </div>

        {{ include('blocks/_pageFooter.html.twig') }}

    </div>
    <div class="season-data" style="display: none">
        {
        "watchProviders": {{ watchProviders|json_encode(constant('JSON_PRETTY_PRINT'))|raw }}
        }
    </div>
{% endblock %}
{% block javascripts %}
    {{ parent() }}
    <script src="/js/watch-providers.js" type="module"></script>
    <script>
        window.addEventListener("DOMContentLoaded", () => {
            initSubstituteName();
            initView();
            initVote();
            initLayout();
            setViewedEpisodeCount();

            initGraph();

            console.log(getSeasonCookie());
        });

        function initSubstituteName() {
            const substituteNames = document.querySelectorAll('.substituteName');
            document.querySelector('input')?.focus();

            substituteNames?.forEach((substituteName) => {
                const applyButton = substituteName.querySelector('button');
                const input = substituteName.querySelector('input');
                applyButton.addEventListener('click', saveSubstituteName);
                input.addEventListener('keyup', (e) => {
                    if (e.code === 'Enter') {
                        saveSubstituteName(e);
                    }
                });
            });
        }

        function saveSubstituteName(e) {
            const substituteName = e.target.parentElement.querySelector('input').value;
            const id = e.target.dataset.id;
            const url = '{{ path('app_episode_substitute_name') }}';
            const data = JSON.stringify({
                id: id,
                substituteName: substituteName
            });
            const xhr = new XMLHttpRequest();
            xhr.onload = function () {
                window.location.reload();
            }
            xhr.open("GET", url + '?data=' + data, true);
            xhr.send();
        }

        function initEpisodeDuration() {
            const episodeDurationInputs = document.querySelectorAll('input[id^=episode-duration]');
            episodeDurationInputs.forEach((episodeDurationInput) => {
                episodeDurationInput.addEventListener('keyup', (e) => {
                    if (e.code === 'Enter') {
                        saveEpisodeDuration(e);
                    }
                });
            });
        }

        function saveEpisodeDuration(e) {
            const input = e.currentTarget;
            const runtime = input.value;
            const showId = input.getAttribute("data-show-id");
            const episodeNumber = input.getAttribute("data-episode-number");
            const seasonNumber = input.getAttribute("data-season-number");
            const url = '{{ path('app_episode_duration') }}';
            const data = JSON.stringify({
                showId: showId,
                episodeNumber: episodeNumber,
                seasonNumber: seasonNumber,
                runtime: runtime
            });
            const xhr = new XMLHttpRequest();
            xhr.onload = function () {
                const {result, runtime} = JSON.parse(xhr.responseText);
                if (result === "ok") {
                    const txt = {"fr": "minutes", "en": "minutes", "es": "minutos", "de": "Minuten"};
                    const locale = document.querySelector('html').getAttribute('lang');
                    const info = input.closest('.info');
                    info.innerHTML = runtime + ' ' + txt[locale];
                }
            }
            xhr.open("GET", url + '?data=' + data, true);
            xhr.send();
        }

        function initView() {
            /**
             * @type {Array.<{id: number, name: string, logo_path: string}>}
             */
            const watchProviders = {{ watchProviders|json_encode(constant('JSON_PRETTY_PRINT'))|raw }};
            const views = document.querySelectorAll('.view');

            views.forEach((view) => {
                const viewValue = view.querySelector('.view-value');
                const viewProvider = view.querySelector('.view-provider');
                const viewProviders = view.querySelector('.view-providers');
                const providers = viewProviders.querySelectorAll('.provider');
                const viewDevice = view.querySelector('.view-device');
                const devices = viewDevice.querySelectorAll('.device');
                const vote = view.parentElement.querySelector('.vote');
                const id = view.getAttribute('data-id');
                const url = '{{ path('app_episode_view', {id: 0, view: 0})|slice(0,-3) }}' + id + '/';
                const urlNetwork = '{{ path('app_episode_view_network', {id: 0, networkId: 0})|slice(0,-3) }}' + id + '/';
                const urlDevice = '{{ path('app_episode_view_device', {id: 0, device: 'tv'})|slice(0,-4) }}' + id + '/';

                viewValue.addEventListener('click', () => {
                    const i = viewValue.querySelector('i');
                    const episodeView = i.classList.contains('fa-check') ? "1" : "0";
                    const xhr = new XMLHttpRequest();
                    xhr.onload = function () {
                        let {episodeViewed, seasonCompleted, viewedEpisodeCount} = JSON.parse(this.responseText);
                        const provider = view.querySelector('.view-provider');
                        const device = view.querySelector('.view-device');
                        if (episodeViewed) {
                            viewValue.innerHTML = '<i class="fa-solid fa-check"></i>';
                            vote.classList.add('show');
                            provider.classList.add('show');
                            device.classList.add('show');
                        } else {
                            viewValue.innerHTML = '<i class="fa-solid fa-plus"></i>';
                            vote.classList.remove('show');
                            provider.classList.remove('show');
                            device.classList.remove('show');
                        }
                        if (seasonCompleted) {
                            viewValue.classList.add('completed');
                        } else {
                            viewValue.classList.remove('completed');
                        }
                        const viewingProgress = document.querySelector('.viewing-progress');
                        viewingProgress.querySelector("span").innerText = viewedEpisodeCount;
                    }
                    xhr.open("GET", url + episodeView, true);
                    xhr.send();
                });

                providers.forEach((provider) => {
                    provider.addEventListener('click', () => {
                        const providerId = provider.getAttribute('data-id');
                        const xhr = new XMLHttpRequest();
                        xhr.onload = function () {
                            const {result, networkId} = JSON.parse(this.responseText);
                            const userProvider = viewProvider.querySelector('.provider');

                            if (result === 'success') {
                                if (networkId !== -1) {
                                    const img = userProvider.querySelector('img') || document.createElement('img');
                                    img.setAttribute('src', watchProviders[networkId].logo_path);
                                    img.setAttribute('alt', watchProviders[networkId].name);
                                    img.setAttribute('title', watchProviders[networkId].name);

                                    userProvider.appendChild(img);
                                    userProvider.classList.remove('other');
                                    userProvider.setAttribute('data-id', networkId);
                                } else {
                                    userProvider.querySelector('img')?.remove();
                                    userProvider.classList.add('other');
                                    userProvider.setAttribute('data-id', -1);
                                }
                            }
                        }
                        xhr.open("GET", urlNetwork + providerId, true);
                        xhr.send();
                    });
                });
                viewProvider.addEventListener('mouseenter', () => {
                    const providers = view.querySelector('.view-providers');
                    providers.classList.add('visible');
                    setTimeout(() => {
                        providers.classList.add('show');
                    }, 0);
                });
                viewProvider.addEventListener('mouseleave', () => {
                    const providers = view.querySelector('.view-providers');
                    providers.classList.remove('show');
                    setTimeout(() => {
                        providers.classList.remove('visible');
                    }, 125);
                });

                devices.forEach((device) => {
                    device.addEventListener('click', () => {
                        let deviceName = device.getAttribute('data-device');
                        let oldDeviceName = viewDevice.getAttribute('data-device');
                        const xhr = new XMLHttpRequest();
                        xhr.onload = function () {
                            const {result, device} = JSON.parse(this.responseText);
                            if (result === 'success') {
                                const newDeviceName = device;
                                viewDevice.classList.remove(oldDeviceName);
                                viewDevice.classList.add(newDeviceName);
                                viewDevice.setAttribute('data-device', newDeviceName);
                                if (newDeviceName === 'tv') {
                                    viewDevice.querySelector('span').innerText = 'TV';
                                } else {
                                    viewDevice.querySelector('span').innerText = '';
                                }
                            }
                        }
                        xhr.open("GET", urlDevice + deviceName, true);
                        xhr.send();
                    });
                });
                viewDevice.addEventListener('mouseenter', () => {
                    const devices = view.querySelector('.view-devices');
                    devices.classList.add('visible');
                    setTimeout(() => {
                        devices.classList.add('show');
                    }, 0);
                });
                viewDevice.addEventListener('mouseleave', () => {
                    const devices = view.querySelector('.view-devices');
                    devices.classList.remove('show');
                    setTimeout(() => {
                        devices.classList.remove('visible');
                    }, 125);
                });
            });
        }

        function setViewedEpisodeCount() {
            const viewingProgress = document.querySelector('.viewing-progress');
            if (!viewingProgress) return;

            const views = document.querySelectorAll('.view');
            let count = 0;

            views.forEach((view) => {
                const viewValue = view.querySelector('.view-value');
                const i = viewValue.querySelector('i');
                count += i.classList.contains('fa-check') ? 1 : 0;
            });
            viewingProgress.querySelector("span").innerText = count;
        }

        function initVote() {
            const votes = document.querySelectorAll('.vote');

            votes.forEach((vote) => {
                // const voteValue = vote.querySelector('.vote-value');
                const voteGraduations = vote.querySelectorAll('.vote-graduation');
                const id = vote.getAttribute('data-id');
                const url = '{{ path('app_episode_vote', {id: 0, vote: 0})|slice(0,-3) }}' + id + '/';

                voteGraduations.forEach((graduation) => {
                    graduation.addEventListener('click', (e) => {
                        let value = e.currentTarget.getAttribute('data-value');
                        const voteValueDiv = e.currentTarget.parentElement.querySelector('.vote-value');
                        const voteValue = voteValueDiv.innerText;

                        if (value === "1" && voteValue === "1") {
                            value = "0";
                        }

                        const xhr = new XMLHttpRequest();
                        xhr.onload = function () {
                            const {voteValue, episodeNumber} = JSON.parse(xhr.responseText);

                            voteValueDiv.innerText = voteValue + " / 10";
                            voteGraduations.forEach((graduation) => {
                                const voteGraduationValue = parseInt(graduation.getAttribute('data-value'));
                                if (voteGraduationValue <= voteValue) {
                                    graduation.classList.add('active');
                                } else {
                                    graduation.classList.remove('active');
                                }
                            });
                            adjustVote(episodeNumber, voteValue);
                        }
                        xhr.open("GET", url + value, true);
                        xhr.send();
                    });
                });

                voteGraduations.forEach((voteGraduation) => {
                    voteGraduation.addEventListener('mouseenter', (e) => {
                        lightOn(e.currentTarget);
                    });
                    voteGraduation.addEventListener('mouseleave', (e) => {
                        lightOff(e.currentTarget.parentElement);
                    });
                });
            });
        }

        function lightOn(graduation) {
            const vote = graduation.parentElement;
            const voteGraduations = lightOff(vote);
            const value = parseInt(graduation.getAttribute('data-value'));
            voteGraduations.forEach((voteGraduation) => {
                const voteGraduationValue = parseInt(voteGraduation.getAttribute('data-value'));
                if (voteGraduationValue <= value) {
                    voteGraduation.classList.add('light-on');
                }
            });
        }

        function lightOff(vote) {
            const voteGraduations = vote.querySelectorAll('.vote-graduation');
            voteGraduations.forEach((voteGraduation) => {
                voteGraduation.classList.remove('light-on');
            });
            return voteGraduations;
        }

        function initLayout() {
            const layouts = document.querySelectorAll('.episodes-layout-item');
            layouts.forEach((layout) => {
                layout.addEventListener('click', (e) => {
                    layouts.forEach((layout) => {
                        layout.classList.remove('active');
                    });
                    e.currentTarget.classList.add('active');
                    const type = e.currentTarget.getAttribute('data-type');
                    const episodes = document.querySelector('.episodes');
                    const time = new Date();
                    time.setFullYear(time.getFullYear() + 1);
                    episodes.classList.remove('roomy', 'compact', 'list');
                    episodes.classList.add(type);
                    setLayoutSeasonCookie(type);
                    if (type === 'roomy') {
                        /**
                         * @type {HTMLElement}
                         */
                        const episodes = document.querySelector('.episodes.roomy');
                        episodes?.style.setProperty('--episode-roomy-size', getLayoutSizeSeasonCookie() + 'rem');
                    }
                });
            });
            const layoutSize = document.querySelector('#layout-size');
            layoutSize.addEventListener('click', (e) => {
                /**
                 * @type {HTMLInputElement}
                 */
                const target = e.currentTarget;
                const newValue = target.value;
                // const span = target.parentElement.querySelector('.layout-size-value');
                // span.innerText = newValue;
                setLayoutSizeSeasonCookie(newValue);
            });
            layoutSize.addEventListener('input', (e) => {
                /**
                 * @type {HTMLInputElement}
                 */
                const target = e.currentTarget;
                const newValue = target.value;
                const span = target.parentElement.querySelector('.layout-size-value');
                span.innerText = newValue;
                /**
                 * @type {HTMLElement}
                 */
                const episodes = document.querySelector('.episodes.roomy');
                episodes.style.setProperty('--episode-roomy-size', newValue + 'rem');
            });
            /**
             * @type {HTMLElement}
             */
            const episodes = document.querySelector('.episodes.roomy');
            episodes?.style.setProperty('--episode-roomy-size', getLayoutSizeSeasonCookie() + 'rem');
        }

        const colorVote = [
            '#39C049',
            '#66BA45',
            '#83B847',
            '#97B14E',
            '#A5A749',
            '#AB9949',
            '#AE8D4C',
            '#AF784B',
            '#AB664F',
            '#9F5656',
            '#FFFFFF',
        ];
        const episodes = JSON.parse('{{ episodesVotes|json_encode()|raw }}');
        const episodeCount = episodes.length;
        const graphicTypes = ['plot', 'bar'];
        let graphicType = 'plot', offsetX, offsetY, centerX, centerY, barWidth, barSpace, barOffset, radialInc, radialOffset, verticalInc, plotSize;
        let voteGraphDiv;
        const graphic = {width: 500, height: 300};

        function initGraph() {
            const viewingProgress = document.querySelector('.viewing-progress');
            if (!viewingProgress) return;

            graphicType = getGraphSeasonCookie();

            const div = document.createElement('div');
            const graph = document.createElement('canvas');

            div.classList.add('graph-container');
            graph.classList.add('graph');
            graph.width = 600;
            graph.height = 400;

            const ctx = graph.getContext('2d');
            ctx.font = "24px sans-serif";
            div.appendChild(graph);

            centerX = graph.width / 2;
            centerY = graph.height / 2;
            offsetX = (graph.width - graphic.width) / 2;
            offsetY = graph.height - (graph.height - graphic.height) / 2;
            barSpace = graphic.width / episodeCount;
            barWidth = barSpace * .8;
            barOffset = barSpace * .1;
            verticalInc = graphic.height * .1;
            radialInc = 1.15 * graphic.height * .5 * .1;
            radialOffset = 1.15 * graphic.height * .5 * .5;
            plotSize = graphic.height * .05;

            voteGraphDiv = document.querySelector('.vote-graph');
            voteGraphDiv.appendChild(div);

            const select = document.querySelector("#select-graph");
            select.addEventListener('change', (e) => {
                /** @type {HTMLSelectElement} */
                const target = e.currentTarget;
                graphicType = target.value;
                setGraphSeasonCookie(graphicType);
                voteGraph();
            });
            const inputGrid = document.querySelector("#option-graph-grid");
            inputGrid.addEventListener('change', (e) => {
                /** @type {HTMLInputElement} */
                const target = e.currentTarget;
                if (target.checked) {
                    setGraphGridSeasonCookie('grid');
                } else {
                    setGraphGridSeasonCookie('none');
                }
                voteGraph();
            });
            const inputColoredGrid = document.querySelector("#option-graph-colored-grid");
            inputColoredGrid.addEventListener('change', (e) => {
                /** @type {HTMLInputElement} */
                const target = e.currentTarget;
                if (target.checked) {
                    setGraphColoredGridSeasonCookie('color');
                } else {
                    setGraphColoredGridSeasonCookie('none');
                }
                voteGraph();
            });
            voteGraph();
        }

        function voteGraph() {
            /**
             * @type {HTMLCanvasElement}
             */
            const graph = document.querySelector('canvas[class=graph]');
            /**
             * @type {CanvasRenderingContext2D}
             */
            const ctx = graph.getContext('2d');

            clearGraph(graph, ctx);

            if (graphicType === 'plot') {
                let prevEpisode = null;
                episodes.forEach((episode) => {
                    clearBar(ctx, offsetX + (episode.number - 1) * barSpace, barSpace);
                });
                episodes.forEach((episode) => {
                    episodeLine(ctx, episode, prevEpisode);
                    prevEpisode = episode;
                });
                episodes.forEach((episode) => {
                    episodePlot(ctx, episode);
                });
                return;
            }
            if (graphicType === 'bar') {
                episodes.forEach((episode) => {
                    episodeBar(ctx, episode);
                });
                return;
            }
            if (graphicType === 'radial') {
                episodes.forEach((episode) => {
                    episodeRadial(ctx, episode);
                });
                // return;
            }
            // console.log({episodes});
        }

        function adjustVote(episodeNumber, vote) {
            const episode = episodes[episodeNumber - 1];
            episode.vote = vote;
            /** @type {HTMLCanvasElement} */
            const graph = document.querySelector('.graph');
            /** @type {CanvasRenderingContext2D} */
            const ctx = graph.getContext('2d');

            if (graphicType === 'plot' || graphicType === 'radial') {
                voteGraph();
                return;
            }
            if (graphicType === 'bar') {
                episodeBar(ctx, episode);
            }
        }

        function episodeBar(ctx, episode) {
            let x = offsetX + (episode.number - 1) * barSpace;
            let y = offsetY - (episode.vote * 30);
            let w = barWidth;
            let h = episode.vote * 30;
            let textWidth;

            clearBar(ctx, x, barSpace);

            x += barOffset;

            if (episode.vote) {
                ctx.fillStyle = colorVote[10 - episode.vote];
                ctx.strokeStyle = "#ffffff";
                ctx.lineWidth = 2;
                ctx.fillRect(x, y, w, h);
                ctx.strokeRect(x, y, w, h);

                ctx.fillStyle = "#ffffff";
            } else {
                ctx.fillStyle = "#888888";
            }
            textWidth = ctx.measureText(episode.number);
            ctx.fillText(episode.number, x + (barWidth - textWidth.width) / 2, offsetY + 25);
            if (episode.vote) {
                textWidth = ctx.measureText(episode.vote);
                ctx.fillText(episode.vote, x + (barWidth - textWidth.width) / 2, y - 10);
            }
        }

        function episodePlot(ctx, episode) {
            let x = offsetX + (episode.number - 1) * barSpace;
            let y = offsetY - (episode.vote) * verticalInc;
            let textWidth;

            x += barSpace / 2;

            if (episode.vote) {
                ctx.fillStyle = colorVote[10 - episode.vote];
                ctx.strokeStyle = "#ffffff";
                ctx.lineWidth = 2;
                ctx.beginPath();
                ctx.arc(x, y, plotSize / 2, 0, 2 * Math.PI);
                ctx.fill();
                ctx.stroke();

                ctx.fillStyle = "#ffffff";
            } else {
                ctx.fillStyle = "#888888";
            }
            textWidth = ctx.measureText(episode.number);
            ctx.fillText(episode.number, x - textWidth.width / 2, offsetY + 25);
            if (episode.vote) {
                textWidth = ctx.measureText(episode.vote);
                if (episode.vote > 5 && episode.vote < 10)
                    ctx.fillText(episode.vote, x - textWidth.width / 2, y - plotSize / 2 - 10);
                else
                    ctx.fillText(episode.vote, x - textWidth.width / 2, y + plotSize / 2 + 25);
            }
        }

        function episodeLine(ctx, episode, prevEpisode) {
            let x = offsetX + (episode.number - 1) * barSpace;
            let y = offsetY - (episode.vote) * verticalInc;

            if (!episode.vote) return;

            if (prevEpisode) {
                let prevX = offsetX + (prevEpisode.number - 1) * barSpace;
                let prevY = offsetY - (prevEpisode.vote) * verticalInc;
                // clearBar(ctx, x, barSpace);
                // clearBar(ctx, prevX, barSpace);
                x += barSpace / 2;
                prevX += barSpace / 2;
                ctx.strokeStyle = "#ffffff";
                ctx.lineWidth = 4;
                ctx.beginPath();
                ctx.moveTo(x, y);
                ctx.lineTo(prevX, prevY);
                ctx.stroke();
            }
        }

        function episodeRadial(ctx, episode) {
            let x = centerX, textX, textY, radius, cos, sin
            let y = centerY;
            let angleOffset = -Math.PI / 2;
            let start = angleOffset + ((episode.number - 1) / episodeCount) * 2 * Math.PI;
            let end = angleOffset + (episode.number / episodeCount) * 2 * Math.PI;
            let textWidth;

            ctx.strokeStyle = "#DDDDDD";
            if (getGraphGridSeasonCookie() === 'grid') {
                ctx.lineWidth = 1;
                for (let i = 1; i <= 10; i++) {
                    if (getGraphColoredGridSeasonCookie() === 'color') {
                        ctx.strokeStyle = colorVote[10 - i];
                    }
                    ctx.beginPath();
                    ctx.arc(x, y, (i + .5) * radialInc, start, end);
                    ctx.stroke();
                    cos = Math.cos(start);
                    sin = Math.sin(start);
                    radius = (i - .5) * radialInc;
                    ctx.beginPath();
                    ctx.moveTo(x + radius * cos, y + radius * sin);
                    ctx.lineTo(x + (radius + radialInc) * cos, y + (radius + radialInc) * sin);
                    ctx.stroke();
                }
            }

            if (!episode.vote) return;

            for (let i = 1; i <= episode.vote; i++) {
                ctx.strokeStyle = colorVote[10 - i];
                ctx.lineWidth = radialInc;
                ctx.beginPath();
                ctx.arc(x, y, i * radialInc, start, end);
                ctx.stroke();
            }

            cos = Math.cos((start + end) / 2);
            sin = Math.sin((start + end) / 2);
            textWidth = ctx.measureText(episode.number);
            textX = x - textWidth.width / 2;
            textY = y + 8;
            radius = radialOffset + (episode.vote < 6 ? radialInc * (episode.vote) : 0);
            ctx.fillStyle = "#ffffff";
            ctx.beginPath();
            ctx.arc(x + cos * radius, y + sin * radius, 20, 0, 2 * Math.PI);
            ctx.fill();
            ctx.strokeStyle = "#111111";
            ctx.lineWidth = 2;
            ctx.stroke();
            ctx.fillStyle = "#000000";
            ctx.fillText(episode.number, textX + (cos * radius), textY + (sin * radius));

            textWidth = ctx.measureText(episode.vote);
            textX = x - textWidth.width / 2;
            textY = y + 8;
            radius = (episode.vote + 2) * radialInc;
            if (episode.vote === 10) {
                let r = radius - 2 * radialInc;
                ctx.translate(textX + (cos * r) + 16, textY + (sin * r) + 16);
                ctx.rotate(Math.PI / 4);
                ctx.translate(-(textX + (cos * r) + 16), -(textY + (sin * r) + 16));

                ctx.fillStyle = "#ffeeff";
                ctx.beginPath();
                ctx.roundRect(textX + (cos * r) - 16, textY + (sin * r) - 16, 32, 32, 7);
                ctx.fill();
                ctx.strokeStyle = "#110011";
                ctx.lineWidth = 2;
                ctx.stroke();
                ctx.resetTransform();
                ctx.fillStyle = "#110011";
                ctx.fillText(episode.vote, textX + 2 + (cos * r), textY + 2 + (sin * r));
            } else {
                ctx.fillStyle = "#ffffff";
                ctx.fillText(episode.vote, textX + (cos * radius), textY + (sin * radius));
            }
        }

        function clearGraph(graph, ctx) {
            ctx.clearRect(0, 0, graph.width, graph.height);
            ctx.fillStyle = "#0000001f";
            ctx.fillRect(0, 0, graph.width, graph.height);
        }

        function clearBar(ctx, x, w) {
            ctx.fillStyle = "#5555551f";
            ctx.strokeStyle = "#3333331f";
            ctx.clearRect(x, offsetY - 300, barSpace, 300);
            ctx.fillRect(x, offsetY - 300, w, 300);
            ctx.strokeRect(x, offsetY - 300, w, 300);

            ctx.fillStyle = "#DDDDDD";
            if (getGraphGridSeasonCookie() === 'grid') {
                for (let i = 0; i <= 10; i++) {
                    if (getGraphColoredGridSeasonCookie() === 'color') {
                        ctx.fillStyle = colorVote[10 - i];
                    }
                    ctx.fillRect(x, offsetY - i * verticalInc, barSpace, 1);
                }
            }
        }

        function getSeasonCookie() {
            return JSON.parse(decodeURIComponent(document.cookie.split('; ').find(row => row.startsWith('series_seasons=')).split('=')[1]));
        }

        function setSeasonCookie(cookie) {
            const time = new Date();
            time.setFullYear(time.getFullYear() + 1);
            document.cookie = "series_seasons=" + encodeURIComponent(JSON.stringify(cookie)) + "; expires=" + time.toUTCString() + "; path=/";
            console.log(getSeasonCookie());
        }

        function getLayoutSeasonCookie() {
            return getSeasonCookie().layout;
        }

        function setLayoutSeasonCookie(layout) {
            const cookie = getSeasonCookie();
            cookie.layout = layout;
            setSeasonCookie(cookie);
        }

        function getLayoutSizeSeasonCookie() {
            return getSeasonCookie().roomySize;
        }

        function setLayoutSizeSeasonCookie(roomySize) {
            const cookie = getSeasonCookie();
            cookie.roomySize = roomySize;
            setSeasonCookie(cookie);
        }

        function getGraphSeasonCookie() {
            return getSeasonCookie().graph;
        }

        function setGraphSeasonCookie(graph) {
            const cookie = getSeasonCookie();
            cookie.graph = graph;
            setSeasonCookie(cookie);
        }

        function getGraphGridSeasonCookie() {
            return getSeasonCookie().grid;
        }

        function setGraphGridSeasonCookie(grid) {
            const cookie = getSeasonCookie();
            cookie.grid = grid;
            setSeasonCookie(cookie);
        }

        function getGraphColoredGridSeasonCookie() {
            return getSeasonCookie().coloredGrid;
        }

        function setGraphColoredGridSeasonCookie(coloredGrid) {
            const cookie = getSeasonCookie();
            cookie.coloredGrid = coloredGrid;
            setSeasonCookie(cookie);
        }
    </script>
{% endblock %}