{% extends 'base.html.twig' %}
{% set user = app.user %}
{% block title %}myTvTime ▶ ︎
    {% if parameters.from == 'top_rated' %}
        {{ 'Top Rated Series'|trans }}::{{ serie.name }}
    {% elseif parameters.from == 'search' %}
        {{ 'Series search'|trans }}
    {% elseif parameters.from == 'today' %}
        {{ 'Latest Serie'|trans }}
    {% else %}
        {{ 'My Series'|trans }}
    {% endif %}
    ▶ ︎{{ serie.name }}
{% endblock %}

{% block body %}
    {{ include('blocks/_mainMenu.html.twig') }}
    <div class="container-fluid">
        {% if parameters.from == 'top_rated' %}
            {{ include('blocks/_nav.html.twig', {parent: {page: 'Top rated Series', url: path('app_serie_top_rated')~'?p='~parameters.page~'#'~serie.id}, thisPage: serie.name}) }}
        {% elseif parameters.from == 'search' %}
            {{ include('blocks/_nav.html.twig', {parent: {page: 'Series search', url: path('app_serie_search', {page: parameters.page})~'?query='~parameters.query~'&year='~parameters.year~'#'~serie.id}, thisPage: serie.name}) }}
        {% elseif parameters.from == 'today' %}
            {{ include('blocks/_nav.html.twig', {thisPage: serie.name}) }}
        {% elseif parameters.from == 'my_series_to_start' %}
            {{ include('blocks/_nav.html.twig', {parent: {page: 'My Series to start', url: path('app_serie_to_start')~'?p='~parameters.page~'&b=1#'~parameters.backId}, thisPage: serie.name}) }}
        {% elseif parameters.from == 'my_series_to_end' %}
            {{ include('blocks/_nav.html.twig', {parent: {page: 'My Series to end', url: path('app_serie_to_end')~'?p='~parameters.page~'&b=1#'~parameters.backId}, thisPage: serie.name}) }}
        {% else %}
            {{ include('blocks/_nav.html.twig', {parent: {page: 'My Series', url: path('app_serie_index')~'?p='~parameters.page~'&b=1#'~parameters.backId}, thisPage: serie.name}) }}
        {% endif %}

        <div class="serie-page">
            <div class="header">
                <div class="backdrop" style="background-image: url('{{ serie.backdropPath }}')"></div>
                <div class="poster">
                    <img src="{{ season.poster_path }}" alt="{{ season.name }}">
                </div>
                <div class="infos">
                    <h1>{{ serie.name }}
                        {% if serie.firstDateAir %}
                            <span>({{ serie.firstDateAir|date("Y") }})</span>
                        {% endif %}
                    </h1>
                    <h2>{{ season.name }}</h2>
                    <div class="info">
                        {% if season.overview|length %}
                            <div>{{ season.overview }}</div>
                        {% endif %}
                    </div>
                    {% if seasonViewing %}
                        <div class="viewing-progress">{{ 'Progress'|trans }} : <span></span>
                            / {{ seasonViewing.episodeCount }} {{ 'episodes'|trans }}</div>
                    {% endif %}
                </div>
            </div>
            <main>
                <article class="full">
                    <section>
                        <div class="episodes">
                            {% for episode in episodes %}
                                {% set now = 'now'|date("Y-m-d") %}
                                {% set upcoming = episode.air_date > now %}
                                {% set past = episode.air_date < now %}
                                <div class="episode">
                                    <div class="still">
                                        <img src="{{ episode.still_path }}" alt="{{ episode.name }}">
                                    </div>
                                    <div class="infos">
                                        <h4>
                                            {{ 'Episode'|trans }} {{ episode.episode_number }} :
                                            {% if episode.viewing
                                                and episode.name matches '/[EÉ]pisod[eio]+\\s\\d+/' %}
                                                {% if episode.viewing.substituteName is not null %}
                                                    {{ episode.viewing.substituteName }}
                                                {% else %}
                                                    {{ episode.name }} ({{ 'TBA'|trans }})
                                                {% endif %}
                                            {% else %}
                                                {{ episode.name }}
                                            {% endif %}
                                        </h4>
                                        {% if episode.viewing
                                            and past
                                            and episode.name matches '/[EÉ]pisod[eio]+\\s\\d+/'
                                            and episode.viewing.substituteName is null %}
                                            <div class="substituteName">
                                                <label>
                                                    {{ 'Substitute name'|trans }} :
                                                    <input type="text" data-id="{{ episode.viewing.id }}">
                                                </label>
                                                <button class="btn btn-primary btn-sm" data-id="{{ episode.viewing.id }}">{{ 'Apply'|trans }}</button>
                                            </div>
                                        {% endif %}

                                        {% if episode.overview|length %}
                                            <div class="info">{{ episode.overview }}</div>
                                        {% endif %}
                                        {% if episode.runtime %}
                                            <div class="info">{{ 'Runtime'|trans }}
                                                : {{ episode.runtime }} {{ episode.runtime>1 ? 'minutes':'minute' }}</div>
                                        {% endif %}
                                        {% if episode.air_date %}
                                            <div class="info">
                                                {% if past %}
                                                    {{ 'This episode aired from episode_air_date.'|trans({"episode_air_date": (episode.air_date|format_date('full'))}) }}
                                                {% elseif upcoming %}
                                                    {{ 'This episode will be aired from episode_air_date.'|trans({"episode_air_date": (episode.air_date|format_date('full'))}) }}
                                                {% else %}
                                                    {{ 'This episode is aired from today.'|trans }}
                                                {% endif %}
                                            </div>
                                        {% endif %}
                                    </div>
                                    <div class="episode-viewing">
                                        {% if episode.viewing %}
                                            {% set viewed = episode.viewing.viewedAt %}
                                            <div class="view" data-id="{{ episode.viewing.id }}">
                                                <div class="view-value">
                                                    {% if episode.viewing.viewedAt %}
                                                        <i class="fa-solid fa-check"></i>
                                                    {% else %}
                                                        <i class="fa-solid fa-plus"></i>
                                                    {% endif %}
                                                </div>
                                                <div class="view-provider{% if viewed %} show{% endif %}">
                                                    {% if episode.viewing.networkType == 'flatrate' and episode.viewing.networkId %}
                                                        <div class="provider" data-id="{{ episode.viewing.networkId }}">
                                                            <img src="{{ watchProviderList[episode.viewing.networkId].logo_path }}"
                                                                 alt="{{ watchProviderList[episode.viewing.networkId].provider_name }}"
                                                                 title="{{ watchProviderList[episode.viewing.networkId].provider_name }}">
                                                        </div>
                                                    {% else %}
                                                        <div class="provider other" data-id="-1"></div>
                                                    {% endif %}
                                                    <div class="view-providers">
                                                        {% if watchProviders %}
                                                            {% if watchProviders is defined %}
                                                                {% for provider in watchProviders %}
                                                                    <div class="provider" data-id="{{ provider.provider_id }}">
                                                                        <img src="{{ provider.logo_path }}"
                                                                             alt="{{ provider.provider_name }}"
                                                                             title="{{ provider.provider_name }}">
                                                                    </div>
                                                                {% endfor %}
                                                            {% endif %}
                                                        {% endif %}
                                                        <div class="provider other" data-id="-1"></div>
                                                    </div>
                                                </div>
                                                <div class="view-device {{ episode.viewing.deviceType ?? 'tv' }}{% if viewed %} show{% endif %}" data-device="{{ episode.viewing.deviceType ?? 'tv' }}">
                                                    <span>
                                                        {% if episode.viewing.deviceType is null %}?{% endif %}
                                                        {% if episode.viewing.deviceType == 'tv' %}TV{% endif %}
                                                    </span>
                                                    <div class="view-devices">
                                                        <div class="device desktop" data-device="desktop"></div>
                                                        <div class="device laptop" data-device="laptop"></div>
                                                        <div class="device tablet" data-device="tablet"></div>
                                                        <div class="device phone" data-device="phone"></div>
                                                        <div class="device tv" data-device="tv"></div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="vote{% if viewed %} show{% endif %}" data-id="{{ episode.viewing.id }}">
                                                <div class="vote-graduation{% if episode.viewing.vote == 10 %} active{% endif %}" data-title="10" data-value="10"></div>
                                                <div class="vote-graduation{% if episode.viewing.vote >=9 %} active{% endif %}" data-title="9" data-value="9"></div>
                                                <div class="vote-graduation{% if episode.viewing.vote >=8 %} active{% endif %}" data-title="8" data-value="8"></div>
                                                <div class="vote-graduation{% if episode.viewing.vote >=7 %} active{% endif %}" data-title="7" data-value="7"></div>
                                                <div class="vote-graduation{% if episode.viewing.vote >=6 %} active{% endif %}" data-title="6" data-value="6"></div>
                                                <div class="vote-graduation{% if episode.viewing.vote >=5 %} active{% endif %}" data-title="5" data-value="5"></div>
                                                <div class="vote-graduation{% if episode.viewing.vote >=4 %} active{% endif %}" data-title="4" data-value="4"></div>
                                                <div class="vote-graduation{% if episode.viewing.vote >=3 %} active{% endif %}" data-title="3" data-value="3"></div>
                                                <div class="vote-graduation{% if episode.viewing.vote >=2 %} active{% endif %}" data-title="2" data-value="2"></div>
                                                <div class="vote-graduation{% if episode.viewing.vote >=1 %} active{% endif %}" data-title="1" data-value="1"></div>
                                                <div class="vote-value">{% if episode.viewing.vote %}{{ episode.viewing.vote }} / 10{% endif %}</div>
                                            </div>
                                        {% endif %}
                                    </div>
                                </div>
                            {% endfor %}
                        </div>
                    </section>
                    {% if credits %}
                        {{ include('blocks/series/_cast.html.twig') }}
                        {{ include('blocks/series/_crew.html.twig') }}
                    {% endif %}
                </article>
            </main>
        </div>

        {{ include('blocks/_pageFooter.html.twig') }}

    </div>
    <div class="provider-list-data" style="display: none">
        {
        "watchProviderList": {{ watchProviderList|json_encode(constant('JSON_PRETTY_PRINT'))|raw }}
        }
    </div>
{% endblock %}
{% block javascripts %}
    {{ parent() }}
    <script>
        window.addEventListener("DOMContentLoaded", () => {
            initSubstituteName();
            initView();
            initVote();
            setViewedEpisodeCount();
        });

        function initSubstituteName() {
            const substituteNames = document.querySelectorAll('.substituteName');
            document.querySelector('input')?.focus();

            substituteNames?.forEach((substituteName) => {
                const applyButton = substituteName.querySelector('button');
                const input = substituteName.querySelector('input');
                applyButton.addEventListener('click', saveSubstituteName);
                input.addEventListener('keyup', (e) => {
                    if (e.code === 'Enter') {
                        saveSubstituteName(e);
                    }
                });
            });
        }

        function saveSubstituteName(e) {
            const substituteName = e.target.parentElement.querySelector('input').value;
            const id = e.target.dataset.id;
            const url = '{{ path('app_episode_substitute_name') }}';
            const data = JSON.stringify({
                id: id,
                substituteName: substituteName
            });
            const xhr = new XMLHttpRequest();
            xhr.onload = function () {
                window.location.reload();
            }
            xhr.open("GET", url + '?data=' + data, true);
            xhr.send();
        }

        function initView() {
            const watchProviderList = JSON.parse(document.querySelector('.provider-list-data').textContent).watchProviderList;
            const views = document.querySelectorAll('.view');

            views.forEach((view) => {
                const viewValue = view.querySelector('.view-value');
                const viewProvider = view.querySelector('.view-provider');
                const viewProviders = view.querySelector('.view-providers');
                const providers = viewProviders.querySelectorAll('.provider');
                const viewDevice = view.querySelector('.view-device');
                const devices = viewDevice.querySelectorAll('.device');
                const vote = view.parentElement.querySelector('.vote');
                const id = view.getAttribute('data-id');
                const url = '{{ path('app_episode_view', {id: 0, view: 0})|slice(0,-3) }}' + id + '/';
                const urlNetwork = '{{ path('app_episode_view_network', {id: 0, networkId: 0})|slice(0,-3) }}' + id + '/';
                const urlDevice = '{{ path('app_episode_view_device', {id: 0, device: 'tv'})|slice(0,-4) }}' + id + '/';

                viewValue.addEventListener('click', () => {
                    const i = viewValue.querySelector('i');
                    const episodeView = i.classList.contains('fa-check') ? "1" : "0";
                    const xhr = new XMLHttpRequest();
                    xhr.onload = function () {
                        let data = {seasonCompleted: false, episodeViewed: false, viewedEpisodeCount: 0};
                        data = JSON.parse(this.responseText);
                        const provider = view.querySelector('.view-provider');
                        const device = view.querySelector('.view-device');
                        if (data.episodeViewed) {
                            viewValue.innerHTML = '<i class="fa-solid fa-check"></i>';
                            vote.classList.add('show');
                            provider.classList.add('show');
                            device.classList.add('show');
                        } else {
                            viewValue.innerHTML = '<i class="fa-solid fa-plus"></i>';
                            vote.classList.remove('show');
                            provider.classList.remove('show');
                            device.classList.remove('show');
                        }
                        if (data.seasonCompleted) {
                            viewValue.classList.add('completed');
                        } else {
                            viewValue.classList.remove('completed');
                        }
                        const viewingProgress = document.querySelector('.viewing-progress');
                        viewingProgress.querySelector("span").innerText = data.viewedEpisodeCount;
                    }
                    xhr.open("GET", url + episodeView, true);
                    xhr.send();
                });

                providers.forEach((provider) => {
                    provider.addEventListener('click', () => {
                        const providerId = provider.getAttribute('data-id');
                        const xhr = new XMLHttpRequest();
                        xhr.onload = function () {
                            const data = JSON.parse(this.responseText);
                            const networkId = data.networkId;
                            const userProvider = viewProvider.querySelector('.provider');

                            if (networkId !== -1) {
                                const img = document.createElement('img');
                                img.setAttribute('src', watchProviderList[networkId].logo_path);
                                img.setAttribute('alt', watchProviderList[networkId].name);
                                img.setAttribute('title', watchProviderList[networkId].name);

                                userProvider.appendChild(img);
                                userProvider.classList.remove('other');
                                userProvider.setAttribute('data-id', networkId);
                            } else {
                                userProvider.querySelector('img').remove();
                                userProvider.classList.add('other');
                                userProvider.setAttribute('data-id', -1);
                            }
                        }
                        xhr.open("GET", urlNetwork + providerId, true);
                        xhr.send();
                    });
                });
                viewProvider.addEventListener('mouseenter', () => {
                    const providers = view.querySelector('.view-providers');
                    providers.classList.add('visible');
                    setTimeout(() => {
                        providers.classList.add('show');
                    }, 0);
                });
                viewProvider.addEventListener('mouseleave', () => {
                    const providers = view.querySelector('.view-providers');
                    providers.classList.remove('show');
                    setTimeout(() => {
                        providers.classList.remove('visible');
                    }, 125);
                });

                devices.forEach((device) => {
                    device.addEventListener('click', () => {
                        let deviceName = device.getAttribute('data-device');
                        let oldDeviceName = viewDevice.getAttribute('data-device');
                        const xhr = new XMLHttpRequest();
                        xhr.onload = function () {
                            const data = JSON.parse(this.responseText);
                            const newDeviceName = data.device;
                            viewDevice.classList.remove(oldDeviceName);
                            viewDevice.classList.add(newDeviceName);
                            viewDevice.setAttribute('data-device', newDeviceName);
                            if (newDeviceName === 'tv') {
                                viewDevice.querySelector('span').innerText = 'TV';
                            } else {
                                viewDevice.querySelector('span').innerText = '';
                            }
                        }
                        xhr.open("GET", urlDevice + deviceName, true);
                        xhr.send();
                    });
                });
                viewDevice.addEventListener('mouseenter', () => {
                    const devices = view.querySelector('.view-devices');
                    devices.classList.add('visible');
                    setTimeout(() => {
                        devices.classList.add('show');
                    }, 0);
                });
                viewDevice.addEventListener('mouseleave', () => {
                    const devices = view.querySelector('.view-devices');
                    devices.classList.remove('show');
                    setTimeout(() => {
                        devices.classList.remove('visible');
                    }, 125);
                });
            });
        }

        function setViewedEpisodeCount() {
            const viewingProgress = document.querySelector('.viewing-progress');
            if (!viewingProgress) return;

            const views = document.querySelectorAll('.view');
            let count = 0;

            views.forEach((view) => {
                const viewValue = view.querySelector('.view-value');
                const i = viewValue.querySelector('i');
                count += i.classList.contains('fa-check') ? 1 : 0;
            });
            viewingProgress.querySelector("span").innerText = count;
        }

        function initVote() {
            const votes = document.querySelectorAll('.vote');

            votes.forEach((vote) => {
                // const voteValue = vote.querySelector('.vote-value');
                const voteGraduations = vote.querySelectorAll('.vote-graduation');
                const id = vote.getAttribute('data-id');
                const url = '{{ path('app_episode_vote', {id: 0, vote: 0})|slice(0,-3) }}' + id + '/';

                voteGraduations.forEach((graduation) => {
                    graduation.addEventListener('click', (e) => {
                        let value = e.currentTarget.getAttribute('data-value');
                        const voteValueDiv = e.currentTarget.parentElement.querySelector('.vote-value');
                        const voteValue = voteValueDiv.innerText;

                        if (value === "1" && voteValue === "1") {
                            value = "0";
                        }

                        const xhr = new XMLHttpRequest();
                        xhr.onload = function () {
                            const data = JSON.parse(xhr.responseText);
                            const voteValue = data.vote;

                            voteValueDiv.innerText = voteValue + " / 10";
                            voteGraduations.forEach((graduation) => {
                                const voteGraduationValue = parseInt(graduation.getAttribute('data-value'));
                                if (voteGraduationValue <= voteValue) {
                                    graduation.classList.add('active');
                                } else {
                                    graduation.classList.remove('active');
                                }
                            });
                        }
                        xhr.open("GET", url + value, true);
                        xhr.send();
                    });
                });

                voteGraduations.forEach((voteGraduation) => {
                    voteGraduation.addEventListener('mouseenter', (e) => {
                        lightOn(e.currentTarget);
                    });
                    voteGraduation.addEventListener('mouseleave', (e) => {
                        lightOff(e.currentTarget.parentElement);
                    });
                });
            });
        }

        function lightOn(graduation) {
            const vote = graduation.parentElement;
            const voteGraduations = lightOff(vote);
            const value = parseInt(graduation.getAttribute('data-value'));
            voteGraduations.forEach((voteGraduation) => {
                const voteGraduationValue = parseInt(voteGraduation.getAttribute('data-value'));
                if (voteGraduationValue <= value) {
                    voteGraduation.classList.add('light-on');
                }
            });
        }

        function lightOff(vote) {
            const voteGraduations = vote.querySelectorAll('.vote-graduation');
            voteGraduations.forEach((voteGraduation) => {
                voteGraduation.classList.remove('light-on');
            });
            return voteGraduations;
        }
    </script>
{% endblock %}