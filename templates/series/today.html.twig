{% extends 'base.html.twig' %}

{% block title %}myTvTime ▶ ︎{{ 'My series airing today'|trans }}{% endblock %}
{% block description %}{{ 'List of the series I\'m watching, aired today'|trans }}{% endblock %}
{% block keywords %}{{ 'Series, Tv Shows'|trans }}{% endblock %}

{% block body %}
    {{ include('blocks/_mainMenu.html.twig') }}
    <div class="container-fluid">

        {{ include('blocks/_nav.html.twig', {user: app.user}) }}

        <div class="today-series">
            <div class="header">
                <div class="date"{% if backdrop %} style="background-image: url('{{ imageConfig.url ~ imageConfig.backdrop_sizes.3 ~ backdrop }}')"{% endif %}>{{ date|date("d/m/Y", "Europe/Paris") }}</div>
            </div>
            {% set date = date|format_date('full', timezone="Europe/Paris")|capitalize|slice(0,-5) %}
            {#            {{ include('blocks/_nav.html.twig', {user: app.user, thisPage:'New episodes'|trans}) }} #}
            <main>
                <div class="time-travel">
                    <a href="{{ path('app_series_today', {d: prev, m: -1}) }}">
                        <div class="jump" title="{{ 'Previous month'|trans }}">{{ 'time.previous.month'|trans }}</div>
                    </a>
                    <a href="{{ path('app_series_today', {d: prev, w: -1}) }}">
                        <div class="jump" title="{{ 'Previous week'|trans }}">{{ 'time.previous.week'|trans }}</div>
                    </a>
                    <a href="{{ path('app_series_today', {d: prev-1}) }}">
                        <div class="jump" title="{{ 'Previous day'|trans }}">{{ 'time.previous.day'|trans }}</div>
                    </a>

                    <div class="the-date">{{ fixIfFirstDayOfTheMonth(date)|raw }}</div>

                    <a href="{{ path('app_series_today', {d: next+1}) }}">
                        <div class="jump" title="{{ 'Next day'|trans }}">{{ 'time.next.day'|trans }}</div>
                    </a>
                    <a href="{{ path('app_series_today', {d: next, w: 1}) }}">
                        <div class="jump" title="{{ 'Next week'|trans }}">{{ 'time.next.week'|trans }}</div>
                    </a>
                    <a href="{{ path('app_series_today', {d: next, m: 1}) }}">
                        <div class="jump" title="{{ 'Next month'|trans }}">{{ 'time.next.month'|trans }}</div>
                    </a>
                </div>
                <div class="wrapper">
                    {% for todayAiring in todayAirings %}
                        {{ include('blocks/series/_card-today.html.twig') }}
                    {% else %}
                        <div class="nothing">
                            <div class="image-filenames" style="display: none">
                                {
                                "filenames": {{ images|json_encode(constant('JSON_PRETTY_PRINT')) }}
                                }
                            </div>
                        </div>
                        <div class="something-else"></div>
                    {% endfor %}
                </div>
            </main>
        </div>
        {{ include('blocks/_pageFooter.html.twig') }}
    </div>
{% endblock %}
{% block javascripts %}
    {{ parent() }}
    <script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.5.1/dist/confetti.browser.min.js"></script>
    <script>
        let myCanvas, palettes;
        window.addEventListener("DOMContentLoaded", () => {
            const nothing = document.querySelector('.nothing');
            if (nothing) {
                doSomethingElse();
            }

            const newSeason = document.querySelector('.new-season');

            if (newSeason) {
                setTimeout(celebrate, 300);
            }

            function doSomethingElse() {
                const imageFilenames = document.querySelector('.image-filenames');
                const images = JSON.parse(imageFilenames.textContent.replace(/".DS_Store",/g, ''));
                const somethingElse = document.querySelector('.something-else');
                const img = document.createElement('img');
                let lastImageIndex = Math.floor(Math.random() * images.filenames.length);
                img.src = "/images/series/today/" + images.filenames[lastImageIndex];
                somethingElse.appendChild(img);
                img.onload = () => {
                    somethingElse.querySelector("img").classList.add('show');
                };
                setInterval(() => {
                    somethingElse.querySelector("img").classList.remove('show');
                    setTimeout(() => {
                        let imageIndex = Math.floor(Math.random() * images.filenames.length);
                        while (imageIndex === lastImageIndex) {
                            imageIndex = Math.floor(Math.random() * images.filenames.length);
                        }
                        lastImageIndex = imageIndex;
                        let img = somethingElse.querySelector("img")
                        img.src = "/images/series/today/" + images.filenames[imageIndex];
                        img.onload = () => {
                            img.classList.add('show');
                        };
                    }, 300);
                }, 5000);
            }

            palettes = [
                ['#940079', '#ff61e2', '#ffa7ef', '#ffa7bf', '#ff618b', '#940027'],
                ['#255480', '#6aa1d4', '#9bc0e2', '#9be2d2', '#6ad4bb', '#25806b'],
                ['#89a9c8', '#749abe', '#5f8bb4', '#4e7ca6', '#456d92', '#3b5d7d'],
                ['#1bbd1f', '#36d55d', '#6ad49b', '#8dd7bf', '#aedcd8', '#cce2e5'],
                ['#804625', '#d4906a', '#e2b59b', '#e29bb5', '#d46a90', '#802546'],
                ['#fa9e6b', '#fa8e52', '#f97e39', '#f86e20', '#f75e08', '#df5407'],
                ['#be88c8', '#b373bf', '#a75eb5', '#994da8', '#864393', '#733a7e']
            ];

            function celebrate() {
                const particuleCount = 5 + Math.floor(Math.random() * 5);
                const spread = 90 + Math.floor(Math.random() * 30);
                const palette = palettes[Math.floor(Math.random() * palettes.length)];
                const position = [{x: 0, y: .5}, {x: 1, y: .5}];
                const duration = 2 * 1000;
                const end = Date.now() + duration;
                console.log({particuleCount, spread, palette, position});
                myCanvas = document.createElement('canvas');
                document.body.appendChild(myCanvas);
                (function frame() {
                    confetti({
                        resize: true,
                        useWorker: true,
                        particleCount: particuleCount,
                        angle: 60,
                        spread: spread,
                        colors: palette,
                        origin: position[0]
                    });
                    confetti({
                        resize: true,
                        useWorker: true,
                        particleCount: particuleCount,
                        angle: 120,
                        spread: spread,
                        colors: palette,
                        origin: position[1]
                    });
                    if (Date.now() < end) {
                        requestAnimationFrame(frame);
                    } else {
                        setTimeout(() => {
                            document.body.removeChild(myCanvas);
                        }, 3000);
                    }
                }());
            }
        });

    </script>
{% endblock %}