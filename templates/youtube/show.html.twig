{% extends 'base.html.twig' %}

{% block title %}{{ 'my TvTime::YoutubeVideo' }}{% endblock %}
{% set user = app.user %}
{% if video.channel.customUrl %}
    {% set url = video.channel.customUrl %}
{% else %}
    {% set url = 'channel/' ~ video.channel.youtubeId %}
{% endif %}

{% block body %}
    <div class="container">
        {% if userAlreadyLinked %}
            <div class="flash-messages">
                <div class="flash-message success">
                    {{ 'You have already added this video previously.'|trans }}
                    <div class="close"><i class="fa-solid fa-circle-xmark"></i></div>
                </div>
            </div>
        {% endif %}

        {{ include('blocks/_mainMenu.html.twig') }}

        {{ include('blocks/_nav.html.twig', {parent: {url: path('app_youtube'), page: 'My Youtube Videos'}, thisPage: video.title}) }}

        <div class="yt-video-page">
            <div class="video">
                <iframe src="https://www.youtube.com/embed/{{ video.link }}" title="{{ video.title }}" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
            </div>
            <div class="the-video">
                <div class="details">
                    <div class="title-tags">
                        <div class="title-trash">
                            <div class="title">{{ video.title }}</div>
                            <div class="youtube" title="{{ 'See this video on Youtube'|trans }}"><a href="https://youtu.be/{{ video.link }}" target="_blank"><i class="fa-brands fa-youtube"></i></a></div>
                            <div class="copy" data-url="https://youtu.be/{{ video.link }}" title="{{ 'Copy the link'|trans }}"><i class="fa-solid fa-copy"></i></div>
                            <div class="trash" data-dialog="delete-video" title="{{ 'Delete the video'|trans }}"><i class="fa-solid fa-trash"></i></div>
                        </div>
                        {#                  {{ component('youtube_video_tags', {class: 'tags', 'id': user.id, 'video': video.id}) }} #}
                        <div class="tags">
                            <div class="add-tag">
                                <label for="new-tag">{{ 'Tags' }}
                                    <input id="new-tag" type="search" name="tag_query" list="other-tags" autocomplete="off" autofocus>
                                    <datalist id="other-tags">
                                        {% for tag in other_tags %}
                                        <option value="{{ tag }}">
                                            {% endfor %}
                                    </datalist>
                                </label>
                                <div class="add"><i class="fa-solid fa-circle-plus"></i></div>
                            </div>
                            {% for tag in video.tags %}
                                <div class="tag">
                                    #{{ tag }}
                                    <div class="close" data-id="{{ tag.id }}"><i class="fa-solid fa-circle-xmark"></i></div>
                                </div>
                            {% endfor %}
                        </div>
                    </div>
                    <div class="date">{{ 'Published at'|trans }} : {{ video.publishedAt|format_date('full')|capitalize }}</div>
                    <div class="description">{{ description|raw }}</div>
                    <div class="channel">
                        <div class="thumbnail">
                            <a href="https://www.youtube.com/{{ url }}" target="_blank" rel="noopener">
                                {% if video.channel.thumbnailDefaultUrl %}
                                    <img src="{{ video.channel.thumbnailDefaultUrl }}" alt="{{ video.channel.title }}" class="w-100">
                                {% else %}
                                    {{ video.channel.title|first }}
                                {% endif %}
                            </a>
                        </div>
                        <div class="title">{{ video.channel.title }}</div>
                    </div>
                </div>
                <div class="qr-code">
                    <img src="https://api.qrcode-monkey.com/qr/custom?data=https://www.youtube.com/watch?v={{ video.link }}">
                </div>
            </div>
            <div class="copied-text">{{ 'Copied!'|trans }}</div>
        </div>

        {{ include('blocks/_pageFooter.html.twig') }}

    </div>
    <dialog class="delete-video">
        <div class="overlay">
            <div class="header">
                {{ 'Delete this video'|trans }}
                <button value="nope" class="close"><i class="fa-solid fa-circle-xmark"></i></button>
            </div>
            <div class="content">
                {{ 'Do you really want to delete this video?'|trans }}
            </div>
            <div class="footer">
                <button value="nope" class="btn btn-secondary delete-video-cancel">{{ 'Cancel'|trans }}</button>
                <button value="yass" class="btn btn-danger delete-video-done">{{ 'Delete'|trans }}</button>
            </div>
        </div>
    </dialog>
{% endblock %}
{% block javascripts %}
    {{ parent() }}
    <script>
        const _app_youtube = "{{ path('app_youtube') }}";
        const _yt_video_delete = "{{ path('app_youtube_video_delete', {id: video.id}) }}";
        const _yt_video_add_tag = "{{ path('app_youtube_video_add_tag', {id: video.id, tag: 'tag'}) }}";
        const _yt_video_remove_tag = "{{ path('app_youtube_video_remove_tag', {id: video.id, tag: 1}) }}";

        window.addEventListener("DOMContentLoaded", () => {

            const trash = document.querySelector(".trash");
            const copy = document.querySelector(".copy");
            const tags = document.querySelector(".tags");
            const input = document.querySelector("#new-tag");
            const tagList = document.querySelector("#other-tags");
            const addTag = document.querySelector(".add");
            const videoTags = document.querySelectorAll(".tag");
            const delTags = document.querySelectorAll(".close");

            initDeleteDialog(document.querySelector(".delete-video"))
            trash.addEventListener("click", openDialog);

            addTag.addEventListener("click", addNewTag);
            input.addEventListener("keyup", ({key}) => {
                if (key === "Enter") {
                    addNewTag();
                }
            })

            delTags.forEach(delTag => {
                delTag.addEventListener("click", () => {
                    removeTag(delTag);
                });
            });

            copy.addEventListener("click", (evt) => {
                const mouseX = evt.pageX, mouseY = evt.pageY;
                const copied = document.querySelector(".copied-text");
                navigator.clipboard.writeText("https://youtu.be/{{ video.link }}");
                copy.classList.add("copied");
                setTimeout(() => {
                    copy.classList.remove("copied")
                }, 500);
                copied.style.top = (mouseY - (copied.clientHeight / 2)) + "px";
                copied.style.left = (mouseX - (copied.clientWidth / 2)) + "px";
                setTimeout(() => {
                    copied.classList.add("visible", "move-up");
                }, 0);
                setTimeout(() => {
                    copied.classList.remove("visible");
                }, 1500);
                setTimeout(() => {
                    copied.classList.remove("move-up");
                }, 2500);
            })

            function initDeleteDialog(dialog) {

                currentDialog = dialog;

                dialog.querySelector(".delete-video-done").addEventListener("click", () => {
                    closeDialog(dialog, true);
                })
                dialog.querySelector(".delete-video-cancel").addEventListener("click", () => {
                    closeDialog(dialog, false);
                })
                dialog.querySelector(".close").addEventListener('click', function () {
                    closeDialog(dialog, false);
                });
            }

            function openDialog(evt) {
                const dialog = document.querySelector("." + evt.currentTarget.getAttribute("data-dialog"));
                if (typeof dialog.showModal === "function") {
                    dialog.showModal();
                    setTimeout(() => {
                        dialog.classList.add("show")
                    }, 0);
                } else {
                    console.error("L'API <dialog> n'est pas prise en charge par ce navigateur.");
                    /*dialog.setAttribute("open");
                    let offset = document.querySelector("html").scrollTop;
                    dialog.setAttribute("style", "translate: 0 " + offset + "px;");
                    dialog.classList.remove("d-none");
                    dialog.classList.add("d-block");*/
                }
            }

            function closeDialog(dialog, lets_delete) {
                dialog.classList.remove("show");
                setTimeout(() => {
                    dialog.close()
                }, 300);
                if (lets_delete) {
                    deleteVideo();
                }
            }

            function deleteVideo() {
                const xhr = new XMLHttpRequest();
                xhr.onload = function () {
                    const response = JSON.parse(this.response);
                    console.log({response});
                    // window.location.href = _app_youtube;
                    history.back();
                }
                xhr.open("GET", _yt_video_delete);
                xhr.send();
            }

            function addNewTag() {
                const newTag = input.value;

                if (newTag.length === 0) return;

                const xhr = new XMLHttpRequest();
                xhr.onload = function () {
                    const response = JSON.parse(this.response);
                    // console.log({response});

                    if (response['new_tag_id'] > 0) {
                        let newTagButton = document.createElement("div");
                        newTagButton.classList.add("tag", "new");
                        newTagButton.appendChild(document.createTextNode('#' + response['new_tag']));
                        let closeButton = document.createElement("div");
                        closeButton.classList.add("close");
                        closeButton.setAttribute("data-id", response['new_tag_id']);
                        let circleXMark = document.createElement("i");
                        circleXMark.classList.add("fa-solid", "fa-circle-xmark");
                        closeButton.appendChild(circleXMark);
                        newTagButton.appendChild(closeButton);
                        if (videoTags.length) {
                            tags.insertBefore(newTagButton, videoTags[0]);
                        } else {
                            tags.appendChild(newTagButton);
                        }
                        closeButton.addEventListener("click", () => {
                            removeTag(closeButton);
                        });
                        if (response['rebuild_list']) {
                            while (tagList.lastElementChild) {
                                tagList.removeChild(tagList.lastElementChild);
                            }
                            let newTagListItems = response['other_tags'];
                            for (let i = 0; i < newTagListItems.length; i++) {
                                let option = document.createElement("option");
                                option.setAttribute("value", newTagListItems[i]);
                                tagList.appendChild(option);
                            }
                        }
                    }
                    input.value = "";
                }

                xhr.open("GET", _yt_video_add_tag.substring(0, _yt_video_add_tag.length - 3) + newTag.capitalize());
                xhr.send();
            }

            function removeTag(tag) {
                const tagId = tag.getAttribute("data-id");
                const xhr = new XMLHttpRequest();
                xhr.onload = function () {
                    const response = JSON.parse(this.response);
                    // console.log({response});
                    tags.removeChild(tag.parentElement);
                }

                xhr.open("GET", _yt_video_remove_tag.substring(0, _yt_video_remove_tag.length - 1) + tagId);
                xhr.send();
            }
        });

        Object.defineProperty(String.prototype, 'capitalize', {
            value: function () {
                return this.charAt(0).toUpperCase() + this.slice(1);
            },
            enumerable: false
        });
    </script>
{% endblock %}