{% extends 'base.html.twig' %}

{% block title %}{{ 'my TvTime::YoutubeVideo' }}{% endblock %}
{% set user = app.user %}
{% if video.channel.customUrl %}
    {% set url = 'c/' ~ video.channel.customUrl %}
{% else %}
    {% set url = 'channel/' ~ video.channel.youtubeId %}
{% endif %}

{% block body %}
    {#    {% if app.debug=='dev' %}{{ dump() }}{% endif %} #}
    <div class="container">

        {{ include('blocks/pageHeader.html.twig') }}

        <nav aria-label="{{ 'Navigation'|trans }}" class="nav-breadcrumb" style="--bs-breadcrumb-divider: 'â—¦';">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="{{ path('app_home') }}">{{ 'Homepage'|trans }}</a></li>
                <li class="breadcrumb-item"><a href="{{ path('app_youtube') }}">{{ 'My Youtube Videos'|trans }}</a></li>
                <li class="breadcrumb-item"><a href="https://www.youtube.com/{{ url }}" target="_blank">{{ video.channel.title }}</a></li>
                <li class="breadcrumb-item active" aria-current="{{ video.title }}">{{ video.title }}</li>
            </ol>
        </nav>

        <div class="yt-video-page">
            <div class="video">
                <iframe src="https://www.youtube.com/embed/{{ video.link }}" title="{{ video.title }}" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
            </div>
            <div class="details">
                <div class="title-tags">
                    <div class="title">{{ video.title }}</div>
                    {#                  {{ component('youtube_video_tags', {class: 'tags', 'id': user.id, 'video': video.id}) }} #}
                    <div class="tags">
                        <div class="add-tag">
                            <label for="new-tag">{{ 'Tags' }}
                                <input id="new-tag" type="search" name="tag_query" list="other-tags" autofocus>
                                <datalist id="other-tags">
                                    {% for tag in other_tags %}
                                        <option value="{{ tag }}">
                                    {% endfor %}
                                </datalist>
                            </label>
                            <div class="add"><i class="fa-solid fa-circle-plus"></i></div>
                        </div>
                        {% for tag in video.tags %}
                            <div class="tag">
                                #{{ tag }}
                                <div class="close" data-id="{{ tag.id }}"><i class="fa-solid fa-circle-xmark"></i></div>
                            </div>
                        {% endfor %}
                    </div>
                </div>
                <div class="date">{{ 'Published at'|trans }} : {{ video.publishedAt|format_date('full')|capitalize }}</div>
                <div class="description">{{ description|raw }}</div>
                <div class="channel">
                    <div class="thumbnail">
                        <a href="https://www.youtube.com/{{ url }}" target="_blank">
                            {% if video.channel.thumbnailDefaultUrl %}
                                <img src="{{ video.channel.thumbnailDefaultUrl }}" alt="{{ video.channel.title }}" class="w-100">
                            {% else %}
                                {{ video.channel.title|first }}
                            {% endif %}
                        </a>
                    </div>
                    <div class="title">{{ video.channel.title }}</div>
                </div>
            </div>
        </div>

        {{ include('blocks/pageFooter.html.twig') }}

    </div>
{% endblock %}
{% block morejs %}
    <script>
        const _yt_video_add_tag = "{{ path('app_youtube_video_add_tag', {id: video.id, tag: 'tag'}) }}";
        const _yt_video_remove_tag = "{{ path('app_youtube_video_remove_tag', {id: video.id, tag: 1}) }}";

        window.addEventListener("DOMContentLoaded", () => {

            const tags = document.querySelector(".tags");
            const input = document.querySelector("#new-tag");
            const tagList = document.querySelector("#other-tags");
            const addTag = document.querySelector(".add");
            const videoTags = document.querySelectorAll(".tag");
            const delTags = document.querySelectorAll(".close");

            addTag.addEventListener("click", addNewTag);
            input.addEventListener("keyup", ({key}) => {
                // console.log(key);
                // console.log({key});
                if (key === "Enter") {
                    addNewTag();
                }
            })

            delTags.forEach(delTag => {
                delTag.addEventListener("click", () => {
                    removeTag(delTag);
                });
            });

            function addNewTag() {
                const newTag = input.value;

                if (newTag.length === 0) return;

                const xhr = new XMLHttpRequest();
                xhr.onload = function () {
                    const response = JSON.parse(this.response);
                    // console.log({response});

                    if (response['new_tag_id'] > 0) {
                        let newTagButton = document.createElement("div");
                        newTagButton.classList.add("tag", "new");
                        newTagButton.appendChild(document.createTextNode('#' + response['new_tag']));
                        let closeButton = document.createElement("div");
                        closeButton.classList.add("close");
                        closeButton.setAttribute("data-id", response['new_tag_id']);
                        let circleXMark = document.createElement("i");
                        circleXMark.classList.add("fa-solid", "fa-circle-xmark");
                        closeButton.appendChild(circleXMark);
                        newTagButton.appendChild(closeButton);
                        if (videoTags.length) {
                            tags.insertBefore(newTagButton, videoTags[0]);
                        }
                        else {
                            tags.appendChild(newTagButton);
                        }
                        closeButton.addEventListener("click", () => {
                            removeTag(closeButton);
                        });
                        if (response['rebuild_list']) {
                            while (tagList.lastElementChild) {
                                tagList.removeChild(tagList.lastElementChild);
                            }
                            let newTagListItems = response['other_tags'];
                            for (let i= 0; i< newTagListItems.length; i++) {
                                let option = document.createElement("option");
                                option.setAttribute("value", newTagListItems[i]);
                                tagList.appendChild(option);
                            }
                        }
                    }
                    input.value = "";
                }

                xhr.open("GET", _yt_video_add_tag.substring(0, _yt_video_add_tag.length - 3) + newTag.capitalize());
                xhr.send();
            }

            function removeTag(tag) {
                const tagId = tag.getAttribute("data-id");
                const xhr = new XMLHttpRequest();
                xhr.onload = function () {
                    const response = JSON.parse(this.response);
                    // console.log({response});
                    tags.removeChild(tag.parentElement);
                }

                xhr.open("GET", _yt_video_remove_tag.substring(0, _yt_video_remove_tag.length - 1) + tagId);
                xhr.send();
            }
        });

        Object.defineProperty(String.prototype, 'capitalize', {
            value: function() {
                return this.charAt(0).toUpperCase() + this.slice(1);
            },
            enumerable: false
        });
    </script>
{% endblock %}